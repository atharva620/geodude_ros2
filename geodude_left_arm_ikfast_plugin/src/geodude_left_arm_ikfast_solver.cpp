/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-08-21 11:15:55.442265
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKsin(j[3]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKcos(j[5]);
x12=IKsin(j[5]);
x13=IKcos(j[6]);
x14=((0.045)*x3);
x15=((1.0)*x4);
x16=((1.0)*x6);
x17=((0.3)*x3);
x18=((1.0)*x8);
x19=((1.0)*x12);
x20=((0.045)*x4);
x21=((0.55)*x7);
x22=((1.0)*x11);
x23=(x0*x2);
x24=(x0*x4);
x25=(x2*x7);
x26=(x7*x8);
x27=(x1*x2);
x28=(x6*x7);
x29=(x1*x4);
x30=((0.045)*x27);
x31=((0.045)*x23);
x32=(x16*x3);
x33=(x1*x28);
x34=(x0*x15*x3);
x35=(x14*x24);
x36=(x14*x29);
x37=((((-1.0)*x34))+x27);
x38=(((x23*x3))+x29);
x39=(((x27*x3))+(((-1.0)*x0*x15)));
x40=((((-1.0)*x32))+((x26*x4)));
x41=((((-1.0)*x27))+x34);
x42=(((x1*x15*x3))+(((1.0)*x23)));
x43=((-1.0)*x42);
x44=(((x18*x3))+((x15*x28)));
x45=(x31+x36);
x46=(x12*x40);
x47=(x37*x6);
x48=(x43*x6);
x49=(x42*x8);
x50=(((x0*x28))+((x41*x8)));
x51=(x33+x49);
x52=(((x44*x9))+((x25*x5)));
x53=((((-1.0)*x44*x5))+((x25*x9)));
x54=(x12*x50);
x55=(x12*x51);
x56=(((x5*((((x0*x26))+x47))))+((x38*x9)));
x57=(((x5*((((x1*x26))+x48))))+((x39*x9)));
x58=(x11*x56);
x59=(((x9*(((((-1.0)*x47))+(((-1.0)*x0*x26))))))+((x38*x5)));
x60=(((x9*(((((-1.0)*x16*x43))+(((-1.0)*x1*x18*x7))))))+((x39*x5)));
x61=(x11*x57);
eerot[0]=(((x13*((x58+x54))))+((x10*x59)));
eerot[1]=(((x13*x59))+((x10*(((((-1.0)*x19*x50))+(((-1.0)*x22*x56)))))));
eerot[2]=(((x12*x56))+((x11*(((((-1.0)*x18*x41))+(((-1.0)*x0*x16*x7)))))));
eetrans[0]=((0.22)+(((-1.0)*x35))+((x8*(((((-1.0)*x17*x24))+(((0.3)*x27))))))+(((-0.3)*x0*x28))+(((-0.045)*x0*x26))+(((-1.0)*x0*x21))+x30+((x6*(((((-1.0)*x30))+x35)))));
eerot[3]=(((x13*((x55+x61))))+((x10*x60)));
eerot[4]=(((x13*x60))+((x10*(((((-1.0)*x55))+(((-1.0)*x61)))))));
eerot[5]=(((x12*x57))+((x11*(((((-1.0)*x18*x42))+(((-1.0)*x1*x16*x7)))))));
eetrans[1]=((0.14)+(((-1.0)*x45))+(((-1.0)*x1*x21))+(((-0.045)*x1*x26))+(((-0.3)*x33))+((x45*x6))+((x8*(((((-0.3)*x23))+(((-1.0)*x17*x29)))))));
eerot[6]=(((x10*x52))+((x13*((((x11*x53))+x46)))));
eerot[7]=(((x13*x52))+((x10*(((((-1.0)*x19*x40))+(((-1.0)*x22*x53)))))));
eerot[8]=(((x12*x53))+((x11*(((((-1.0)*x15*x26))+x32)))));
eetrans[2]=((0.346)+(((-0.3)*x26*x4))+((x14*x8))+((x17*x6))+(((-1.0)*x20*x7))+((x20*x28))+(((0.55)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.22)+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.14)+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x62=((1.0)*px);
IkReal x63=((1.0)*pz);
IkReal x64=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x64))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x63)));
rxp0_2=((((-1.0)*r10*x62))+((py*r00)));
rxp1_0=((((-1.0)*r21*x64))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x63)));
rxp1_2=((((-1.0)*r11*x62))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x64)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x63)));
rxp2_2=((((-1.0)*r12*x62))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x65=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j3array[0]=((-1.34027003705633)+(((-1.0)*x65)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+x65);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x66=cj2*cj2;
IkReal x67=sj3*sj3;
IkReal x68=cj3*cj3;
IkReal x69=((3.0)*cj2);
IkReal x70=((13.3333333333333)*cj3*sj3);
j1eval[0]=((IKabs(((((20.0)*cj2*sj3))+x69+(((-1.0)*cj3*x69)))))+(((66.6666666666667)*(IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))));
j1eval[1]=((149.382716049383)+(((-1.0)*x66*x70))+(((24.4444444444444)*sj3))+(((13.3333333333333)*sj3*x66))+(((-2.0)*cj3*x66))+x70+x66+x67+(((44.4444444444444)*x66*x67))+(((44.4444444444444)*x68))+(((162.962962962963)*cj3))+((x66*x68)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x71=cj2*cj2;
IkReal x72=py*py;
IkReal x73=sj2*sj2;
IkReal x74=px*px;
IkReal x75=py*py*py*py;
IkReal x76=sj2*sj2*sj2*sj2;
IkReal x77=cj2*cj2*cj2*cj2;
IkReal x78=((1.0)*px*py);
IkReal x79=(x72*x74);
IkReal x80=((2.0)*x71*x73);
j0eval[0]=((IKabs(((((-1.0)*x71*x78))+(((-1.0)*x73*x78)))))+(IKabs((((x72*x73))+((x71*x72))))));
j0eval[1]=(((x79*x80))+((x75*x76))+((x75*x77))+((x76*x79))+((x75*x80))+((x77*x79)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x81=py*py;
IkReal x82=cj2*cj2;
IkReal x83=sj2*sj2;
IkReal x84=((0.045)*py*sj2);
IkReal x85=((1.0)*px*py);
IkReal x86=(((x81*x83))+((x81*x82)));
IkReal x87=((((-1.0)*x82*x85))+(((-1.0)*x83*x85)));
CheckValue<IkReal> x90 = IKatan2WithCheck(IkReal(x86),IkReal(x87),IKFAST_ATAN2_MAGTHRESH);
if(!x90.valid){
continue;
}
IkReal x88=((1.0)*(x90.value));
if((((x87*x87)+(x86*x86))) < -0.00001)
continue;
CheckValue<IkReal> x91=IKPowWithIntegerCheck(IKabs(IKsqrt(((x87*x87)+(x86*x86)))),-1);
if(!x91.valid){
continue;
}
if( (((x91.value)*(((((0.3)*py*sj2*sj3))+x84+(((-1.0)*cj3*x84)))))) < -1-IKFAST_SINCOS_THRESH || (((x91.value)*(((((0.3)*py*sj2*sj3))+x84+(((-1.0)*cj3*x84)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x89=IKasin(((x91.value)*(((((0.3)*py*sj2*sj3))+x84+(((-1.0)*cj3*x84))))));
j0array[0]=((((-1.0)*x89))+(((-1.0)*x88)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x89+(((-1.0)*x88)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x92=sj2*sj2;
IkReal x93=cj2*cj2;
IkReal x94=px*px;
IkReal x95=IKcos(j0);
IkReal x96=IKsin(j0);
IkReal x97=(px*py);
IkReal x98=((0.045)*sj2);
IkReal x99=((1.0)*x94);
IkReal x100=((0.3)*sj2*sj3);
evalcond[0]=((((-1.0)*cj3*px*x98))+((x96*(((((-1.0)*x92*x99))+(((-1.0)*x93*x99))))))+((px*x100))+((x95*((((x92*x97))+((x93*x97))))))+((px*x98)));
evalcond[1]=((((-1.0)*px*x96))+((py*x95))+x100+x98+(((-1.0)*cj3*x98)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x101=(py*sj0);
IkReal x102=(cj2*pz);
IkReal x103=((0.045)*sj3);
IkReal x104=((6.66666666666667)*cj3);
IkReal x105=(cj0*px);
IkReal x106=((0.3)*cj3);
j1eval[0]=(((cj3*x102))+((sj3*x105))+((sj3*x101))+(((-6.66666666666667)*sj3*x102))+(((12.2222222222222)*x105))+(((12.2222222222222)*x101))+((x104*x105))+((x101*x104))+(((-1.0)*x102)));
j1eval[1]=IKsign((((x103*x105))+(((0.045)*cj3*x102))+((x105*x106))+(((0.55)*x105))+(((0.55)*x101))+(((-0.045)*x102))+(((-0.3)*sj3*x102))+((x101*x103))+((x101*x106))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x107=cj0*cj0;
IkReal x108=py*py;
IkReal x109=(sj2*x107);
IkReal x110=(((sj2*x108))+(((-1.0)*x108*x109))+((sj2*(pz*pz)))+(((2.0)*cj0*px*py*sj0*sj2))+((x109*(px*px))));
j1eval[0]=x110;
j1eval[1]=IKsign(x110);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x111=(cj3*sj2);
IkReal x112=((0.045)*sj2);
IkReal x113=(sj2*sj3);
IkReal x114=(pz*sj2);
IkReal x115=((1.0)*sj2);
IkReal x116=(cj2*py*sj0);
IkReal x117=(pz*x113);
IkReal x118=(cj0*cj2*px);
IkReal x119=(x113*x116);
j1eval[0]=(((x111*x116))+((x111*x118))+(((-12.2222222222222)*x114))+(((-6.66666666666667)*pz*x111))+(((-1.0)*x115*x116))+(((-1.0)*x115*x118))+(((-6.66666666666667)*x119))+(((-1.0)*x117))+(((-6.66666666666667)*x113*x118)));
j1eval[1]=IKsign(((((-1.0)*x112*x118))+(((-1.0)*x112*x116))+(((-0.55)*x114))+(((-0.3)*pz*x111))+(((-0.3)*x113*x118))+(((-1.0)*pz*sj3*x112))+(((-0.3)*x119))+(((0.045)*x111*x116))+(((0.045)*x111*x118))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x120=(cj0*px);
IkReal x121=(py*sj0);
IkReal x122=(pp*pz);
IkReal x123=((0.0254095720202485)*sj3);
IkReal x124=((0.92038656235619)*pp);
IkReal x125=((36.2220411120167)*pp);
IkReal x126=((1.0)*sj3);
IkReal x127=(pz*sj3);
j1eval[0]=((((-12.2222222222222)*x127))+(((-1.0)*x120*x126))+((x121*x125))+(((7.28153581454315)*x120))+(((7.28153581454315)*x121))+(((-3.92556370551481)*pz))+((x120*x125))+(((-1.0)*x121*x126))+(((5.4333061668025)*x122)));
j1eval[1]=IKsign(((((-1.0)*x120*x123))+((x121*x124))+(((-0.099746893695352)*pz))+(((0.185020708697653)*x121))+(((0.185020708697653)*x120))+((x120*x124))+(((-0.310561435803037)*x127))+(((-1.0)*x121*x123))+(((0.138057984353428)*x122))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x128=(py*sj0);
IkReal x129=((0.3)*cj3);
IkReal x130=((0.045)*sj3);
IkReal x131=(pz*sj3);
IkReal x132=(cj3*pz);
IkReal x133=((6.66666666666667)*cj3);
IkReal x134=(cj0*px);
j1eval[0]=(((sj3*x134))+((sj3*x128))+x132+(((-1.0)*pz))+((x133*x134))+(((12.2222222222222)*x134))+(((-6.66666666666667)*x131))+((x128*x133))+(((12.2222222222222)*x128)));
j1eval[1]=IKsign(((((-0.045)*pz))+((x129*x134))+(((0.045)*x132))+(((0.55)*x134))+((x130*x134))+(((0.55)*x128))+(((-0.3)*x131))+((x128*x130))+((x128*x129))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x135=(cj0*px);
IkReal x136=((0.310561435803037)*sj3);
IkReal x137=(pp*pz);
IkReal x138=(py*sj0);
IkReal x139=((0.138057984353428)*pp);
IkReal x140=((12.2222222222222)*sj3);
IkReal x141=((5.4333061668025)*pp);
IkReal x142=(pz*sj3);
j1eval[0]=((((-1.0)*x138*x141))+(((7.28153581454315)*pz))+(((3.92556370551481)*x135))+(((3.92556370551481)*x138))+((x138*x140))+((x135*x140))+(((-1.0)*x142))+(((36.2220411120167)*x137))+(((-1.0)*x135*x141)));
j1eval[1]=IKsign(((((-1.0)*x135*x139))+((x135*x136))+(((-1.0)*x138*x139))+((x136*x138))+(((0.099746893695352)*x138))+(((0.099746893695352)*x135))+(((0.185020708697653)*pz))+(((-0.0254095720202485)*x142))+(((0.92038656235619)*x137))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x143=cj3*cj3;
IkReal x144=(cj0*px);
IkReal x145=(cj3*sj3);
IkReal x146=((0.00621260929590428)*pp);
IkReal x147=(py*sj0);
IkReal x148=((0.138057984353428)*pp);
IkReal x149=((0.0414173953060285)*pp);
IkReal x150=((0.310561435803037)*sj3);
IkReal x151=((1.0)*pz);
CheckValue<IkReal> x152 = IKatan2WithCheck(IkReal(((-0.000703060285319834)+(((-1.0)*x149))+(((-1.0)*x144*x151))+((cj3*x149))+(((-0.276115968706857)*pp*sj3))+(((-1.0)*x147*x151))+(((-0.00114343074091118)*x145))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-0.00762287160607455)*x143)))),IkReal(((-0.097657040957202)+(((0.0931684307409112)*x143))+x146+(pz*pz)+(((0.00448861021629084)*cj3))+(((-1.0)*cj3*x146))+(((-0.0438993327197423)*sj3))+((sj3*x149))+(((0.0139752646111367)*x145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x152.valid){
continue;
}
CheckValue<IkReal> x153=IKPowWithIntegerCheck(IKsign(((((-0.0254095720202485)*pz*sj3))+((x144*x150))+(((-1.0)*x144*x148))+(((0.099746893695352)*x144))+(((0.099746893695352)*x147))+(((0.185020708697653)*pz))+(((-1.0)*x147*x148))+(((0.92038656235619)*pp*pz))+((x147*x150)))),-1);
if(!x153.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x152.value)+(((1.5707963267949)*(x153.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x154=IKcos(j1);
IkReal x155=IKsin(j1);
IkReal x156=((0.045)*sj3);
IkReal x157=((0.3)*cj3);
IkReal x158=(cj0*px);
IkReal x159=((0.045)*cj3);
IkReal x160=(py*sj0);
IkReal x161=((1.0)*x155);
IkReal x162=(sj3*x154);
IkReal x163=(pz*x155);
IkReal x164=(pz*x154);
IkReal x165=((0.09)*x154);
IkReal x166=((1.1)*x155);
evalcond[0]=((0.045)+(((-1.0)*x159))+x163+((x154*x158))+((x154*x160))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-1.0)*x157))+(((-1.0)*x156))+(((-1.0)*x158*x161))+(((-1.0)*x160*x161))+x164);
evalcond[2]=((((-0.138057984353428)*pp*x155))+(((0.099746893695352)*x155))+pz+(((0.310561435803037)*sj3*x155))+(((-0.92038656235619)*pp*x154))+(((0.0254095720202485)*x162))+(((-0.185020708697653)*x154)));
evalcond[3]=((((-1.0)*x154*x159))+(((0.3)*x162))+x160+x158+(((0.55)*x155))+((x155*x157))+((x155*x156))+(((0.045)*x154)));
evalcond[4]=((-0.2125)+(((-1.0)*x158*x165))+(((-1.0)*x158*x166))+(((-1.0)*x160*x165))+(((-1.0)*x160*x166))+(((-0.09)*x163))+(((1.1)*x164))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x744=py*py;
IkReal x745=cj0*cj0;
IkReal x746=cj3*cj3;
IkReal x747=(py*sj0);
IkReal x748=((0.3)*cj3);
IkReal x749=((0.045)*sj3);
IkReal x750=(cj0*px);
IkReal x751=((0.045)*pz);
IkReal x752=(cj3*sj3);
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(((0.092025)+(((-2.0)*x747*x750))+(((-0.027)*x752))+(((-0.00405)*cj3))+((x744*x745))+(((-1.0)*x745*(px*px)))+(((-0.087975)*x746))+(((0.027)*sj3))+(((-1.0)*x744)))),IkReal(((-0.03825)+(((0.027)*x746))+(((0.01125)*cj3))+((pz*x750))+(((-0.167025)*sj3))+(((-0.087975)*x752))+((pz*x747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(((((-0.3)*pz*sj3))+((x747*x748))+((x747*x749))+((cj3*x751))+(((0.55)*x750))+(((0.55)*x747))+((x749*x750))+(((-1.0)*x751))+((x748*x750)))),-1);
if(!x754.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x753.value)+(((1.5707963267949)*(x754.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x755=IKcos(j1);
IkReal x756=IKsin(j1);
IkReal x757=((0.045)*sj3);
IkReal x758=((0.3)*cj3);
IkReal x759=(cj0*px);
IkReal x760=((0.045)*cj3);
IkReal x761=(py*sj0);
IkReal x762=((1.0)*x756);
IkReal x763=(sj3*x755);
IkReal x764=(pz*x756);
IkReal x765=(pz*x755);
IkReal x766=((0.09)*x755);
IkReal x767=((1.1)*x756);
evalcond[0]=((0.045)+(((-1.0)*x760))+(((0.3)*sj3))+((x755*x759))+x764+((x755*x761)));
evalcond[1]=((-0.55)+x765+(((-1.0)*x757))+(((-1.0)*x758))+(((-1.0)*x761*x762))+(((-1.0)*x759*x762)));
evalcond[2]=((((-0.138057984353428)*pp*x756))+(((-0.92038656235619)*pp*x755))+(((0.310561435803037)*sj3*x756))+(((-0.185020708697653)*x755))+pz+(((0.0254095720202485)*x763))+(((0.099746893695352)*x756)));
evalcond[3]=(((x756*x757))+((x756*x758))+(((0.045)*x755))+(((-1.0)*x755*x760))+(((0.55)*x756))+x759+x761+(((0.3)*x763)));
evalcond[4]=((-0.2125)+(((1.1)*x765))+(((-1.0)*pp))+(((-0.09)*x764))+(((-1.0)*x761*x766))+(((-1.0)*x761*x767))+(((-1.0)*x759*x767))+(((-1.0)*x759*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x768=cj3*cj3;
IkReal x769=(cj3*sj3);
IkReal x770=(cj0*px);
IkReal x771=((0.92038656235619)*pp);
IkReal x772=((0.0254095720202485)*sj3);
IkReal x773=(py*sj0);
IkReal x774=(pp*sj3);
IkReal x775=(cj3*pp);
CheckValue<IkReal> x776 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((-0.0414173953060285)*x774))+(((-0.276115968706857)*x775))+(pz*pz)+(((0.00762287160607455)*x769))+(((-0.506212609295904)*pp))+(((-0.00114343074091118)*x768))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3)))),IkReal(((-0.0688360561435803)+((pz*x770))+((pz*x773))+(((0.00621260929590428)*x774))+(((-0.0299240681086056)*cj3))+(((0.0759318913943856)*pp))+(((0.0414173953060285)*x775))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*x769))+(((0.0139752646111367)*x768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x776.valid){
continue;
}
CheckValue<IkReal> x777=IKPowWithIntegerCheck(IKsign((((x771*x773))+((x770*x771))+(((-0.099746893695352)*pz))+(((0.185020708697653)*x773))+(((0.185020708697653)*x770))+(((-0.310561435803037)*pz*sj3))+(((-1.0)*x772*x773))+(((0.138057984353428)*pp*pz))+(((-1.0)*x770*x772)))),-1);
if(!x777.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x776.value)+(((1.5707963267949)*(x777.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x778=IKcos(j1);
IkReal x779=IKsin(j1);
IkReal x780=((0.045)*sj3);
IkReal x781=((0.3)*cj3);
IkReal x782=(cj0*px);
IkReal x783=((0.045)*cj3);
IkReal x784=(py*sj0);
IkReal x785=((1.0)*x779);
IkReal x786=(sj3*x778);
IkReal x787=(pz*x779);
IkReal x788=(pz*x778);
IkReal x789=((0.09)*x778);
IkReal x790=((1.1)*x779);
evalcond[0]=((0.045)+(((-1.0)*x783))+((x778*x784))+((x778*x782))+(((0.3)*sj3))+x787);
evalcond[1]=((-0.55)+(((-1.0)*x781))+(((-1.0)*x780))+(((-1.0)*x782*x785))+(((-1.0)*x784*x785))+x788);
evalcond[2]=((((0.099746893695352)*x779))+(((0.310561435803037)*sj3*x779))+(((-0.185020708697653)*x778))+pz+(((-0.138057984353428)*pp*x779))+(((0.0254095720202485)*x786))+(((-0.92038656235619)*pp*x778)));
evalcond[3]=((((0.045)*x778))+((x779*x781))+((x779*x780))+(((0.3)*x786))+x782+x784+(((0.55)*x779))+(((-1.0)*x778*x783)));
evalcond[4]=((-0.2125)+(((1.1)*x788))+(((-1.0)*pp))+(((-1.0)*x784*x790))+(((-1.0)*x782*x789))+(((-1.0)*x782*x790))+(((-1.0)*x784*x789))+(((-0.09)*x787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x791=cj3*cj3;
IkReal x792=(cj3*pp);
IkReal x793=(cj3*sj3);
j1eval[0]=((-9.18019027225125)+(((-13.0718954248366)*x792))+(((-2.36212985601739)*cj3))+(((4.26078431372549)*x791))+x793+(((-1.77098614506927)*sj3))+(((-23.1501456871801)*pp)));
j1eval[1]=IKsign(((-0.198275)+(((0.0215981362172112)*x793))+(((0.092025)*x791))+(((-0.0510176023930051)*cj3))+(((-0.5)*pp))+(((-0.282328578002761)*x792))+(((-0.03825)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x794=(cj0*px);
IkReal x795=(py*sj0);
IkReal x796=(pp*pz);
IkReal x797=((0.0254095720202485)*sj3);
IkReal x798=((0.92038656235619)*pp);
IkReal x799=((36.2220411120167)*pp);
IkReal x800=((1.0)*sj3);
IkReal x801=(pz*sj3);
j1eval[0]=((((12.2222222222222)*x801))+(((-1.0)*x795*x800))+(((3.92556370551481)*pz))+((x794*x799))+(((-1.0)*x794*x800))+(((-5.4333061668025)*x796))+(((7.28153581454315)*x795))+(((7.28153581454315)*x794))+((x795*x799)));
j1eval[1]=IKsign(((((-1.0)*x794*x797))+(((-1.0)*x795*x797))+(((-0.138057984353428)*x796))+(((0.185020708697653)*x795))+(((0.185020708697653)*x794))+(((0.099746893695352)*pz))+((x794*x798))+(((0.310561435803037)*x801))+((x795*x798))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x802=cj0*cj0;
IkReal x803=py*py;
IkReal x804=((((-1.0)*x802*x803))+((x802*(px*px)))+(pz*pz)+x803+(((2.0)*cj0*px*py*sj0)));
j1eval[0]=x804;
j1eval[1]=IKsign(x804);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x805=cj0*cj0;
IkReal x806=py*py;
IkReal x807=(pz*sj3);
IkReal x808=(py*sj0);
IkReal x809=((0.3)*cj3);
IkReal x810=((0.045)*sj3);
IkReal x811=((0.045)*cj3);
IkReal x812=(cj0*px);
IkReal x813=((0.3)*sj3);
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(((((-1.0)*x808*x810))+(((-0.55)*x808))+(((0.045)*pz))+(((-1.0)*x809*x812))+(((-1.0)*pz*x811))+(((-1.0)*x810*x812))+(((-1.0)*x808*x809))+(((-0.55)*x812))+(((0.3)*x807)))),IkReal(((((-1.0)*x808*x811))+((x812*x813))+(((0.045)*x808))+(((0.045)*x807))+(((-1.0)*x811*x812))+((x808*x813))+((pz*x809))+(((0.045)*x812))+(((0.55)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
CheckValue<IkReal> x815=IKPowWithIntegerCheck(IKsign(((((-1.0)*x805*x806))+(pz*pz)+x806+(((2.0)*x808*x812))+((x805*(px*px))))),-1);
if(!x815.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x814.value)+(((1.5707963267949)*(x815.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x816=IKsin(j1);
IkReal x817=IKcos(j1);
IkReal x818=((0.045)*sj3);
IkReal x819=((0.3)*cj3);
IkReal x820=((0.045)*cj3);
IkReal x821=(py*sj0);
IkReal x822=(cj0*px);
IkReal x823=((1.0)*x822);
IkReal x824=(sj3*x817);
IkReal x825=((1.0)*x821);
IkReal x826=(pz*x816);
IkReal x827=(pz*x817);
IkReal x828=((0.09)*x817);
IkReal x829=((1.1)*x816);
evalcond[0]=((-0.55)+(((-1.0)*x816*x823))+(((-1.0)*x816*x825))+(((-1.0)*x819))+(((-1.0)*x818))+x827);
evalcond[1]=((0.045)+(((-1.0)*x820))+(((-1.0)*x817*x823))+(((-1.0)*x817*x825))+(((-1.0)*x826))+(((0.3)*sj3)));
evalcond[2]=((((-0.185020708697653)*x817))+pz+(((-0.92038656235619)*pp*x817))+(((0.138057984353428)*pp*x816))+(((-0.099746893695352)*x816))+(((0.0254095720202485)*x824))+(((-0.310561435803037)*sj3*x816)));
evalcond[3]=(((x816*x819))+((x816*x818))+(((-0.045)*x817))+((x817*x820))+(((0.55)*x816))+x822+x821+(((-0.3)*x824)));
evalcond[4]=((-0.2125)+(((0.09)*x826))+(((-1.0)*x822*x829))+((x821*x828))+(((-1.0)*pp))+(((-1.0)*x821*x829))+((x822*x828))+(((1.1)*x827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x830=cj3*cj3;
IkReal x831=(cj3*sj3);
IkReal x832=(cj0*px);
IkReal x833=((0.92038656235619)*pp);
IkReal x834=((0.0254095720202485)*sj3);
IkReal x835=(py*sj0);
IkReal x836=(pp*sj3);
IkReal x837=(cj3*pp);
CheckValue<IkReal> x838=IKPowWithIntegerCheck(IKsign(((((0.185020708697653)*x832))+(((0.185020708697653)*x835))+(((-1.0)*x832*x834))+(((-0.138057984353428)*pp*pz))+((x832*x833))+(((0.310561435803037)*pz*sj3))+((x833*x835))+(((-1.0)*x834*x835))+(((0.099746893695352)*pz)))),-1);
if(!x838.valid){
continue;
}
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((-0.0414173953060285)*x836))+(((0.00762287160607455)*x831))+(((-0.00114343074091118)*x830))+(pz*pz)+(((-0.276115968706857)*x837))+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3)))),IkReal(((0.0688360561435803)+(((0.0931684307409112)*x831))+(((0.175297399907961)*sj3))+(((-0.0414173953060285)*x837))+((pz*x832))+((pz*x835))+(((-0.00621260929590428)*x836))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))+(((-0.0139752646111367)*x830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x838.value)))+(x839.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x840=IKsin(j1);
IkReal x841=IKcos(j1);
IkReal x842=((0.045)*sj3);
IkReal x843=((0.3)*cj3);
IkReal x844=((0.045)*cj3);
IkReal x845=(py*sj0);
IkReal x846=(cj0*px);
IkReal x847=((1.0)*x846);
IkReal x848=(sj3*x841);
IkReal x849=((1.0)*x845);
IkReal x850=(pz*x840);
IkReal x851=(pz*x841);
IkReal x852=((0.09)*x841);
IkReal x853=((1.1)*x840);
evalcond[0]=((-0.55)+(((-1.0)*x840*x847))+(((-1.0)*x840*x849))+(((-1.0)*x842))+(((-1.0)*x843))+x851);
evalcond[1]=((0.045)+(((-1.0)*x841*x847))+(((-1.0)*x841*x849))+(((-1.0)*x850))+(((-1.0)*x844))+(((0.3)*sj3)));
evalcond[2]=((((-0.099746893695352)*x840))+(((-0.185020708697653)*x841))+(((0.0254095720202485)*x848))+(((0.138057984353428)*pp*x840))+pz+(((-0.92038656235619)*pp*x841))+(((-0.310561435803037)*sj3*x840)));
evalcond[3]=(((x840*x843))+((x840*x842))+(((-0.3)*x848))+(((-0.045)*x841))+(((0.55)*x840))+x845+x846+((x841*x844)));
evalcond[4]=((-0.2125)+(((-1.0)*x846*x853))+((x845*x852))+(((-1.0)*x845*x853))+(((1.1)*x851))+(((-1.0)*pp))+(((0.09)*x850))+((x846*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x854=(pz*sj3);
IkReal x855=(cj0*px);
IkReal x856=((0.310561435803037)*sj3);
IkReal x857=((0.92038656235619)*pp);
IkReal x858=(py*sj0);
IkReal x859=((0.0254095720202485)*sj3);
IkReal x860=((0.138057984353428)*pp);
IkReal x861=((0.045)*pz);
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(((((-1.0)*x861))+((cj3*x861))+((x855*x857))+(((0.185020708697653)*x855))+(((0.185020708697653)*x858))+(((-1.0)*x858*x859))+(((-1.0)*x855*x859))+((x857*x858))+(((-0.3)*x854)))),IkReal(((((-0.55)*pz))+(((-0.045)*x854))+(((-0.3)*cj3*pz))+((x855*x860))+(((-0.099746893695352)*x858))+(((-0.099746893695352)*x855))+((x858*x860))+(((-1.0)*x856*x858))+(((-1.0)*x855*x856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign(((-0.198275)+(((0.092025)*(cj3*cj3)))+(((-0.0510176023930051)*cj3))+(((-0.282328578002761)*cj3*pp))+(((-0.5)*pp))+(((0.0215981362172112)*cj3*sj3))+(((-0.03825)*sj3)))),-1);
if(!x863.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x862.value)+(((1.5707963267949)*(x863.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x864=IKsin(j1);
IkReal x865=IKcos(j1);
IkReal x866=((0.045)*sj3);
IkReal x867=((0.3)*cj3);
IkReal x868=((0.045)*cj3);
IkReal x869=(py*sj0);
IkReal x870=(cj0*px);
IkReal x871=((1.0)*x870);
IkReal x872=(sj3*x865);
IkReal x873=((1.0)*x869);
IkReal x874=(pz*x864);
IkReal x875=(pz*x865);
IkReal x876=((0.09)*x865);
IkReal x877=((1.1)*x864);
evalcond[0]=((-0.55)+(((-1.0)*x866))+(((-1.0)*x867))+(((-1.0)*x864*x873))+(((-1.0)*x864*x871))+x875);
evalcond[1]=((0.045)+(((-1.0)*x868))+(((-1.0)*x874))+(((0.3)*sj3))+(((-1.0)*x865*x871))+(((-1.0)*x865*x873)));
evalcond[2]=((((0.0254095720202485)*x872))+(((-0.92038656235619)*pp*x865))+(((-0.185020708697653)*x865))+(((-0.099746893695352)*x864))+pz+(((0.138057984353428)*pp*x864))+(((-0.310561435803037)*sj3*x864)));
evalcond[3]=((((-0.3)*x872))+(((0.55)*x864))+x869+x870+((x865*x868))+((x864*x866))+((x864*x867))+(((-0.045)*x865)));
evalcond[4]=((-0.2125)+(((1.1)*x875))+((x870*x876))+(((-1.0)*x869*x877))+(((-1.0)*pp))+(((-1.0)*x870*x877))+((x869*x876))+(((0.09)*x874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x878=cj2*cj2;
IkReal x879=(px*sj0);
IkReal x880=(cj0*py);
IkReal x881=(cj2*cj3);
IkReal x882=((0.3)*sj3);
IkReal x883=(pz*sj2);
IkReal x884=((0.55)*cj2);
IkReal x885=((0.045)*cj2);
IkReal x886=(cj0*px*sj2);
IkReal x887=((0.045)*x878);
IkReal x888=(py*sj0*sj2);
CheckValue<IkReal> x889=IKPowWithIntegerCheck(IKsign(((((0.045)*x881*x888))+(((0.045)*x881*x886))+(((-0.3)*cj3*x883))+(((-1.0)*cj2*x882*x886))+(((-1.0)*cj2*x882*x888))+(((-0.55)*x883))+(((-0.045)*sj3*x883))+(((-1.0)*x885*x886))+(((-1.0)*x885*x888)))),-1);
if(!x889.valid){
continue;
}
CheckValue<IkReal> x890 = IKatan2WithCheck(IkReal((((x879*x884))+(((-0.3)*x880*x881))+(((-1.0)*sj3*x880*x885))+(((0.3)*x879*x881))+((sj3*x879*x885))+((py*sj0*x883))+(((-1.0)*x880*x884))+((cj0*px*x883)))),IkReal((((x878*x879*x882))+((x879*x887))+(((-1.0)*cj3*x879*x887))+(((-1.0)*x878*x880*x882))+(((-1.0)*pz*x883))+((cj3*x880*x887))+(((-1.0)*x880*x887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x890.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x889.value)))+(x890.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x891=IKsin(j1);
IkReal x892=IKcos(j1);
IkReal x893=((0.09)*px);
IkReal x894=(sj0*sj2);
IkReal x895=((1.0)*px);
IkReal x896=((0.045)*cj3);
IkReal x897=(cj0*sj2);
IkReal x898=(cj0*px);
IkReal x899=((1.0)*py);
IkReal x900=(py*sj0);
IkReal x901=((0.045)*sj3);
IkReal x902=((0.3)*cj3);
IkReal x903=((0.3)*sj3);
IkReal x904=(cj2*x892);
IkReal x905=((0.3)*x891);
IkReal x906=(cj0*x891);
IkReal x907=((0.045)*x891);
IkReal x908=(pz*x892);
IkReal x909=(pz*x891);
evalcond[0]=((-0.55)+(((-1.0)*x895*x906))+(((-1.0)*x902))+(((-1.0)*x901))+x908+(((-1.0)*sj0*x891*x899)));
evalcond[1]=((((-1.0)*x892*x895*x897))+(((-1.0)*cj2*sj0*x895))+(((-1.0)*sj2*x909))+(((-1.0)*x892*x894*x899))+((cj0*cj2*py)));
evalcond[2]=((0.045)+((py*x897))+((cj2*x909))+(((-1.0)*x896))+((x900*x904))+(((-1.0)*x894*x895))+((x898*x904))+x903);
evalcond[3]=(((cj2*x891*x903))+(((-1.0)*cj2*x891*x896))+((cj2*x907))+pz+(((-1.0)*x892*x902))+(((-1.0)*x892*x901))+(((-0.55)*x892)));
evalcond[4]=((((-1.0)*x896*x904))+((x903*x904))+((x891*x902))+((x891*x901))+(((0.045)*x904))+(((0.55)*x891))+x898+x900);
evalcond[5]=((-0.2125)+(((-0.09)*py*x897))+(((-0.09)*x900*x904))+(((-1.1)*x891*x900))+(((-1.0)*pp))+((x893*x894))+(((-1.0)*cj0*x893*x904))+(((-0.09)*cj2*x909))+(((-1.1)*x891*x898))+(((1.1)*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x910=cj0*cj0;
IkReal x911=px*px;
IkReal x912=py*py;
IkReal x913=(cj2*pz);
IkReal x914=(px*sj0);
IkReal x915=(cj0*py);
IkReal x916=(cj0*px);
IkReal x917=(py*sj0);
IkReal x918=((0.55)*sj2);
IkReal x919=(cj2*px*py);
IkReal x920=((0.3)*cj3*sj2);
IkReal x921=(sj2*x912);
IkReal x922=((0.045)*sj2*sj3);
IkReal x923=(cj0*cj2*sj0);
CheckValue<IkReal> x924=IKPowWithIntegerCheck(IKsign(((((-1.0)*x910*x921))+((sj2*x910*x911))+((sj2*(pz*pz)))+(((2.0)*sj2*x914*x915))+x921)),-1);
if(!x924.valid){
continue;
}
CheckValue<IkReal> x925 = IKatan2WithCheck(IkReal(((((-1.0)*x913*x914))+(((-1.0)*x916*x920))+(((-1.0)*x916*x922))+((x913*x915))+(((-1.0)*x917*x920))+(((-1.0)*x917*x922))+(((-1.0)*x916*x918))+(((-1.0)*x917*x918)))),IkReal((((pz*x918))+(((2.0)*x910*x919))+(((-1.0)*x911*x923))+((pz*x920))+((pz*x922))+(((-1.0)*x919))+((x912*x923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x925.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x924.value)))+(x925.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x926=IKsin(j1);
IkReal x927=IKcos(j1);
IkReal x928=((0.09)*px);
IkReal x929=(sj0*sj2);
IkReal x930=((1.0)*px);
IkReal x931=((0.045)*cj3);
IkReal x932=(cj0*sj2);
IkReal x933=(cj0*px);
IkReal x934=((1.0)*py);
IkReal x935=(py*sj0);
IkReal x936=((0.045)*sj3);
IkReal x937=((0.3)*cj3);
IkReal x938=((0.3)*sj3);
IkReal x939=(cj2*x927);
IkReal x940=((0.3)*x926);
IkReal x941=(cj0*x926);
IkReal x942=((0.045)*x926);
IkReal x943=(pz*x927);
IkReal x944=(pz*x926);
evalcond[0]=((-0.55)+x943+(((-1.0)*x930*x941))+(((-1.0)*sj0*x926*x934))+(((-1.0)*x936))+(((-1.0)*x937)));
evalcond[1]=((((-1.0)*cj2*sj0*x930))+(((-1.0)*x927*x929*x934))+(((-1.0)*sj2*x944))+((cj0*cj2*py))+(((-1.0)*x927*x930*x932)));
evalcond[2]=((0.045)+((x935*x939))+((cj2*x944))+((py*x932))+(((-1.0)*x929*x930))+x938+((x933*x939))+(((-1.0)*x931)));
evalcond[3]=((((-1.0)*cj2*x926*x931))+(((-0.55)*x927))+((cj2*x942))+(((-1.0)*x927*x936))+(((-1.0)*x927*x937))+pz+((cj2*x926*x938)));
evalcond[4]=((((-1.0)*x931*x939))+(((0.55)*x926))+((x938*x939))+((x926*x937))+((x926*x936))+x935+x933+(((0.045)*x939)));
evalcond[5]=((-0.2125)+(((-0.09)*x935*x939))+(((-0.09)*py*x932))+((x928*x929))+(((-1.1)*x926*x933))+(((-1.1)*x926*x935))+(((-1.0)*pp))+(((1.1)*x943))+(((-1.0)*cj0*x928*x939))+(((-0.09)*cj2*x944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x945=cj3*cj3;
IkReal x946=(cj2*sj3);
IkReal x947=(cj0*px);
IkReal x948=(py*sj0);
IkReal x949=((0.3)*cj3);
IkReal x950=(cj2*cj3);
IkReal x951=((0.045)*pz);
IkReal x952=((0.045)*sj3);
CheckValue<IkReal> x953 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.0495)*sj3))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.087975)*x945))+(((-0.33)*cj3)))),IkReal(((((0.01125)*x950))+(((-0.087975)*cj3*x946))+(((-0.167025)*x946))+(((0.027)*cj2*x945))+(((-0.03825)*cj2))+((pz*x948))+((pz*x947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
CheckValue<IkReal> x954=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*x951))+(((0.55)*x948))+(((0.55)*x947))+((x948*x949))+((x947*x949))+((x948*x952))+(((-0.3)*pz*x946))+((x947*x952))+((x950*x951)))),-1);
if(!x954.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x953.value)+(((1.5707963267949)*(x954.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x955=IKsin(j1);
IkReal x956=IKcos(j1);
IkReal x957=((0.09)*px);
IkReal x958=(sj0*sj2);
IkReal x959=((1.0)*px);
IkReal x960=((0.045)*cj3);
IkReal x961=(cj0*sj2);
IkReal x962=(cj0*px);
IkReal x963=((1.0)*py);
IkReal x964=(py*sj0);
IkReal x965=((0.045)*sj3);
IkReal x966=((0.3)*cj3);
IkReal x967=((0.3)*sj3);
IkReal x968=(cj2*x956);
IkReal x969=((0.3)*x955);
IkReal x970=(cj0*x955);
IkReal x971=((0.045)*x955);
IkReal x972=(pz*x956);
IkReal x973=(pz*x955);
evalcond[0]=((-0.55)+(((-1.0)*sj0*x955*x963))+(((-1.0)*x959*x970))+x972+(((-1.0)*x965))+(((-1.0)*x966)));
evalcond[1]=((((-1.0)*x956*x958*x963))+(((-1.0)*x956*x959*x961))+((cj0*cj2*py))+(((-1.0)*sj2*x973))+(((-1.0)*cj2*sj0*x959)));
evalcond[2]=((0.045)+((x962*x968))+((py*x961))+((x964*x968))+(((-1.0)*x958*x959))+((cj2*x973))+x967+(((-1.0)*x960)));
evalcond[3]=((((-0.55)*x956))+(((-1.0)*cj2*x955*x960))+(((-1.0)*x956*x965))+(((-1.0)*x956*x966))+pz+((cj2*x955*x967))+((cj2*x971)));
evalcond[4]=((((-1.0)*x960*x968))+(((0.55)*x955))+(((0.045)*x968))+((x967*x968))+x962+x964+((x955*x966))+((x955*x965)));
evalcond[5]=((-0.2125)+(((-0.09)*py*x961))+(((-1.0)*cj0*x957*x968))+(((-0.09)*x964*x968))+(((-1.1)*x955*x962))+(((-1.1)*x955*x964))+(((-1.0)*pp))+((x957*x958))+(((-0.09)*cj2*x973))+(((1.1)*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x974=((0.045)*cj2);
IkReal x975=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
IkReal x976=((((0.3)*cj2*sj3))+(((-1.0)*cj3*x974))+x974);
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal(x975),IkReal(x976),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
IkReal x977=((1.0)*(x979.value));
if((((x975*x975)+(x976*x976))) < -0.00001)
continue;
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKabs(IKsqrt(((x975*x975)+(x976*x976)))),-1);
if(!x980.valid){
continue;
}
if( ((pz*(x980.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x980.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x978=IKasin((pz*(x980.value)));
j1array[0]=((((-1.0)*x978))+(((-1.0)*x977)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x978+(((-1.0)*x977)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x981=(((pp*sj1))+(((-1.0)*sj1*(pz*pz))));
j0eval[0]=x981;
j0eval[1]=IKsign(x981);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x982=(cj2*sj1);
IkReal x983=(((pp*x982))+(((-1.0)*x982*(pz*pz))));
j0eval[0]=x983;
j0eval[1]=IKsign(x983);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x984=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x984;
j0eval[1]=IKsign(x984);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x985=pz*pz;
IkReal x986=(cj1*pp);
IkReal x987=((1.1)*pz);
IkReal x988=((0.2125)*cj1);
IkReal x989=(cj1*x985);
IkReal x990=((0.09)*pz*sj1);
j0eval[0]=((((-1.0)*x986))+x989);
j0eval[1]=((IKabs(((((-1.0)*px*x988))+((py*x990))+(((-1.0)*px*x986))+((px*x987)))))+(IKabs(((((-1.0)*py*x987))+((px*x990))+((py*x986))+((py*x988))))));
j0eval[2]=IKsign(((((-0.09)*x986))+(((0.09)*x989))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x991=((0.045)*cj1);
IkReal x992=((1.0)*pz*sj1);
IkReal x993=((0.3)*cj1*sj3);
IkReal x994=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x994;
j0eval[1]=IKsign(x994);
j0eval[2]=((IKabs((((cj3*py*x991))+(((-1.0)*px*x992))+(((-1.0)*py*x991))+(((-1.0)*py*x993)))))+(IKabs(((((-1.0)*py*x992))+((px*x991))+((px*x993))+(((-1.0)*cj3*px*x991))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x995=((0.3)*py);
IkReal x996=(cj3*sj1);
IkReal x997=(px*sj1);
IkReal x998=((0.3)*px);
IkReal x999=((0.045)*py);
IkReal x1000=((0.045)*px);
IkReal x1001=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1001;
j0eval[1]=((IKabs(((((-0.045)*sj3*x997))+(((-1.0)*x996*x998))+(((-1.0)*sj3*x995))+(((-1.0)*x999))+((cj3*x999))+(((-0.55)*x997)))))+(IKabs((x1000+(((-1.0)*x995*x996))+(((-0.55)*py*sj1))+(((-1.0)*sj1*sj3*x999))+((sj3*x998))+(((-1.0)*cj3*x1000))))));
j0eval[2]=IKsign(x1001);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1002=pz*pz;
IkReal x1003=sj3*sj3;
IkReal x1004=cj3*cj3;
IkReal x1005=((4.26078431372549)*cj3);
IkReal x1006=((((-1.0)*x1002))+pp);
IkReal x1007=((1.20294117647059)*x1004);
IkReal x1008=((1.0)*x1002);
IkReal x1009=((1.20294117647059)*x1003);
j0eval[0]=x1006;
j0eval[1]=(((pp*sj3))+((pp*x1007))+((pp*x1005))+((pp*x1009))+(((-1.0)*sj3*x1008))+(((-1.0)*x1002*x1007))+(((-1.0)*x1002*x1005))+(((-1.0)*x1002*x1009))+(((3.98071895424837)*pp))+(((-3.98071895424837)*x1002)));
j0eval[2]=IKsign(x1006);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1010=pz*pz;
IkReal x1011=(cj3*py);
IkReal x1012=(cj3*px);
IkReal x1013=(py*sj3);
IkReal x1014=(px*sj3);
j0eval[0]=(x1010+(((-1.0)*pp)));
j0eval[1]=IKsign(((((1.1)*x1010))+(((-1.1)*pp))));
j0eval[2]=((IKabs(((((0.0495)*x1012))+(((-0.027)*x1013))+(((-0.0495)*px))+(((0.00405)*x1011))+(((-0.33)*x1014))+(((0.20845)*py))+((pp*py)))))+(IKabs(((((0.0495)*py))+(((-0.027)*x1014))+(((-0.0495)*x1011))+(((0.00405)*x1012))+(((0.33)*x1013))+(((0.20845)*px))+((pp*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1015=pz*pz;
IkReal x1016=((0.33)*cj3);
IkReal x1017=((1.0)*pp);
IkReal x1018=((0.027)*cj3);
IkReal x1019=((0.00405)*sj3);
IkReal x1020=((0.0495)*sj3);
j0eval[0]=(x1015+(((-1.0)*x1017)));
j0eval[1]=((IKabs(((((0.0495)*px))+(((-1.0)*py*x1020))+(((-1.0)*py*x1016))+(((-0.3925)*py))+((pp*py))+((px*x1019))+((px*x1018)))))+(IKabs(((((-1.0)*px*x1017))+(((0.0495)*py))+((px*x1020))+((py*x1018))+((py*x1019))+(((0.3925)*px))+((px*x1016))))));
j0eval[2]=IKsign(((((-0.09)*pp))+(((0.09)*x1015))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1021=((0.33)*cj3);
IkReal x1022=((0.027)*cj3);
IkReal x1023=((0.00405)*sj3);
IkReal x1024=((0.0495)*sj3);
CheckValue<IkReal> x1025 = IKatan2WithCheck(IkReal((((py*x1022))+((py*x1023))+(((-1.0)*pp*px))+(((0.0495)*py))+((px*x1024))+((px*x1021))+(((0.3925)*px)))),IkReal(((((0.0495)*px))+(((-1.0)*py*x1024))+(((-1.0)*py*x1021))+((px*x1022))+((px*x1023))+(((-0.3925)*py))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1025.valid){
continue;
}
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1026.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1025.value)+(((1.5707963267949)*(x1026.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1027=IKcos(j0);
IkReal x1028=IKsin(j0);
IkReal x1029=((1.0)*px);
IkReal x1030=(py*x1028);
IkReal x1031=(py*x1027);
evalcond[0]=((0.045)+(((-1.0)*x1028*x1029))+x1031+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1030))+(((-0.3)*cj3))+(((-1.0)*x1027*x1029)));
evalcond[2]=((-0.2125)+(((0.09)*px*x1028))+(((-1.1)*x1030))+(((-1.1)*px*x1027))+(((-1.0)*pp))+(((-0.09)*x1031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1032=(cj3*py);
IkReal x1033=(cj3*px);
IkReal x1034=(py*sj3);
IkReal x1035=(px*sj3);
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x1036.valid){
continue;
}
CheckValue<IkReal> x1037 = IKatan2WithCheck(IkReal(((((-0.027)*x1034))+(((0.0495)*x1033))+(((-0.33)*x1035))+(((-0.0495)*px))+(((0.00405)*x1032))+(((0.20845)*py))+((pp*py)))),IkReal(((((-0.027)*x1035))+(((0.0495)*py))+(((-0.0495)*x1032))+(((0.33)*x1034))+(((0.00405)*x1033))+(((0.20845)*px))+((pp*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1037.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1036.value)))+(x1037.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1038=IKcos(j0);
IkReal x1039=IKsin(j0);
IkReal x1040=((1.0)*px);
IkReal x1041=(py*x1039);
IkReal x1042=(py*x1038);
evalcond[0]=((0.045)+x1042+(((-1.0)*x1039*x1040))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1038*x1040))+(((-0.3)*cj3))+(((-1.0)*x1041)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1038))+(((-1.0)*pp))+(((-1.1)*x1041))+(((-0.09)*x1042))+(((0.09)*px*x1039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1043=((0.3)*py);
IkReal x1044=((0.045)*px);
IkReal x1045=((0.045)*py);
IkReal x1046=((0.3)*px);
CheckValue<IkReal> x1047 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((-1.0)*cj3*x1043))+(((-1.0)*cj3*x1044))+x1044+((sj3*x1046))+(((-1.0)*sj3*x1045)))),IkReal(((((-0.55)*px))+(((-1.0)*cj3*x1046))+((cj3*x1045))+(((-1.0)*sj3*x1043))+(((-1.0)*sj3*x1044))+(((-1.0)*x1045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1047.valid){
continue;
}
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1048.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1047.value)+(((1.5707963267949)*(x1048.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1049=IKcos(j0);
IkReal x1050=IKsin(j0);
IkReal x1051=((1.0)*px);
IkReal x1052=(py*x1050);
IkReal x1053=(py*x1049);
evalcond[0]=((0.045)+x1053+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*x1050*x1051)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*x1052))+(((-1.0)*x1049*x1051)));
evalcond[2]=((-0.2125)+(((0.09)*px*x1050))+(((-1.0)*pp))+(((-1.1)*px*x1049))+(((-1.1)*x1052))+(((-0.09)*x1053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1054=pz*pz;
IkReal x1055=sj3*sj3;
IkReal x1056=cj3*cj3;
IkReal x1057=((4.26078431372549)*cj3);
IkReal x1058=(pp+(((-1.0)*x1054)));
IkReal x1059=((1.20294117647059)*x1056);
IkReal x1060=((1.0)*x1054);
IkReal x1061=((1.20294117647059)*x1055);
j0eval[0]=x1058;
j0eval[1]=((((-3.98071895424837)*x1054))+(((-1.0)*sj3*x1060))+((pp*sj3))+(((-1.0)*x1054*x1057))+(((-1.0)*x1054*x1059))+((pp*x1057))+((pp*x1059))+(((3.98071895424837)*pp))+(((-1.0)*x1054*x1061))+((pp*x1061)));
j0eval[2]=IKsign(x1058);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1062=pz*pz;
IkReal x1063=(cj3*py);
IkReal x1064=(cj3*px);
IkReal x1065=(py*sj3);
IkReal x1066=(px*sj3);
j0eval[0]=(pp+(((-1.0)*x1062)));
j0eval[1]=((IKabs(((((-0.027)*x1066))+(((-0.0495)*py))+(((-0.33)*x1065))+(((0.0495)*x1063))+(((0.00405)*x1064))+(((0.20845)*px))+((pp*px)))))+(IKabs(((((0.0495)*px))+(((-0.027)*x1065))+(((-0.0495)*x1064))+(((0.33)*x1066))+(((0.00405)*x1063))+(((0.20845)*py))+((pp*py))))));
j0eval[2]=IKsign(((((-1.1)*x1062))+(((1.1)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1067=pz*pz;
IkReal x1068=((0.33)*cj3);
IkReal x1069=((1.0)*pp);
IkReal x1070=((0.027)*cj3);
IkReal x1071=((0.00405)*sj3);
IkReal x1072=((0.0495)*sj3);
j0eval[0]=(x1067+(((-1.0)*x1069)));
j0eval[1]=((IKabs(((((-1.0)*px*x1071))+(((-1.0)*px*x1070))+(((-1.0)*py*x1068))+(((-1.0)*py*x1072))+(((-0.0495)*px))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((-1.0)*px*x1069))+((px*x1072))+((px*x1068))+(((-1.0)*py*x1070))+(((-1.0)*py*x1071))+(((-0.0495)*py))+(((0.3925)*px))))));
j0eval[2]=IKsign(((((0.09)*x1067))+(((-0.09)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1073=((0.00405)*sj3);
IkReal x1074=((0.33)*cj3);
IkReal x1075=((0.027)*cj3);
IkReal x1076=((0.0495)*sj3);
CheckValue<IkReal> x1077=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1077.valid){
continue;
}
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+((px*x1074))+((px*x1076))+(((-1.0)*py*x1073))+(((-1.0)*py*x1075))+(((-0.0495)*py))+(((0.3925)*px)))),IkReal(((((-1.0)*px*x1075))+(((-1.0)*px*x1073))+(((-1.0)*py*x1074))+(((-1.0)*py*x1076))+(((-0.0495)*px))+(((-0.3925)*py))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1077.value)))+(x1078.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1079=IKcos(j0);
IkReal x1080=IKsin(j0);
IkReal x1081=(px*x1079);
IkReal x1082=(py*x1079);
IkReal x1083=(py*x1080);
IkReal x1084=(px*x1080);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1083+x1081+(((-0.3)*cj3)));
evalcond[1]=((0.045)+x1082+(((-1.0)*x1084))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1082))+(((-1.0)*pp))+(((1.1)*x1081))+(((1.1)*x1083))+(((0.09)*x1084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1085=(cj3*py);
IkReal x1086=(cj3*px);
IkReal x1087=(py*sj3);
IkReal x1088=(px*sj3);
CheckValue<IkReal> x1089 = IKatan2WithCheck(IkReal(((((0.0495)*px))+(((0.33)*x1088))+(((-0.027)*x1087))+(((0.00405)*x1085))+(((-0.0495)*x1086))+(((0.20845)*py))+((pp*py)))),IkReal(((((-0.33)*x1087))+(((-0.0495)*py))+(((0.0495)*x1085))+(((-0.027)*x1088))+(((0.00405)*x1086))+(((0.20845)*px))+((pp*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1089.valid){
continue;
}
CheckValue<IkReal> x1090=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x1090.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1089.value)+(((1.5707963267949)*(x1090.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1091=IKcos(j0);
IkReal x1092=IKsin(j0);
IkReal x1093=(px*x1091);
IkReal x1094=(py*x1091);
IkReal x1095=(py*x1092);
IkReal x1096=(px*x1092);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1095+x1093+(((-0.3)*cj3)));
evalcond[1]=((0.045)+x1094+(((-1.0)*x1096))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1094))+(((-1.0)*pp))+(((0.09)*x1096))+(((1.1)*x1093))+(((1.1)*x1095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1097=((0.3)*py);
IkReal x1098=((0.045)*px);
IkReal x1099=((0.045)*py);
IkReal x1100=((0.3)*px);
CheckValue<IkReal> x1101 = IKatan2WithCheck(IkReal((((sj3*x1100))+x1098+(((-1.0)*cj3*x1098))+((sj3*x1099))+(((0.55)*py))+((cj3*x1097)))),IkReal(((((-1.0)*x1099))+(((-1.0)*sj3*x1097))+((cj3*x1100))+((sj3*x1098))+(((0.55)*px))+((cj3*x1099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1101.valid){
continue;
}
CheckValue<IkReal> x1102=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1102.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1101.value)+(((1.5707963267949)*(x1102.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1103=IKcos(j0);
IkReal x1104=IKsin(j0);
IkReal x1105=(px*x1103);
IkReal x1106=(py*x1103);
IkReal x1107=(py*x1104);
IkReal x1108=(px*x1104);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1107+x1105+(((-0.3)*cj3)));
evalcond[1]=((0.045)+x1106+(((-1.0)*x1108))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1108))+(((-1.0)*pp))+(((1.1)*x1107))+(((1.1)*x1105))+(((-0.09)*x1106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1109=((0.3)*py);
IkReal x1110=(cj3*sj1);
IkReal x1111=((0.55)*sj1);
IkReal x1112=((0.3)*px);
IkReal x1113=((0.045)*py);
IkReal x1114=(sj1*sj3);
IkReal x1115=((0.045)*px);
CheckValue<IkReal> x1116=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1116.valid){
continue;
}
CheckValue<IkReal> x1117 = IKatan2WithCheck(IkReal((x1115+((sj3*x1112))+(((-1.0)*x1109*x1110))+(((-1.0)*x1113*x1114))+(((-1.0)*py*x1111))+(((-1.0)*cj3*x1115)))),IkReal(((((-1.0)*x1114*x1115))+(((-1.0)*px*x1111))+(((-1.0)*sj3*x1109))+(((-1.0)*x1110*x1112))+(((-1.0)*x1113))+((cj3*x1113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1117.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1116.value)))+(x1117.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1118=IKcos(j0);
IkReal x1119=IKsin(j0);
IkReal x1120=((1.1)*sj1);
IkReal x1121=((0.3)*cj3);
IkReal x1122=((1.0)*cj1);
IkReal x1123=((1.0)*px);
IkReal x1124=((1.0)*sj1);
IkReal x1125=((0.045)*sj3);
IkReal x1126=(cj1*pz);
IkReal x1127=(py*x1119);
IkReal x1128=(px*x1118);
IkReal x1129=(py*x1118);
evalcond[0]=((0.045)+x1129+(((-0.045)*cj3))+(((-1.0)*x1119*x1123))+(((0.3)*sj3)));
evalcond[1]=((((-1.0)*x1122*x1127))+(((-1.0)*x1122*x1128))+(((-1.0)*pz*x1124)));
evalcond[2]=(x1128+x1127+((sj1*x1125))+((sj1*x1121))+(((0.55)*sj1)));
evalcond[3]=((-0.55)+x1126+(((-1.0)*sj1*x1118*x1123))+(((-1.0)*x1125))+(((-1.0)*x1121))+(((-1.0)*x1124*x1127)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x1120*x1127))+(((-1.0)*x1120*x1128))+(((1.1)*x1126))+(((-0.09)*x1129))+(((0.09)*px*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1130=((0.045)*cj1);
IkReal x1131=((1.0)*pz*sj1);
IkReal x1132=((0.3)*cj1*sj3);
CheckValue<IkReal> x1133=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x1133.valid){
continue;
}
CheckValue<IkReal> x1134 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1131))+((px*x1130))+((px*x1132))+(((-1.0)*cj3*px*x1130)))),IkReal((((cj3*py*x1130))+(((-1.0)*py*x1130))+(((-1.0)*py*x1132))+(((-1.0)*px*x1131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1134.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1133.value)))+(x1134.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1135=IKcos(j0);
IkReal x1136=IKsin(j0);
IkReal x1137=((1.1)*sj1);
IkReal x1138=((0.3)*cj3);
IkReal x1139=((1.0)*cj1);
IkReal x1140=((1.0)*px);
IkReal x1141=((1.0)*sj1);
IkReal x1142=((0.045)*sj3);
IkReal x1143=(cj1*pz);
IkReal x1144=(py*x1136);
IkReal x1145=(px*x1135);
IkReal x1146=(py*x1135);
evalcond[0]=((0.045)+(((-1.0)*x1136*x1140))+x1146+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((((-1.0)*x1139*x1145))+(((-1.0)*x1139*x1144))+(((-1.0)*pz*x1141)));
evalcond[2]=(x1144+x1145+((sj1*x1138))+((sj1*x1142))+(((0.55)*sj1)));
evalcond[3]=((-0.55)+x1143+(((-1.0)*x1141*x1144))+(((-1.0)*x1142))+(((-1.0)*sj1*x1135*x1140))+(((-1.0)*x1138)));
evalcond[4]=((-0.2125)+(((-1.0)*x1137*x1145))+(((-1.0)*x1137*x1144))+(((1.1)*x1143))+(((-0.09)*x1146))+(((-1.0)*pp))+(((0.09)*px*x1136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1147=((1.1)*pz);
IkReal x1148=((0.2125)*cj1);
IkReal x1149=((0.09)*cj1);
IkReal x1150=(cj1*pp);
IkReal x1151=((0.09)*pz*sj1);
CheckValue<IkReal> x1152 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1148))+(((-1.0)*px*x1150))+((px*x1147))+((py*x1151)))),IkReal((((py*x1148))+(((-1.0)*py*x1147))+((px*x1151))+((py*x1150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1152.valid){
continue;
}
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(IKsign((((x1149*(pz*pz)))+(((-1.0)*pp*x1149)))),-1);
if(!x1153.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1152.value)+(((1.5707963267949)*(x1153.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1154=IKcos(j0);
IkReal x1155=IKsin(j0);
IkReal x1156=((1.1)*sj1);
IkReal x1157=((0.3)*cj3);
IkReal x1158=((1.0)*cj1);
IkReal x1159=((1.0)*px);
IkReal x1160=((1.0)*sj1);
IkReal x1161=((0.045)*sj3);
IkReal x1162=(cj1*pz);
IkReal x1163=(py*x1155);
IkReal x1164=(px*x1154);
IkReal x1165=(py*x1154);
evalcond[0]=((0.045)+x1165+(((-1.0)*x1155*x1159))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((((-1.0)*x1158*x1164))+(((-1.0)*x1158*x1163))+(((-1.0)*pz*x1160)));
evalcond[2]=(x1164+x1163+((sj1*x1161))+((sj1*x1157))+(((0.55)*sj1)));
evalcond[3]=((-0.55)+x1162+(((-1.0)*x1157))+(((-1.0)*sj1*x1154*x1159))+(((-1.0)*x1160*x1163))+(((-1.0)*x1161)));
evalcond[4]=((-0.2125)+(((-1.0)*x1156*x1164))+(((-1.0)*x1156*x1163))+(((0.09)*px*x1155))+(((-1.0)*pp))+(((1.1)*x1162))+(((-0.09)*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1166=pz*pz;
IkReal x1167=((1.1)*pz);
IkReal x1168=(cj1*pp);
IkReal x1169=((0.2125)*cj1);
IkReal x1170=(cj1*x1166);
IkReal x1171=((0.09)*pz*sj1);
j0eval[0]=(x1168+(((-1.0)*x1170)));
j0eval[1]=((IKabs(((((-1.0)*py*x1167))+(((-1.0)*px*x1171))+((py*x1168))+((py*x1169)))))+(IKabs(((((-1.0)*px*x1168))+((px*x1167))+(((-1.0)*py*x1171))+(((-1.0)*px*x1169))))));
j0eval[2]=IKsign(((((0.09)*x1168))+(((-0.09)*x1170))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1172=((0.045)*cj1);
IkReal x1173=((1.0)*pz*sj1);
IkReal x1174=((0.3)*cj1*sj3);
IkReal x1175=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x1175;
j0eval[1]=((IKabs(((((-1.0)*px*x1173))+((py*x1174))+((py*x1172))+(((-1.0)*cj3*py*x1172)))))+(IKabs(((((-1.0)*py*x1173))+(((-1.0)*px*x1174))+(((-1.0)*px*x1172))+((cj3*px*x1172))))));
j0eval[2]=IKsign(x1175);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1176=((0.3)*py);
IkReal x1177=(cj3*sj1);
IkReal x1178=((0.55)*sj1);
IkReal x1179=((0.3)*px);
IkReal x1180=((0.045)*py);
IkReal x1181=(sj1*sj3);
IkReal x1182=((0.045)*px);
IkReal x1183=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1183;
j0eval[1]=((IKabs(((((-1.0)*sj3*x1179))+(((-1.0)*py*x1178))+(((-1.0)*x1182))+(((-1.0)*x1180*x1181))+(((-1.0)*x1176*x1177))+((cj3*x1182)))))+(IKabs(((((-1.0)*x1181*x1182))+x1180+((sj3*x1176))+(((-1.0)*cj3*x1180))+(((-1.0)*px*x1178))+(((-1.0)*x1177*x1179))))));
j0eval[2]=IKsign(x1183);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1184=pz*pz;
IkReal x1185=sj3*sj3;
IkReal x1186=cj3*cj3;
IkReal x1187=((4.26078431372549)*cj3);
IkReal x1188=(pp+(((-1.0)*x1184)));
IkReal x1189=((1.20294117647059)*x1186);
IkReal x1190=((1.0)*x1184);
IkReal x1191=((1.20294117647059)*x1185);
j0eval[0]=x1188;
j0eval[1]=((((-1.0)*sj3*x1190))+((pp*x1187))+((pp*x1189))+(((-3.98071895424837)*x1184))+((pp*x1191))+((pp*sj3))+(((-1.0)*x1184*x1191))+(((-1.0)*x1184*x1189))+(((-1.0)*x1184*x1187))+(((3.98071895424837)*pp)));
j0eval[2]=IKsign(x1188);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1192=pz*pz;
IkReal x1193=(cj3*py);
IkReal x1194=(cj3*px);
IkReal x1195=(py*sj3);
IkReal x1196=(px*sj3);
j0eval[0]=(x1192+(((-1.0)*pp)));
j0eval[1]=IKsign(((((-1.1)*pp))+(((1.1)*x1192))));
j0eval[2]=((IKabs(((((-0.33)*x1195))+(((0.0495)*x1193))+(((0.00405)*x1194))+(((-0.027)*x1196))+(((-0.0495)*py))+(((0.20845)*px))+((pp*px)))))+(IKabs(((((0.33)*x1196))+(((0.00405)*x1193))+(((0.0495)*px))+(((-0.027)*x1195))+(((-0.0495)*x1194))+(((0.20845)*py))+((pp*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1197=pz*pz;
IkReal x1198=((0.00405)*sj3);
IkReal x1199=((0.33)*cj3);
IkReal x1200=((0.027)*cj3);
IkReal x1201=((0.0495)*sj3);
j0eval[0]=(pp+(((-1.0)*x1197)));
j0eval[1]=IKsign(((((0.09)*pp))+(((-0.09)*x1197))));
j0eval[2]=((IKabs(((((-1.0)*pp*px))+((px*x1201))+(((-1.0)*py*x1198))+(((-0.0495)*py))+((px*x1199))+(((0.3925)*px))+(((-1.0)*py*x1200)))))+(IKabs(((((-1.0)*py*x1199))+(((-0.0495)*px))+(((-1.0)*px*x1200))+(((-1.0)*px*x1198))+(((-1.0)*py*x1201))+(((-0.3925)*py))+((pp*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1202=((0.00405)*sj3);
IkReal x1203=((0.33)*cj3);
IkReal x1204=((0.027)*cj3);
IkReal x1205=((0.0495)*sj3);
CheckValue<IkReal> x1206=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x1206.valid){
continue;
}
CheckValue<IkReal> x1207 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+((px*x1205))+((px*x1203))+(((-0.0495)*py))+(((0.3925)*px))+(((-1.0)*py*x1202))+(((-1.0)*py*x1204)))),IkReal(((((-0.0495)*px))+(((-1.0)*px*x1202))+(((-1.0)*px*x1204))+(((-1.0)*py*x1203))+(((-1.0)*py*x1205))+(((-0.3925)*py))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1207.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1206.value)))+(x1207.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1208=IKcos(j0);
IkReal x1209=IKsin(j0);
IkReal x1210=((1.0)*px);
IkReal x1211=(py*x1209);
IkReal x1212=(py*x1208);
evalcond[0]=((-0.045)+x1212+(((-1.0)*x1209*x1210))+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1208*x1210))+(((-0.3)*cj3))+(((-1.0)*x1211)));
evalcond[2]=((-0.2125)+(((0.09)*x1212))+(((-1.1)*px*x1208))+(((-1.1)*x1211))+(((-1.0)*pp))+(((-0.09)*px*x1209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1213=(cj3*py);
IkReal x1214=(cj3*px);
IkReal x1215=(py*sj3);
IkReal x1216=(px*sj3);
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x1217.valid){
continue;
}
CheckValue<IkReal> x1218 = IKatan2WithCheck(IkReal(((((0.0495)*px))+(((0.33)*x1216))+(((-0.0495)*x1214))+(((-0.027)*x1215))+(((0.20845)*py))+(((0.00405)*x1213))+((pp*py)))),IkReal(((((0.0495)*x1213))+(((-0.0495)*py))+(((-0.33)*x1215))+(((-0.027)*x1216))+(((0.20845)*px))+(((0.00405)*x1214))+((pp*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1218.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1217.value)))+(x1218.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1219=IKcos(j0);
IkReal x1220=IKsin(j0);
IkReal x1221=((1.0)*px);
IkReal x1222=(py*x1220);
IkReal x1223=(py*x1219);
evalcond[0]=((-0.045)+x1223+(((0.045)*cj3))+(((-1.0)*x1220*x1221))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1222))+(((-0.3)*cj3))+(((-1.0)*x1219*x1221)));
evalcond[2]=((-0.2125)+(((-0.09)*px*x1220))+(((-1.1)*px*x1219))+(((-1.0)*pp))+(((-1.1)*x1222))+(((0.09)*x1223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1224=((0.3)*py);
IkReal x1225=((0.045)*px);
IkReal x1226=((0.045)*py);
IkReal x1227=((0.3)*px);
CheckValue<IkReal> x1228 = IKatan2WithCheck(IkReal(((((-0.55)*py))+((cj3*x1225))+(((-1.0)*x1225))+(((-1.0)*sj3*x1226))+(((-1.0)*sj3*x1227))+(((-1.0)*cj3*x1224)))),IkReal(((((-0.55)*px))+x1226+((sj3*x1224))+(((-1.0)*sj3*x1225))+(((-1.0)*cj3*x1227))+(((-1.0)*cj3*x1226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1228.valid){
continue;
}
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1229.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1228.value)+(((1.5707963267949)*(x1229.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1230=IKcos(j0);
IkReal x1231=IKsin(j0);
IkReal x1232=((1.0)*px);
IkReal x1233=(py*x1231);
IkReal x1234=(py*x1230);
evalcond[0]=((-0.045)+x1234+(((0.045)*cj3))+(((-1.0)*x1231*x1232))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1233))+(((-0.3)*cj3))+(((-1.0)*x1230*x1232)));
evalcond[2]=((-0.2125)+(((-0.09)*px*x1231))+(((-1.0)*pp))+(((-1.1)*x1233))+(((0.09)*x1234))+(((-1.1)*px*x1230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1235=pz*pz;
IkReal x1236=sj3*sj3;
IkReal x1237=cj3*cj3;
IkReal x1238=((4.26078431372549)*cj3);
IkReal x1239=((((-1.0)*x1235))+pp);
IkReal x1240=((1.20294117647059)*x1237);
IkReal x1241=((1.0)*x1235);
IkReal x1242=((1.20294117647059)*x1236);
j0eval[0]=x1239;
j0eval[1]=((((-1.0)*sj3*x1241))+(((-3.98071895424837)*x1235))+((pp*sj3))+((pp*x1240))+((pp*x1242))+(((-1.0)*x1235*x1240))+(((-1.0)*x1235*x1242))+(((-1.0)*x1235*x1238))+((pp*x1238))+(((3.98071895424837)*pp)));
j0eval[2]=IKsign(x1239);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1243=pz*pz;
IkReal x1244=(cj3*py);
IkReal x1245=(cj3*px);
IkReal x1246=(py*sj3);
IkReal x1247=(px*sj3);
j0eval[0]=((((-1.0)*x1243))+pp);
j0eval[1]=((IKabs(((((-0.33)*x1247))+(((0.0495)*x1245))+(((-0.0495)*px))+(((0.00405)*x1244))+(((-0.027)*x1246))+(((0.20845)*py))+((pp*py)))))+(IKabs(((((0.0495)*py))+(((0.00405)*x1245))+(((-0.027)*x1247))+(((0.33)*x1246))+(((-0.0495)*x1244))+(((0.20845)*px))+((pp*px))))));
j0eval[2]=IKsign(((((-1.1)*x1243))+(((1.1)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1248=pz*pz;
IkReal x1249=((0.00405)*sj3);
IkReal x1250=((0.33)*cj3);
IkReal x1251=((0.027)*cj3);
IkReal x1252=((0.0495)*sj3);
j0eval[0]=((((-1.0)*x1248))+pp);
j0eval[1]=IKsign(((((0.09)*pp))+(((-0.09)*x1248))));
j0eval[2]=((IKabs(((((0.0495)*px))+((px*x1249))+(((-1.0)*py*x1250))+(((-1.0)*py*x1252))+((px*x1251))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((-1.0)*pp*px))+(((0.0495)*py))+((py*x1249))+(((0.3925)*px))+((px*x1250))+((px*x1252))+((py*x1251))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1253=((0.33)*cj3);
IkReal x1254=((0.027)*cj3);
IkReal x1255=((0.00405)*sj3);
IkReal x1256=((0.0495)*sj3);
CheckValue<IkReal> x1257=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+(((0.0495)*py))+(((0.3925)*px))+((px*x1256))+((px*x1253))+((py*x1255))+((py*x1254)))),IkReal(((((0.0495)*px))+(((-1.0)*py*x1256))+(((-1.0)*py*x1253))+((px*x1254))+((px*x1255))+(((-0.3925)*py))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1258.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1257.value)))+(x1258.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1259=IKcos(j0);
IkReal x1260=IKsin(j0);
IkReal x1261=(px*x1260);
IkReal x1262=(px*x1259);
IkReal x1263=(py*x1259);
IkReal x1264=(py*x1260);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1262+x1264+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1263+(((0.045)*cj3))+(((-1.0)*x1261))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1261))+(((-1.0)*pp))+(((0.09)*x1263))+(((1.1)*x1264))+(((1.1)*x1262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1265=(cj3*py);
IkReal x1266=(cj3*px);
IkReal x1267=(py*sj3);
IkReal x1268=(px*sj3);
CheckValue<IkReal> x1269 = IKatan2WithCheck(IkReal(((((-0.33)*x1268))+(((-0.0495)*px))+(((0.00405)*x1265))+(((0.20845)*py))+((pp*py))+(((0.0495)*x1266))+(((-0.027)*x1267)))),IkReal(((((0.33)*x1267))+(((0.0495)*py))+(((-0.0495)*x1265))+(((0.00405)*x1266))+(((0.20845)*px))+((pp*px))+(((-0.027)*x1268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1269.valid){
continue;
}
CheckValue<IkReal> x1270=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x1270.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1269.value)+(((1.5707963267949)*(x1270.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1271=IKcos(j0);
IkReal x1272=IKsin(j0);
IkReal x1273=(px*x1272);
IkReal x1274=(px*x1271);
IkReal x1275=(py*x1271);
IkReal x1276=(py*x1272);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1274+x1276+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1275+(((0.045)*cj3))+(((-1.0)*x1273))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1273))+(((0.09)*x1275))+(((-1.0)*pp))+(((1.1)*x1274))+(((1.1)*x1276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1277=((0.3)*py);
IkReal x1278=((0.045)*px);
IkReal x1279=((0.045)*py);
IkReal x1280=((0.3)*px);
CheckValue<IkReal> x1281 = IKatan2WithCheck(IkReal((((sj3*x1279))+(((-1.0)*x1278))+((cj3*x1278))+((cj3*x1277))+(((-1.0)*sj3*x1280))+(((0.55)*py)))),IkReal((((sj3*x1278))+((sj3*x1277))+x1279+(((-1.0)*cj3*x1279))+((cj3*x1280))+(((0.55)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1281.valid){
continue;
}
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1282.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1281.value)+(((1.5707963267949)*(x1282.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1283=IKcos(j0);
IkReal x1284=IKsin(j0);
IkReal x1285=(px*x1284);
IkReal x1286=(px*x1283);
IkReal x1287=(py*x1283);
IkReal x1288=(py*x1284);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1286+x1288+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+(((-1.0)*x1285))+x1287+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((1.1)*x1288))+(((1.1)*x1286))+(((-0.09)*x1285))+(((0.09)*x1287))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1289=((0.3)*py);
IkReal x1290=(cj3*sj1);
IkReal x1291=((0.55)*sj1);
IkReal x1292=((0.3)*px);
IkReal x1293=((0.045)*py);
IkReal x1294=(sj1*sj3);
IkReal x1295=((0.045)*px);
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1296.valid){
continue;
}
CheckValue<IkReal> x1297 = IKatan2WithCheck(IkReal(((((-1.0)*x1295))+((cj3*x1295))+(((-1.0)*sj3*x1292))+(((-1.0)*x1289*x1290))+(((-1.0)*py*x1291))+(((-1.0)*x1293*x1294)))),IkReal((x1293+(((-1.0)*x1290*x1292))+((sj3*x1289))+(((-1.0)*px*x1291))+(((-1.0)*x1294*x1295))+(((-1.0)*cj3*x1293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1297.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1296.value)))+(x1297.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1298=IKcos(j0);
IkReal x1299=IKsin(j0);
IkReal x1300=((1.1)*sj1);
IkReal x1301=((0.3)*cj3);
IkReal x1302=((0.045)*sj3);
IkReal x1303=((1.0)*sj1);
IkReal x1304=(cj1*pz);
IkReal x1305=(py*x1299);
IkReal x1306=(px*x1298);
IkReal x1307=(px*x1299);
IkReal x1308=(py*x1298);
evalcond[0]=(((cj1*x1305))+((cj1*x1306))+((pz*sj1)));
evalcond[1]=((-0.045)+x1308+(((0.045)*cj3))+(((-1.0)*x1307))+(((-0.3)*sj3)));
evalcond[2]=(x1305+x1306+(((0.55)*sj1))+((sj1*x1302))+((sj1*x1301)));
evalcond[3]=((-0.55)+x1304+(((-1.0)*x1302))+(((-1.0)*x1301))+(((-1.0)*x1303*x1306))+(((-1.0)*x1303*x1305)));
evalcond[4]=((-0.2125)+(((0.09)*x1308))+(((-1.0)*x1300*x1306))+(((-1.0)*x1300*x1305))+(((-1.0)*pp))+(((-0.09)*x1307))+(((1.1)*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1309=((0.045)*cj1);
IkReal x1310=((1.0)*pz*sj1);
IkReal x1311=((0.3)*cj1*sj3);
CheckValue<IkReal> x1312=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x1312.valid){
continue;
}
CheckValue<IkReal> x1313 = IKatan2WithCheck(IkReal((((cj3*px*x1309))+(((-1.0)*px*x1309))+(((-1.0)*py*x1310))+(((-1.0)*px*x1311)))),IkReal(((((-1.0)*cj3*py*x1309))+((py*x1311))+((py*x1309))+(((-1.0)*px*x1310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1313.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1312.value)))+(x1313.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1314=IKcos(j0);
IkReal x1315=IKsin(j0);
IkReal x1316=((1.1)*sj1);
IkReal x1317=((0.3)*cj3);
IkReal x1318=((0.045)*sj3);
IkReal x1319=((1.0)*sj1);
IkReal x1320=(cj1*pz);
IkReal x1321=(py*x1315);
IkReal x1322=(px*x1314);
IkReal x1323=(px*x1315);
IkReal x1324=(py*x1314);
evalcond[0]=(((cj1*x1321))+((cj1*x1322))+((pz*sj1)));
evalcond[1]=((-0.045)+x1324+(((0.045)*cj3))+(((-1.0)*x1323))+(((-0.3)*sj3)));
evalcond[2]=(x1322+x1321+(((0.55)*sj1))+((sj1*x1318))+((sj1*x1317)));
evalcond[3]=((-0.55)+x1320+(((-1.0)*x1319*x1321))+(((-1.0)*x1319*x1322))+(((-1.0)*x1317))+(((-1.0)*x1318)));
evalcond[4]=((-0.2125)+(((0.09)*x1324))+(((-1.0)*pp))+(((-0.09)*x1323))+(((1.1)*x1320))+(((-1.0)*x1316*x1321))+(((-1.0)*x1316*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1325=((1.1)*pz);
IkReal x1326=((0.09)*cj1);
IkReal x1327=((0.2125)*cj1);
IkReal x1328=(cj1*pp);
IkReal x1329=((0.09)*pz*sj1);
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(IKsign((((pp*x1326))+(((-1.0)*x1326*(pz*pz))))),-1);
if(!x1330.valid){
continue;
}
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1328))+((px*x1325))+(((-1.0)*py*x1329))+(((-1.0)*px*x1327)))),IkReal((((py*x1327))+((py*x1328))+(((-1.0)*py*x1325))+(((-1.0)*px*x1329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1330.value)))+(x1331.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1332=IKcos(j0);
IkReal x1333=IKsin(j0);
IkReal x1334=((1.1)*sj1);
IkReal x1335=((0.3)*cj3);
IkReal x1336=((0.045)*sj3);
IkReal x1337=((1.0)*sj1);
IkReal x1338=(cj1*pz);
IkReal x1339=(py*x1333);
IkReal x1340=(px*x1332);
IkReal x1341=(px*x1333);
IkReal x1342=(py*x1332);
evalcond[0]=(((cj1*x1340))+((cj1*x1339))+((pz*sj1)));
evalcond[1]=((-0.045)+x1342+(((0.045)*cj3))+(((-1.0)*x1341))+(((-0.3)*sj3)));
evalcond[2]=(x1340+x1339+((sj1*x1336))+((sj1*x1335))+(((0.55)*sj1)));
evalcond[3]=((-0.55)+x1338+(((-1.0)*x1337*x1339))+(((-1.0)*x1337*x1340))+(((-1.0)*x1336))+(((-1.0)*x1335)));
evalcond[4]=((-0.2125)+(((0.09)*x1342))+(((-1.0)*x1334*x1339))+(((-1.0)*pp))+(((1.1)*x1338))+(((-1.0)*x1334*x1340))+(((-0.09)*x1341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1343=((0.3)*sj3);
IkReal x1344=(px*sj2);
IkReal x1345=((0.045)*py);
IkReal x1346=(pp+(((-1.0)*(pz*pz))));
IkReal x1347=(cj3*x1345);
IkReal x1348=((0.045)*cj2*px);
j0eval[0]=x1346;
j0eval[1]=IKsign(x1346);
j0eval[2]=((IKabs(((((0.045)*x1344))+(((-1.0)*cj2*x1345))+(((-0.045)*cj3*x1344))+(((-1.0)*cj2*py*x1343))+((x1343*x1344))+((cj2*x1347)))))+(IKabs((((sj2*x1347))+(((-1.0)*x1348))+(((-1.0)*py*sj2*x1343))+(((-1.0)*sj2*x1345))+(((-1.0)*cj2*px*x1343))+((cj3*x1348))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1349=((((-1.0)*cj2*pp))+((cj2*(pz*pz))));
j0eval[0]=x1349;
j0eval[1]=IKsign(x1349);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1350=((((-1.0)*pp*sj2))+((sj2*(pz*pz))));
j0eval[0]=x1350;
j0eval[1]=IKsign(x1350);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1351=((20.0)*sj3);
IkReal x1352=((3.0)*px);
IkReal x1353=((3.0)*py);
IkReal x1354=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1354;
j0eval[1]=((IKabs((x1353+(((-1.0)*cj3*x1353))+((py*x1351)))))+(IKabs((x1352+(((-1.0)*cj3*x1352))+((px*x1351))))));
j0eval[2]=IKsign(x1354);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1355=pz*pz;
IkReal x1356=((80.0)*pp);
IkReal x1357=((88.0)*pz);
j0eval[0]=((((-1.0)*x1355))+pp);
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1355))));
j0eval[2]=((IKabs(((((-17.0)*py))+((py*x1357))+(((-1.0)*py*x1356)))))+(IKabs(((((-1.0)*px*x1356))+((px*x1357))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1359 = IKatan2WithCheck(IkReal(((-0.09)*px)),IkReal(((-0.09)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1359.valid){
continue;
}
IkReal x1358=x1359.value;
j0array[0]=((-1.0)*x1358);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1358)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1360=IKcos(j0);
IkReal x1361=IKsin(j0);
evalcond[0]=(((px*x1360))+((py*x1361)));
evalcond[1]=((((-1.0)*px*x1361))+((py*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
IkReal x1362=x1363.value;
j0array[0]=((-1.0)*x1362);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1362)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1364=IKcos(j0);
IkReal x1365=IKsin(j0);
evalcond[0]=((((-1.0)*px*x1365))+((py*x1364)));
evalcond[1]=((((-0.09)*px*x1364))+(((-0.09)*py*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1366=((110.0)*pz);
IkReal x1367=((100.0)*pp);
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal(((((-21.25)*py))+((py*x1366))+(((-1.0)*py*x1367)))),IkReal(((((-1.0)*px*x1367))+((px*x1366))+(((-21.25)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1369.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1368.value)+(((1.5707963267949)*(x1369.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1370=IKsin(j0);
IkReal x1371=IKcos(j0);
IkReal x1372=(px*x1371);
IkReal x1373=(py*x1370);
evalcond[0]=((((-1.0)*px*x1370))+((py*x1371)));
evalcond[1]=((0.045)+x1373+x1372+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1372))+(((-0.09)*x1373))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1374=((0.3)*sj3);
IkReal x1375=((0.045)*px);
IkReal x1376=((0.045)*py);
CheckValue<IkReal> x1377=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1377.valid){
continue;
}
CheckValue<IkReal> x1378 = IKatan2WithCheck(IkReal((x1376+(((-1.0)*cj3*x1376))+((py*x1374)))),IkReal((x1375+((px*x1374))+(((-1.0)*cj3*x1375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1378.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1377.value)))+(x1378.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1379=IKsin(j0);
IkReal x1380=IKcos(j0);
IkReal x1381=(px*x1380);
IkReal x1382=(py*x1379);
evalcond[0]=((((-1.0)*px*x1379))+((py*x1380)));
evalcond[1]=((0.045)+x1381+x1382+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1382))+(((-0.09)*x1381))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1383=((20.0)*sj3);
IkReal x1384=((3.0)*px);
IkReal x1385=((3.0)*py);
IkReal x1386=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1386;
j0eval[1]=((IKabs((x1385+((py*x1383))+(((-1.0)*cj3*x1385)))))+(IKabs((x1384+(((-1.0)*cj3*x1384))+((px*x1383))))));
j0eval[2]=IKsign(x1386);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1387=pz*pz;
IkReal x1388=((80.0)*pp);
IkReal x1389=((88.0)*pz);
j0eval[0]=(x1387+(((-1.0)*pp)));
j0eval[1]=IKsign(((((9.0)*x1387))+(((-9.0)*pp))));
j0eval[2]=((IKabs((((py*x1389))+(((-17.0)*py))+(((-1.0)*py*x1388)))))+(IKabs(((((-1.0)*px*x1388))+(((-17.0)*px))+((px*x1389))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal(((0.09)*px)),IkReal(((0.09)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
IkReal x1390=x1391.value;
j0array[0]=((-1.0)*x1390);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1390)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1392=IKcos(j0);
IkReal x1393=IKsin(j0);
IkReal x1394=((1.0)*px);
evalcond[0]=((((-1.0)*x1393*x1394))+((py*x1392)));
evalcond[1]=((((-1.0)*x1392*x1394))+(((-1.0)*py*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1396 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1396.valid){
continue;
}
IkReal x1395=x1396.value;
j0array[0]=((-1.0)*x1395);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1395)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1397=IKcos(j0);
IkReal x1398=IKsin(j0);
IkReal x1399=(py*x1398);
IkReal x1400=(px*x1397);
evalcond[0]=((((-1.0)*x1400))+(((-1.0)*x1399)));
evalcond[1]=((((0.09)*x1400))+(((0.09)*x1399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1401=((110.0)*pz);
IkReal x1402=((100.0)*pp);
CheckValue<IkReal> x1403=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1403.valid){
continue;
}
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal((((py*x1401))+(((-21.25)*py))+(((-1.0)*py*x1402)))),IkReal((((px*x1401))+(((-1.0)*px*x1402))+(((-21.25)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1403.value)))+(x1404.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1405=IKcos(j0);
IkReal x1406=IKsin(j0);
IkReal x1407=(px*x1405);
IkReal x1408=((1.0)*x1406);
evalcond[0]=(((py*x1405))+(((-1.0)*px*x1408)));
evalcond[1]=((0.045)+(((-1.0)*x1407))+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*py*x1408)));
evalcond[2]=((-0.2125)+(((0.09)*x1407))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*x1406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1409=((0.3)*sj3);
IkReal x1410=((0.045)*px);
IkReal x1411=((0.045)*py);
CheckValue<IkReal> x1412=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1412.valid){
continue;
}
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1411))+((py*x1409))+x1411)),IkReal((((px*x1409))+(((-1.0)*cj3*x1410))+x1410)),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1412.value)))+(x1413.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1414=IKcos(j0);
IkReal x1415=IKsin(j0);
IkReal x1416=(px*x1414);
IkReal x1417=((1.0)*x1415);
evalcond[0]=(((py*x1414))+(((-1.0)*px*x1417)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))+(((-1.0)*py*x1417))+(((-1.0)*x1416)));
evalcond[2]=((-0.2125)+(((0.09)*x1416))+(((-1.0)*pp))+(((0.09)*py*x1415))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1418=((20.0)*sj3);
IkReal x1419=((3.0)*px);
IkReal x1420=((3.0)*py);
IkReal x1421=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1421;
j0eval[1]=((IKabs((((cj3*x1420))+(((-1.0)*py*x1418))+(((-1.0)*x1420)))))+(IKabs(((((-1.0)*cj3*x1419))+((px*x1418))+x1419))));
j0eval[2]=IKsign(x1421);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1422=pz*pz;
IkReal x1423=((80.0)*pp);
IkReal x1424=((88.0)*pz);
j0eval[0]=((((-1.0)*pp))+x1422);
j0eval[1]=IKsign(((((9.0)*x1422))+(((-9.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*py*x1424))+(((17.0)*py))+((py*x1423)))))+(IKabs(((((-1.0)*px*x1423))+((px*x1424))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1426 = IKatan2WithCheck(IkReal(((-0.09)*py)),IkReal(((0.09)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1426.valid){
continue;
}
IkReal x1425=x1426.value;
j0array[0]=((-1.0)*x1425);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1425)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1427=IKcos(j0);
IkReal x1428=IKsin(j0);
IkReal x1429=((1.0)*px);
evalcond[0]=(((py*x1427))+(((-1.0)*x1428*x1429)));
evalcond[1]=((((-1.0)*x1427*x1429))+(((-1.0)*py*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1431 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1431.valid){
continue;
}
IkReal x1430=x1431.value;
j0array[0]=((-1.0)*x1430);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1430)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1432=IKsin(j0);
IkReal x1433=IKcos(j0);
evalcond[0]=((((-1.0)*py*x1432))+(((-1.0)*px*x1433)));
evalcond[1]=((((0.09)*px*x1432))+(((-0.09)*py*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1434=((110.0)*pz);
IkReal x1435=((100.0)*pp);
CheckValue<IkReal> x1436 = IKatan2WithCheck(IkReal((((px*x1434))+(((-1.0)*px*x1435))+(((-21.25)*px)))),IkReal(((((21.25)*py))+((py*x1435))+(((-1.0)*py*x1434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1436.valid){
continue;
}
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1437.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1436.value)+(((1.5707963267949)*(x1437.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1438=IKcos(j0);
IkReal x1439=IKsin(j0);
IkReal x1440=((1.0)*px);
IkReal x1441=(py*x1438);
evalcond[0]=((((-1.0)*py*x1439))+(((-1.0)*x1438*x1440)));
evalcond[1]=((0.045)+(((-1.0)*x1439*x1440))+(((-0.045)*cj3))+x1441+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1441))+(((0.09)*px*x1439))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1442=((0.3)*sj3);
IkReal x1443=((0.045)*px);
IkReal x1444=((0.045)*py);
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal((x1443+((px*x1442))+(((-1.0)*cj3*x1443)))),IkReal((((cj3*x1444))+(((-1.0)*py*x1442))+(((-1.0)*x1444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1446.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1445.value)+(((1.5707963267949)*(x1446.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1447=IKcos(j0);
IkReal x1448=IKsin(j0);
IkReal x1449=((1.0)*px);
IkReal x1450=(py*x1447);
evalcond[0]=((((-1.0)*x1447*x1449))+(((-1.0)*py*x1448)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1450+(((0.3)*sj3))+(((-1.0)*x1448*x1449)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((0.09)*px*x1448))+(((-0.09)*x1450))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1451=((20.0)*sj3);
IkReal x1452=((3.0)*px);
IkReal x1453=((3.0)*py);
IkReal x1454=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1454;
j0eval[1]=((IKabs(((((-1.0)*x1452))+(((-1.0)*px*x1451))+((cj3*x1452)))))+(IKabs(((((-1.0)*cj3*x1453))+((py*x1451))+x1453))));
j0eval[2]=IKsign(x1454);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1455=pz*pz;
IkReal x1456=((80.0)*pp);
IkReal x1457=((88.0)*pz);
j0eval[0]=((((-1.0)*x1455))+pp);
j0eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1455))));
j0eval[2]=((IKabs((((px*x1457))+(((-1.0)*px*x1456))+(((-17.0)*px)))))+(IKabs((((py*x1456))+(((17.0)*py))+(((-1.0)*py*x1457))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1459 = IKatan2WithCheck(IkReal(((0.09)*py)),IkReal(((-0.09)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1459.valid){
continue;
}
IkReal x1458=x1459.value;
j0array[0]=((-1.0)*x1458);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1458)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1460=IKcos(j0);
IkReal x1461=IKsin(j0);
evalcond[0]=(((py*x1461))+((px*x1460)));
evalcond[1]=((((-1.0)*px*x1461))+((py*x1460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1463 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1463.valid){
continue;
}
IkReal x1462=x1463.value;
j0array[0]=((-1.0)*x1462);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1462)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1464=IKcos(j0);
IkReal x1465=IKsin(j0);
IkReal x1466=(px*x1465);
IkReal x1467=(py*x1464);
evalcond[0]=(x1467+(((-1.0)*x1466)));
evalcond[1]=((((0.09)*x1467))+(((-0.09)*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1468=((110.0)*pz);
IkReal x1469=((100.0)*pp);
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1470.valid){
continue;
}
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal((((px*x1468))+(((-21.25)*px))+(((-1.0)*px*x1469)))),IkReal(((((-1.0)*py*x1468))+((py*x1469))+(((21.25)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1470.value)))+(x1471.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1472=IKcos(j0);
IkReal x1473=IKsin(j0);
IkReal x1474=(px*x1473);
IkReal x1475=(py*x1472);
evalcond[0]=(((py*x1473))+((px*x1472)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1474))+x1475+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1474))+(((-1.0)*pp))+(((0.09)*x1475))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1476=((0.3)*sj3);
IkReal x1477=((0.045)*px);
IkReal x1478=((0.045)*py);
CheckValue<IkReal> x1479 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1476))+((cj3*x1477))+(((-1.0)*x1477)))),IkReal(((((-1.0)*cj3*x1478))+x1478+((py*x1476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1479.valid){
continue;
}
CheckValue<IkReal> x1480=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1480.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1479.value)+(((1.5707963267949)*(x1480.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1481=IKcos(j0);
IkReal x1482=IKsin(j0);
IkReal x1483=(px*x1482);
IkReal x1484=(py*x1481);
evalcond[0]=(((py*x1482))+((px*x1481)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1483))+x1484+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1484))+(((-0.09)*x1483))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs((((cj2*px))+((py*sj2)))))+(IKabs((((cj2*py))+(((-1.0)*px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1485=((1.0)*px);
j0eval[0]=((IKabs(((((-1.0)*sj2*x1485))+((cj2*py)))))+(IKabs(((((-1.0)*cj2*x1485))+(((-1.0)*py*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1486=((1.0)*px);
CheckValue<IkReal> x1488 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x1486))+((cj2*py)))),IkReal(((((-1.0)*cj2*x1486))+(((-1.0)*py*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1488.valid){
continue;
}
IkReal x1487=x1488.value;
j0array[0]=((-1.0)*x1487);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1487)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1489=IKcos(j0);
IkReal x1490=IKsin(j0);
IkReal x1491=((0.09)*sj2);
IkReal x1492=(py*x1489);
IkReal x1493=(px*x1490);
IkReal x1494=(px*x1489);
IkReal x1495=(cj2*py*x1490);
evalcond[0]=(((py*x1490))+x1494);
evalcond[1]=((((-1.0)*x1493))+x1492);
evalcond[2]=(((sj2*x1492))+((cj2*x1494))+(((-1.0)*sj2*x1493))+x1495);
evalcond[3]=((((-0.09)*cj2*x1494))+((x1491*x1493))+(((-0.09)*x1495))+(((-1.0)*x1491*x1492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1497 = IKatan2WithCheck(IkReal((((cj2*px))+((py*sj2)))),IkReal((((cj2*py))+(((-1.0)*px*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1497.valid){
continue;
}
IkReal x1496=x1497.value;
j0array[0]=((-1.0)*x1496);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1496)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1498=IKcos(j0);
IkReal x1499=IKsin(j0);
IkReal x1500=((1.0)*px);
IkReal x1501=((0.09)*py);
IkReal x1502=((0.09)*px);
IkReal x1503=(cj2*x1499);
IkReal x1504=(sj2*x1498);
IkReal x1505=(cj2*x1498);
IkReal x1506=(sj2*x1499);
evalcond[0]=(((py*x1499))+((px*x1498)));
evalcond[1]=((((-1.0)*x1499*x1500))+((py*x1498)));
evalcond[2]=((((-1.0)*py*x1506))+((py*x1505))+(((-1.0)*x1500*x1503))+(((-1.0)*x1500*x1504)));
evalcond[3]=((((-1.0)*x1501*x1503))+(((-1.0)*x1501*x1504))+((x1502*x1506))+(((-1.0)*x1502*x1505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1508 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1508.valid){
continue;
}
IkReal x1507=x1508.value;
j0array[0]=((-1.0)*x1507);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1507)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1509=IKsin(j0);
IkReal x1510=IKcos(j0);
IkReal x1511=((1.0)*px);
IkReal x1512=((0.09)*sj2);
IkReal x1513=(cj2*x1509);
IkReal x1514=(py*x1510);
IkReal x1515=(sj2*x1509);
IkReal x1516=(cj2*px*x1510);
evalcond[0]=(x1514+(((-1.0)*x1509*x1511)));
evalcond[1]=(((sj2*x1514))+x1516+((py*x1513))+(((-1.0)*x1511*x1515)));
evalcond[2]=((((-1.0)*py*x1515))+(((-1.0)*sj2*x1510*x1511))+((cj2*x1514))+(((-1.0)*x1511*x1513)));
evalcond[3]=((((-0.09)*x1516))+(((-0.09)*py*x1513))+(((-1.0)*x1512*x1514))+((px*x1509*x1512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1517=cj2*cj2;
IkReal x1518=((0.045)*px);
IkReal x1519=((0.045)*py);
IkReal x1520=(cj2*sj2);
IkReal x1521=((0.3)*py*sj3);
IkReal x1522=(cj3*x1520);
IkReal x1523=(cj3*x1517);
IkReal x1524=((0.3)*px*sj3);
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj2))+((sj2*(pz*pz))))),-1);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526 = IKatan2WithCheck(IkReal(((((-1.0)*x1518))+((x1519*x1520))+(((-1.0)*x1524))+((cj3*x1518))+(((-1.0)*x1519*x1522))+(((-1.0)*x1518*x1523))+((x1517*x1524))+((x1520*x1521))+((x1517*x1518)))),IkReal((((x1519*x1523))+((x1518*x1520))+(((-1.0)*x1518*x1522))+((x1520*x1524))+x1521+x1519+(((-1.0)*x1517*x1519))+(((-1.0)*cj3*x1519))+(((-1.0)*x1517*x1521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1526.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1525.value)))+(x1526.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1527=IKcos(j0);
IkReal x1528=IKsin(j0);
IkReal x1529=((0.045)*cj2);
IkReal x1530=(py*sj2);
IkReal x1531=((0.3)*sj3);
IkReal x1532=((0.045)*cj3);
IkReal x1533=(cj2*px);
IkReal x1534=(px*sj2);
IkReal x1535=((0.09)*x1527);
IkReal x1536=((1.0)*x1528);
IkReal x1537=(py*x1528);
IkReal x1538=(py*x1527);
evalcond[0]=(((cj2*x1531))+x1529+x1537+((px*x1527))+(((-1.0)*cj3*x1529)));
evalcond[1]=((((-1.0)*sj2*x1532))+((sj2*x1531))+(((0.045)*sj2))+x1538+(((-1.0)*px*x1536)));
evalcond[2]=((((-1.0)*x1530*x1536))+((cj2*x1538))+(((-1.0)*x1533*x1536))+(((-1.0)*x1527*x1534)));
evalcond[3]=((0.045)+(((-1.0)*x1532))+((cj2*x1537))+((x1527*x1530))+((x1527*x1533))+x1531+(((-1.0)*x1534*x1536)));
evalcond[4]=((-0.2125)+(((-1.0)*x1530*x1535))+(((0.09)*x1528*x1534))+(((-1.0)*pp))+(((-1.0)*x1533*x1535))+(((1.1)*pz))+(((-0.09)*cj2*x1537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1539=cj2*cj2;
IkReal x1540=((0.045)*px);
IkReal x1541=((0.045)*py);
IkReal x1542=(cj2*sj2);
IkReal x1543=(cj3*x1542);
IkReal x1544=(cj3*x1539);
IkReal x1545=((0.3)*py*sj3);
IkReal x1546=((0.3)*px*sj3);
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal((((x1539*x1545))+((x1539*x1541))+(((-1.0)*x1540*x1542))+((x1540*x1543))+(((-1.0)*x1542*x1546))+(((-1.0)*x1541*x1544)))),IkReal((((x1539*x1546))+((x1539*x1540))+(((-1.0)*x1540*x1544))+((x1541*x1542))+((x1542*x1545))+(((-1.0)*x1541*x1543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*pp))+((cj2*(pz*pz))))),-1);
if(!x1548.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1547.value)+(((1.5707963267949)*(x1548.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1549=IKcos(j0);
IkReal x1550=IKsin(j0);
IkReal x1551=((0.045)*cj2);
IkReal x1552=(py*sj2);
IkReal x1553=((0.3)*sj3);
IkReal x1554=((0.045)*cj3);
IkReal x1555=(cj2*px);
IkReal x1556=(px*sj2);
IkReal x1557=((0.09)*x1549);
IkReal x1558=((1.0)*x1550);
IkReal x1559=(py*x1550);
IkReal x1560=(py*x1549);
evalcond[0]=(((cj2*x1553))+x1551+x1559+(((-1.0)*cj3*x1551))+((px*x1549)));
evalcond[1]=((((0.045)*sj2))+(((-1.0)*px*x1558))+x1560+(((-1.0)*sj2*x1554))+((sj2*x1553)));
evalcond[2]=((((-1.0)*x1552*x1558))+(((-1.0)*x1555*x1558))+((cj2*x1560))+(((-1.0)*x1549*x1556)));
evalcond[3]=((0.045)+((cj2*x1559))+((x1549*x1552))+((x1549*x1555))+x1553+(((-1.0)*x1556*x1558))+(((-1.0)*x1554)));
evalcond[4]=((-0.2125)+(((-1.0)*x1552*x1557))+(((-1.0)*x1555*x1557))+(((-1.0)*pp))+(((-0.09)*cj2*x1559))+(((1.1)*pz))+(((0.09)*x1550*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1561=(px*sj2);
IkReal x1562=((0.3)*sj3);
IkReal x1563=(cj2*py);
IkReal x1564=(py*sj2);
IkReal x1565=((0.045)*cj3*py);
IkReal x1566=((0.045)*cj2*px);
CheckValue<IkReal> x1567 = IKatan2WithCheck(IkReal(((((-0.045)*x1563))+(((0.045)*cj3*x1563))+(((-1.0)*x1562*x1563))+((x1561*x1562))+(((-0.045)*cj3*x1561))+(((0.045)*x1561)))),IkReal(((((-0.045)*x1564))+((cj3*x1566))+(((0.045)*cj3*x1564))+(((-1.0)*x1562*x1564))+(((-1.0)*cj2*px*x1562))+(((-1.0)*x1566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1567.valid){
continue;
}
CheckValue<IkReal> x1568=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1568.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1567.value)+(((1.5707963267949)*(x1568.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1569=IKcos(j0);
IkReal x1570=IKsin(j0);
IkReal x1571=((0.045)*cj2);
IkReal x1572=(py*sj2);
IkReal x1573=((0.3)*sj3);
IkReal x1574=((0.045)*cj3);
IkReal x1575=(cj2*px);
IkReal x1576=(px*sj2);
IkReal x1577=((0.09)*x1569);
IkReal x1578=((1.0)*x1570);
IkReal x1579=(py*x1570);
IkReal x1580=(py*x1569);
evalcond[0]=(((cj2*x1573))+x1579+x1571+((px*x1569))+(((-1.0)*cj3*x1571)));
evalcond[1]=((((-1.0)*sj2*x1574))+(((0.045)*sj2))+x1580+(((-1.0)*px*x1578))+((sj2*x1573)));
evalcond[2]=((((-1.0)*x1572*x1578))+(((-1.0)*x1575*x1578))+(((-1.0)*x1569*x1576))+((cj2*x1580)));
evalcond[3]=((0.045)+(((-1.0)*x1576*x1578))+((x1569*x1572))+((x1569*x1575))+((cj2*x1579))+x1573+(((-1.0)*x1574)));
evalcond[4]=((-0.2125)+(((-1.0)*x1572*x1577))+(((-1.0)*x1575*x1577))+(((0.09)*x1570*x1576))+(((-0.09)*cj2*x1579))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1581=((0.3)*sj3);
IkReal x1582=(px*sj2);
IkReal x1583=((0.045)*py);
IkReal x1584=(pp+(((-1.0)*(pz*pz))));
IkReal x1585=(cj3*x1583);
IkReal x1586=((0.045)*cj2*px);
j0eval[0]=x1584;
j0eval[1]=((IKabs((((sj2*x1585))+x1586+(((-1.0)*sj2*x1583))+(((-1.0)*py*sj2*x1581))+((cj2*px*x1581))+(((-1.0)*cj3*x1586)))))+(IKabs(((((-1.0)*cj2*x1585))+((cj2*py*x1581))+(((-0.045)*cj3*x1582))+((cj2*x1583))+((x1581*x1582))+(((0.045)*x1582))))));
j0eval[2]=IKsign(x1584);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1587=((((-1.0)*cj2*pp))+((cj2*(pz*pz))));
j0eval[0]=x1587;
j0eval[1]=IKsign(x1587);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1588=((((-1.0)*sj2*(pz*pz)))+((pp*sj2)));
j0eval[0]=x1588;
j0eval[1]=IKsign(x1588);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1589=((20.0)*sj3);
IkReal x1590=((3.0)*px);
IkReal x1591=((3.0)*py);
IkReal x1592=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1592;
j0eval[1]=((IKabs(((((-1.0)*cj3*x1590))+x1590+((px*x1589)))))+(IKabs(((((-1.0)*cj3*x1591))+x1591+((py*x1589))))));
j0eval[2]=IKsign(x1592);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1593=pz*pz;
IkReal x1594=((80.0)*pp);
IkReal x1595=((88.0)*pz);
j0eval[0]=((((-1.0)*pp))+x1593);
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1593))));
j0eval[2]=((IKabs(((((-1.0)*py*x1594))+(((-1.0)*py*x1595))+(((-17.0)*py)))))+(IKabs(((((-1.0)*px*x1594))+(((-1.0)*px*x1595))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal(((0.09)*px)),IkReal(((0.09)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1597.valid){
continue;
}
IkReal x1596=x1597.value;
j0array[0]=((-1.0)*x1596);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1596)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1598=IKcos(j0);
IkReal x1599=IKsin(j0);
IkReal x1600=((1.0)*px);
evalcond[0]=((((-1.0)*x1599*x1600))+((py*x1598)));
evalcond[1]=((((-1.0)*py*x1599))+(((-1.0)*x1598*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1602 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1602.valid){
continue;
}
IkReal x1601=x1602.value;
j0array[0]=((-1.0)*x1601);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1601)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1603=IKcos(j0);
IkReal x1604=IKsin(j0);
IkReal x1605=(py*x1604);
IkReal x1606=(px*x1603);
evalcond[0]=((((-1.0)*x1606))+(((-1.0)*x1605)));
evalcond[1]=((((0.09)*x1606))+(((0.09)*x1605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1607=((110.0)*pz);
IkReal x1608=((100.0)*pp);
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1609.valid){
continue;
}
CheckValue<IkReal> x1610 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1608))+(((-1.0)*py*x1607))+(((-21.25)*py)))),IkReal(((((-1.0)*px*x1608))+(((-1.0)*px*x1607))+(((-21.25)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1610.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1609.value)))+(x1610.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1611=IKcos(j0);
IkReal x1612=IKsin(j0);
IkReal x1613=(px*x1611);
IkReal x1614=((1.0)*x1612);
evalcond[0]=(((py*x1611))+(((-1.0)*px*x1614)));
evalcond[1]=((0.045)+(((-1.0)*x1613))+(((-1.0)*py*x1614))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1612))+(((0.09)*x1613))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1615=((0.3)*sj3);
IkReal x1616=((0.045)*px);
IkReal x1617=((0.045)*py);
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1617))+((py*x1615))+x1617)),IkReal(((((-1.0)*cj3*x1616))+x1616+((px*x1615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
CheckValue<IkReal> x1619=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1619.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1618.value)+(((1.5707963267949)*(x1619.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1620=IKcos(j0);
IkReal x1621=IKsin(j0);
IkReal x1622=(px*x1620);
IkReal x1623=((1.0)*x1621);
evalcond[0]=(((py*x1620))+(((-1.0)*px*x1623)));
evalcond[1]=((0.045)+(((-1.0)*x1622))+(((-1.0)*py*x1623))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1621))+(((0.09)*x1622))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1624=((20.0)*sj3);
IkReal x1625=((3.0)*px);
IkReal x1626=((3.0)*py);
IkReal x1627=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1627;
j0eval[1]=((IKabs((x1625+((px*x1624))+(((-1.0)*cj3*x1625)))))+(IKabs((((py*x1624))+x1626+(((-1.0)*cj3*x1626))))));
j0eval[2]=IKsign(x1627);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1628=pz*pz;
IkReal x1629=((80.0)*pp);
IkReal x1630=((88.0)*pz);
j0eval[0]=((((-1.0)*x1628))+pp);
j0eval[1]=IKsign(((((-9.0)*x1628))+(((9.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*px*x1630))+(((-1.0)*px*x1629))+(((-17.0)*px)))))+(IKabs(((((-1.0)*py*x1629))+(((-17.0)*py))+(((-1.0)*py*x1630))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1632 = IKatan2WithCheck(IkReal(((-0.09)*px)),IkReal(((-0.09)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1632.valid){
continue;
}
IkReal x1631=x1632.value;
j0array[0]=((-1.0)*x1631);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1631)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1633=IKcos(j0);
IkReal x1634=IKsin(j0);
evalcond[0]=(((py*x1634))+((px*x1633)));
evalcond[1]=(((py*x1633))+(((-1.0)*px*x1634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1636 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
IkReal x1635=x1636.value;
j0array[0]=((-1.0)*x1635);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1635)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1637=IKcos(j0);
IkReal x1638=IKsin(j0);
evalcond[0]=(((py*x1637))+(((-1.0)*px*x1638)));
evalcond[1]=((((-0.09)*px*x1637))+(((-0.09)*py*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1639=((110.0)*pz);
IkReal x1640=((100.0)*pp);
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1640))+(((-21.25)*py))+(((-1.0)*py*x1639)))),IkReal(((((-1.0)*px*x1639))+(((-1.0)*px*x1640))+(((-21.25)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1642.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1641.value)+(((1.5707963267949)*(x1642.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1643=IKsin(j0);
IkReal x1644=IKcos(j0);
IkReal x1645=(px*x1644);
IkReal x1646=(py*x1643);
evalcond[0]=(((py*x1644))+(((-1.0)*px*x1643)));
evalcond[1]=((0.045)+x1645+x1646+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1646))+(((-0.09)*x1645))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1647=((0.3)*sj3);
IkReal x1648=((0.045)*px);
IkReal x1649=((0.045)*py);
CheckValue<IkReal> x1650=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1650.valid){
continue;
}
CheckValue<IkReal> x1651 = IKatan2WithCheck(IkReal((x1649+((py*x1647))+(((-1.0)*cj3*x1649)))),IkReal((x1648+((px*x1647))+(((-1.0)*cj3*x1648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1651.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1650.value)))+(x1651.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1652=IKsin(j0);
IkReal x1653=IKcos(j0);
IkReal x1654=(px*x1653);
IkReal x1655=(py*x1652);
evalcond[0]=((((-1.0)*px*x1652))+((py*x1653)));
evalcond[1]=((0.045)+x1654+x1655+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1655))+(((-0.09)*x1654))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1656=((20.0)*sj3);
IkReal x1657=((3.0)*px);
IkReal x1658=((3.0)*py);
IkReal x1659=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1659;
j0eval[1]=((IKabs(((((-1.0)*py*x1656))+((cj3*x1658))+(((-1.0)*x1658)))))+(IKabs((x1657+((px*x1656))+(((-1.0)*cj3*x1657))))));
j0eval[2]=IKsign(x1659);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1660=pz*pz;
IkReal x1661=((80.0)*pp);
IkReal x1662=((88.0)*pz);
j0eval[0]=(x1660+(((-1.0)*pp)));
j0eval[1]=IKsign(((((9.0)*x1660))+(((-9.0)*pp))));
j0eval[2]=((IKabs(((((17.0)*py))+((py*x1661))+((py*x1662)))))+(IKabs(((((-1.0)*px*x1661))+(((-1.0)*px*x1662))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1664 = IKatan2WithCheck(IkReal(((-0.09)*py)),IkReal(((0.09)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1664.valid){
continue;
}
IkReal x1663=x1664.value;
j0array[0]=((-1.0)*x1663);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1663)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1665=IKcos(j0);
IkReal x1666=IKsin(j0);
evalcond[0]=(((px*x1665))+((py*x1666)));
evalcond[1]=(((py*x1665))+(((-1.0)*px*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1668 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1668.valid){
continue;
}
IkReal x1667=x1668.value;
j0array[0]=((-1.0)*x1667);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1667)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1669=IKsin(j0);
IkReal x1670=IKcos(j0);
IkReal x1671=(py*x1670);
IkReal x1672=(px*x1669);
evalcond[0]=(x1671+(((-1.0)*x1672)));
evalcond[1]=((((0.09)*x1672))+(((-0.09)*x1671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1673=((110.0)*pz);
IkReal x1674=((100.0)*pp);
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1674))+(((-1.0)*px*x1673))+(((-21.25)*px)))),IkReal(((((21.25)*py))+((py*x1674))+((py*x1673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1676.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1675.value)))+(x1676.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1677=IKcos(j0);
IkReal x1678=IKsin(j0);
IkReal x1679=(px*x1678);
IkReal x1680=(py*x1677);
evalcond[0]=(((py*x1678))+((px*x1677)));
evalcond[1]=((0.045)+x1680+(((-0.045)*cj3))+(((-1.0)*x1679))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1679))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1681=((0.3)*sj3);
IkReal x1682=((0.045)*px);
IkReal x1683=((0.045)*py);
CheckValue<IkReal> x1684 = IKatan2WithCheck(IkReal((x1682+((px*x1681))+(((-1.0)*cj3*x1682)))),IkReal(((((-1.0)*py*x1681))+(((-1.0)*x1683))+((cj3*x1683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1684.valid){
continue;
}
CheckValue<IkReal> x1685=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1685.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1684.value)+(((1.5707963267949)*(x1685.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1686=IKcos(j0);
IkReal x1687=IKsin(j0);
IkReal x1688=(px*x1687);
IkReal x1689=(py*x1686);
evalcond[0]=(((px*x1686))+((py*x1687)));
evalcond[1]=((0.045)+x1689+(((-1.0)*x1688))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1688))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1690=((20.0)*sj3);
IkReal x1691=((3.0)*px);
IkReal x1692=((3.0)*py);
IkReal x1693=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1693;
j0eval[1]=((IKabs((((cj3*x1691))+(((-1.0)*x1691))+(((-1.0)*px*x1690)))))+(IKabs((x1692+((py*x1690))+(((-1.0)*cj3*x1692))))));
j0eval[2]=IKsign(x1693);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1694=pz*pz;
IkReal x1695=((80.0)*pp);
IkReal x1696=((88.0)*pz);
j0eval[0]=((((-1.0)*x1694))+pp);
j0eval[1]=((IKabs(((((17.0)*py))+((py*x1695))+((py*x1696)))))+(IKabs(((((-17.0)*px))+(((-1.0)*px*x1695))+(((-1.0)*px*x1696))))));
j0eval[2]=IKsign(((((-9.0)*x1694))+(((9.0)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1698 = IKatan2WithCheck(IkReal(((0.09)*py)),IkReal(((-0.09)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1698.valid){
continue;
}
IkReal x1697=x1698.value;
j0array[0]=((-1.0)*x1697);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1697)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1699=IKcos(j0);
IkReal x1700=IKsin(j0);
IkReal x1701=((1.0)*px);
evalcond[0]=((((-1.0)*x1700*x1701))+((py*x1699)));
evalcond[1]=((((-1.0)*x1699*x1701))+(((-1.0)*py*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1703 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1703.valid){
continue;
}
IkReal x1702=x1703.value;
j0array[0]=((-1.0)*x1702);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1702)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1704=IKcos(j0);
IkReal x1705=IKsin(j0);
evalcond[0]=((((-1.0)*px*x1704))+(((-1.0)*py*x1705)));
evalcond[1]=((((-0.09)*px*x1705))+(((0.09)*py*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1706=((110.0)*pz);
IkReal x1707=((100.0)*pp);
CheckValue<IkReal> x1708 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1707))+(((-1.0)*px*x1706))+(((-21.25)*px)))),IkReal(((((21.25)*py))+((py*x1707))+((py*x1706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1708.valid){
continue;
}
CheckValue<IkReal> x1709=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1709.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1708.value)+(((1.5707963267949)*(x1709.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1710=IKcos(j0);
IkReal x1711=IKsin(j0);
IkReal x1712=((1.0)*px);
IkReal x1713=(py*x1710);
evalcond[0]=((((-1.0)*x1710*x1712))+(((-1.0)*py*x1711)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1713+(((-1.0)*x1711*x1712))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*px*x1711))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1714=((0.3)*sj3);
IkReal x1715=((0.045)*px);
IkReal x1716=((0.045)*py);
CheckValue<IkReal> x1717 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1714))+(((-1.0)*x1715))+((cj3*x1715)))),IkReal(((((-1.0)*cj3*x1716))+x1716+((py*x1714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1717.valid){
continue;
}
CheckValue<IkReal> x1718=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1718.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1717.value)+(((1.5707963267949)*(x1718.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1719=IKcos(j0);
IkReal x1720=IKsin(j0);
IkReal x1721=((1.0)*px);
IkReal x1722=(py*x1719);
evalcond[0]=((((-1.0)*py*x1720))+(((-1.0)*x1719*x1721)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1722+(((-1.0)*x1720*x1721))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1722))+(((-0.09)*px*x1720))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(((((-1.0)*cj2*px))+((py*sj2)))))+(IKabs((((cj2*py))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1723=((1.0)*px);
j0eval[0]=((IKabs(((((-1.0)*cj2*py))+(((-1.0)*sj2*x1723)))))+(IKabs(((((-1.0)*cj2*x1723))+((py*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[4], cj0array[4], sj0array[4];
bool j0valid[4]={false};
_nj0 = 4;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.5707963267949;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
j0array[2]=3.14159265358979;
sj0array[2]=IKsin(j0array[2]);
cj0array[2]=IKcos(j0array[2]);
j0array[3]=-1.5707963267949;
sj0array[3]=IKsin(j0array[3]);
cj0array[3]=IKcos(j0array[3]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
if( j0array[2] > IKPI )
{
    j0array[2]-=IK2PI;
}
else if( j0array[2] < -IKPI )
{    j0array[2]+=IK2PI;
}
j0valid[2] = true;
if( j0array[3] > IKPI )
{
    j0array[3]-=IK2PI;
}
else if( j0array[3] < -IKPI )
{    j0array[3]+=IK2PI;
}
j0valid[3] = true;
for(int ij0 = 0; ij0 < 4; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 4; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1724=((1.0)*cj2);
CheckValue<IkReal> x1726 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1724))+((py*sj2)))),IkReal(((((-1.0)*py*x1724))+(((-1.0)*px*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1726.valid){
continue;
}
IkReal x1725=x1726.value;
j0array[0]=((-1.0)*x1725);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1725)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1727=IKcos(j0);
IkReal x1728=IKsin(j0);
IkReal x1729=((0.09)*py);
IkReal x1730=(px*x1728);
IkReal x1731=(sj2*x1727);
IkReal x1732=(cj2*x1727);
IkReal x1733=(py*x1728);
evalcond[0]=(((px*x1727))+x1733);
evalcond[1]=(((py*x1727))+(((-1.0)*x1730)));
evalcond[2]=(((px*x1731))+((py*x1732))+(((-1.0)*cj2*x1730))+((sj2*x1733)));
evalcond[3]=((((0.09)*px*x1732))+(((-1.0)*x1729*x1731))+((cj2*x1728*x1729))+(((0.09)*sj2*x1730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal((((cj2*py))+((px*sj2)))),IkReal(((((-1.0)*cj2*px))+((py*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
IkReal x1734=x1735.value;
j0array[0]=((-1.0)*x1734);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1734)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1736=IKcos(j0);
IkReal x1737=IKsin(j0);
IkReal x1738=((0.09)*py);
IkReal x1739=(cj2*x1737);
IkReal x1740=(sj2*x1736);
IkReal x1741=(px*x1737);
IkReal x1742=(px*x1736);
evalcond[0]=(((py*x1737))+x1742);
evalcond[1]=(((py*x1736))+(((-1.0)*x1741)));
evalcond[2]=(((py*x1740))+(((-1.0)*cj2*x1742))+(((-1.0)*sj2*x1741))+(((-1.0)*py*x1739)));
evalcond[3]=((((0.09)*cj2*x1742))+(((-1.0)*x1738*x1740))+((x1738*x1739))+(((0.09)*sj2*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1744 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1744.valid){
continue;
}
IkReal x1743=x1744.value;
j0array[0]=((-1.0)*x1743);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1743)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1745=IKcos(j0);
IkReal x1746=IKsin(j0);
IkReal x1747=((1.0)*cj2);
IkReal x1748=((0.09)*py);
IkReal x1749=(px*x1746);
IkReal x1750=(sj2*x1745);
IkReal x1751=(cj2*x1745);
IkReal x1752=(py*x1746);
evalcond[0]=(((py*x1745))+(((-1.0)*x1749)));
evalcond[1]=(((px*x1750))+(((-1.0)*x1747*x1749))+((sj2*x1752))+((py*x1751)));
evalcond[2]=((((-1.0)*sj2*x1749))+(((-1.0)*px*x1745*x1747))+(((-1.0)*x1747*x1752))+((py*x1750)));
evalcond[3]=((((-1.0)*x1748*x1750))+(((0.09)*px*x1751))+((cj2*x1746*x1748))+(((0.09)*sj2*x1749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1753=cj2*cj2;
IkReal x1754=((0.045)*px);
IkReal x1755=(cj2*sj2);
IkReal x1756=((0.3)*sj3);
IkReal x1757=((0.045)*cj3);
IkReal x1758=((0.045)*py);
IkReal x1759=(py*x1753);
CheckValue<IkReal> x1760=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*(pz*pz)))+((pp*sj2)))),-1);
if(!x1760.valid){
continue;
}
CheckValue<IkReal> x1761 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1755*x1757))+x1754+((px*x1756))+(((-1.0)*px*x1753*x1756))+((py*x1755*x1756))+(((-1.0)*x1753*x1754))+(((-1.0)*cj3*x1754))+((x1755*x1758))+((cj3*x1753*x1754)))),IkReal((((x1754*x1755))+((x1753*x1758))+(((-1.0)*x1757*x1759))+(((-1.0)*py*x1756))+(((-1.0)*x1758))+((px*x1755*x1756))+(((-1.0)*cj3*x1754*x1755))+((x1756*x1759))+((py*x1757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1761.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1760.value)))+(x1761.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1762=IKcos(j0);
IkReal x1763=IKsin(j0);
IkReal x1764=((0.045)*cj2);
IkReal x1765=((0.09)*py);
IkReal x1766=((0.3)*sj3);
IkReal x1767=((0.09)*px);
IkReal x1768=((0.045)*cj3);
IkReal x1769=((1.0)*px);
IkReal x1770=(sj2*x1762);
IkReal x1771=(sj2*x1763);
IkReal x1772=(cj2*x1762);
IkReal x1773=(py*x1763);
IkReal x1774=(x1763*x1769);
evalcond[0]=((((-1.0)*cj2*x1766))+(((-1.0)*x1764))+x1773+((px*x1762))+((cj3*x1764)));
evalcond[1]=((((-1.0)*sj2*x1768))+((sj2*x1766))+(((0.045)*sj2))+((py*x1762))+(((-1.0)*x1774)));
evalcond[2]=((((-1.0)*cj2*x1774))+((px*x1770))+((py*x1772))+((py*x1771)));
evalcond[3]=((0.045)+(((-1.0)*x1768))+x1766+((py*x1770))+(((-1.0)*x1769*x1771))+(((-1.0)*x1769*x1772))+(((-1.0)*cj2*x1773)));
evalcond[4]=((-0.2125)+((x1767*x1771))+((x1767*x1772))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x1765*x1770))+((cj2*x1763*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1775=cj2*cj2;
IkReal x1776=((0.045)*px);
IkReal x1777=(cj2*sj2);
IkReal x1778=((0.045)*cj3);
IkReal x1779=((0.3)*sj3);
IkReal x1780=(py*x1775);
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*pp))+((cj2*(pz*pz))))),-1);
if(!x1781.valid){
continue;
}
CheckValue<IkReal> x1782 = IKatan2WithCheck(IkReal((((x1778*x1780))+(((-1.0)*x1776*x1777))+((cj3*x1776*x1777))+(((-1.0)*px*x1777*x1779))+(((-1.0)*x1779*x1780))+(((-0.045)*x1780)))),IkReal(((((-1.0)*py*x1777*x1778))+(((0.045)*py*x1777))+((py*x1777*x1779))+(((-1.0)*px*x1775*x1779))+((cj3*x1775*x1776))+(((-1.0)*x1775*x1776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1782.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1781.value)))+(x1782.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1783=IKcos(j0);
IkReal x1784=IKsin(j0);
IkReal x1785=((0.045)*cj2);
IkReal x1786=((0.09)*py);
IkReal x1787=((0.3)*sj3);
IkReal x1788=((0.09)*px);
IkReal x1789=((0.045)*cj3);
IkReal x1790=((1.0)*px);
IkReal x1791=(sj2*x1783);
IkReal x1792=(sj2*x1784);
IkReal x1793=(cj2*x1783);
IkReal x1794=(py*x1784);
IkReal x1795=(x1784*x1790);
evalcond[0]=((((-1.0)*x1785))+x1794+((cj3*x1785))+(((-1.0)*cj2*x1787))+((px*x1783)));
evalcond[1]=((((-1.0)*x1795))+((sj2*x1787))+((py*x1783))+(((0.045)*sj2))+(((-1.0)*sj2*x1789)));
evalcond[2]=(((py*x1792))+((py*x1793))+(((-1.0)*cj2*x1795))+((px*x1791)));
evalcond[3]=((0.045)+(((-1.0)*x1789))+(((-1.0)*x1790*x1792))+(((-1.0)*x1790*x1793))+x1787+((py*x1791))+(((-1.0)*cj2*x1794)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x1786*x1791))+((cj2*x1784*x1786))+((x1788*x1792))+((x1788*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1796=(px*sj2);
IkReal x1797=((0.3)*sj3);
IkReal x1798=(cj2*py);
IkReal x1799=(py*sj2);
IkReal x1800=((0.045)*cj3*py);
IkReal x1801=((0.045)*cj2*px);
CheckValue<IkReal> x1802 = IKatan2WithCheck(IkReal(((((0.045)*x1798))+(((0.045)*x1796))+(((-0.045)*cj3*x1798))+(((-0.045)*cj3*x1796))+((x1796*x1797))+((x1797*x1798)))),IkReal(((((-1.0)*cj3*x1801))+((cj2*px*x1797))+(((0.045)*cj3*x1799))+x1801+(((-0.045)*x1799))+(((-1.0)*x1797*x1799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1802.valid){
continue;
}
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1803.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1802.value)+(((1.5707963267949)*(x1803.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1804=IKcos(j0);
IkReal x1805=IKsin(j0);
IkReal x1806=((0.045)*cj2);
IkReal x1807=((0.09)*py);
IkReal x1808=((0.3)*sj3);
IkReal x1809=((0.09)*px);
IkReal x1810=((0.045)*cj3);
IkReal x1811=((1.0)*px);
IkReal x1812=(sj2*x1804);
IkReal x1813=(sj2*x1805);
IkReal x1814=(cj2*x1804);
IkReal x1815=(py*x1805);
IkReal x1816=(x1805*x1811);
evalcond[0]=(((cj3*x1806))+(((-1.0)*cj2*x1808))+(((-1.0)*x1806))+x1815+((px*x1804)));
evalcond[1]=((((-1.0)*x1816))+(((-1.0)*sj2*x1810))+(((0.045)*sj2))+((sj2*x1808))+((py*x1804)));
evalcond[2]=((((-1.0)*cj2*x1816))+((px*x1812))+((py*x1814))+((py*x1813)));
evalcond[3]=((0.045)+(((-1.0)*x1810))+(((-1.0)*x1811*x1814))+(((-1.0)*x1811*x1813))+((py*x1812))+x1808+(((-1.0)*cj2*x1815)));
evalcond[4]=((-0.2125)+(((-1.0)*x1807*x1812))+((x1809*x1813))+((x1809*x1814))+(((-1.0)*pp))+(((-1.1)*pz))+((cj2*x1805*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1817=(cj3*py);
IkReal x1818=((0.3)*sj1);
IkReal x1819=((0.045)*sj2);
IkReal x1820=(cj3*px);
IkReal x1821=(px*sj1);
IkReal x1822=((0.3)*sj3);
IkReal x1823=((0.045)*sj3);
IkReal x1824=(py*sj1);
IkReal x1825=(cj1*cj2);
IkReal x1826=((0.045)*x1825);
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1827.valid){
continue;
}
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1826))+((px*x1819))+(((-1.0)*x1819*x1820))+(((-1.0)*py*x1822*x1825))+(((-0.55)*x1824))+(((-1.0)*x1823*x1824))+((px*sj2*x1822))+((x1817*x1826))+(((-1.0)*x1817*x1818)))),IkReal(((((-1.0)*x1821*x1823))+(((-1.0)*py*sj2*x1822))+(((-1.0)*x1818*x1820))+((x1817*x1819))+(((-1.0)*py*x1819))+(((-0.55)*x1821))+((x1820*x1826))+(((-1.0)*px*x1822*x1825))+(((-1.0)*px*x1826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1827.value)))+(x1828.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1829=IKsin(j0);
IkReal x1830=IKcos(j0);
IkReal x1831=(cj1*cj2);
IkReal x1832=((0.09)*sj2);
IkReal x1833=((0.3)*sj3);
IkReal x1834=((0.045)*cj3);
IkReal x1835=((1.1)*sj1);
IkReal x1836=((0.3)*cj3);
IkReal x1837=((1.0)*sj2);
IkReal x1838=((0.045)*sj3);
IkReal x1839=(cj1*pz);
IkReal x1840=((1.0)*sj1);
IkReal x1841=(py*x1829);
IkReal x1842=(py*x1830);
IkReal x1843=(px*x1829);
IkReal x1844=(px*x1830);
IkReal x1845=(cj2*pz*sj1);
evalcond[0]=((((0.045)*sj2))+((sj2*x1833))+(((-1.0)*sj2*x1834))+x1842+(((-1.0)*x1843)));
evalcond[1]=((-0.55)+(((-1.0)*x1836))+(((-1.0)*x1838))+x1839+(((-1.0)*x1840*x1841))+(((-1.0)*x1840*x1844)));
evalcond[2]=((((-1.0)*pz*sj1*x1837))+((cj2*x1842))+(((-1.0)*cj1*x1837*x1844))+(((-1.0)*cj1*x1837*x1841))+(((-1.0)*cj2*x1843)));
evalcond[3]=(((sj1*x1838))+((sj1*x1836))+((x1831*x1833))+x1841+x1844+(((0.045)*x1831))+(((-1.0)*x1831*x1834))+(((0.55)*sj1)));
evalcond[4]=((0.045)+(((-1.0)*x1834))+((sj2*x1842))+((x1831*x1841))+((x1831*x1844))+x1845+x1833+(((-1.0)*x1837*x1843)));
evalcond[5]=((-0.2125)+((x1832*x1843))+(((-0.09)*x1831*x1844))+(((-0.09)*x1831*x1841))+(((-1.0)*pp))+(((-1.0)*x1835*x1841))+(((-1.0)*x1835*x1844))+(((-0.09)*x1845))+(((1.1)*x1839))+(((-1.0)*x1832*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1846=((0.55)*cj2);
IkReal x1847=(cj2*sj1);
IkReal x1848=(py*sj2);
IkReal x1849=((0.045)*sj3);
IkReal x1850=(px*pz);
IkReal x1851=(cj2*px);
IkReal x1852=(cj1*cj2);
IkReal x1853=(cj2*py);
IkReal x1854=((0.3)*cj3);
IkReal x1855=((0.55)*cj1*sj2);
IkReal x1856=(cj1*px*sj2);
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x1850))+((py*pz*x1852))+(((-1.0)*x1849*x1853))+((x1849*x1856))+((x1854*x1856))+((px*x1855))+(((-1.0)*py*x1846))+(((-1.0)*x1853*x1854)))),IkReal(((((-1.0)*cj1*x1848*x1854))+(((-1.0)*px*x1846))+(((-1.0)*x1849*x1851))+((x1850*x1852))+(((-0.55)*cj1*x1848))+(((-1.0)*x1851*x1854))+(((-1.0)*cj1*x1848*x1849))+((pz*x1848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
CheckValue<IkReal> x1858=IKPowWithIntegerCheck(IKsign((((pp*x1847))+(((-1.0)*x1847*(pz*pz))))),-1);
if(!x1858.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1857.value)+(((1.5707963267949)*(x1858.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1859=IKsin(j0);
IkReal x1860=IKcos(j0);
IkReal x1861=(cj1*cj2);
IkReal x1862=((0.09)*sj2);
IkReal x1863=((0.3)*sj3);
IkReal x1864=((0.045)*cj3);
IkReal x1865=((1.1)*sj1);
IkReal x1866=((0.3)*cj3);
IkReal x1867=((1.0)*sj2);
IkReal x1868=((0.045)*sj3);
IkReal x1869=(cj1*pz);
IkReal x1870=((1.0)*sj1);
IkReal x1871=(py*x1859);
IkReal x1872=(py*x1860);
IkReal x1873=(px*x1859);
IkReal x1874=(px*x1860);
IkReal x1875=(cj2*pz*sj1);
evalcond[0]=((((0.045)*sj2))+x1872+((sj2*x1863))+(((-1.0)*sj2*x1864))+(((-1.0)*x1873)));
evalcond[1]=((-0.55)+(((-1.0)*x1870*x1874))+(((-1.0)*x1870*x1871))+x1869+(((-1.0)*x1866))+(((-1.0)*x1868)));
evalcond[2]=((((-1.0)*pz*sj1*x1867))+(((-1.0)*cj1*x1867*x1871))+(((-1.0)*cj1*x1867*x1874))+((cj2*x1872))+(((-1.0)*cj2*x1873)));
evalcond[3]=((((0.045)*x1861))+x1874+x1871+(((-1.0)*x1861*x1864))+(((0.55)*sj1))+((sj1*x1868))+((sj1*x1866))+((x1861*x1863)));
evalcond[4]=((0.045)+((x1861*x1871))+((x1861*x1874))+((sj2*x1872))+(((-1.0)*x1867*x1873))+x1863+x1875+(((-1.0)*x1864)));
evalcond[5]=((-0.2125)+((x1862*x1873))+(((-0.09)*x1861*x1871))+(((-0.09)*x1861*x1874))+(((1.1)*x1869))+(((-1.0)*pp))+(((-0.09)*x1875))+(((-1.0)*x1865*x1874))+(((-1.0)*x1865*x1871))+(((-1.0)*x1862*x1872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1876=((0.045)*px);
IkReal x1877=((0.3)*sj3);
IkReal x1878=(sj1*sj2);
IkReal x1879=(cj1*pz);
IkReal x1880=((0.3)*cj3);
IkReal x1881=(py*x1878);
CheckValue<IkReal> x1882 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((-0.045)*py*sj3))+((x1876*x1878))+(((-1.0)*cj3*x1876*x1878))+((px*x1877*x1878))+((py*x1879))+(((-1.0)*py*x1880)))),IkReal(((((-0.55)*px))+(((-1.0)*px*x1880))+((px*x1879))+(((-1.0)*sj3*x1876))+(((-0.045)*x1881))+(((0.045)*cj3*x1881))+(((-1.0)*x1877*x1881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
CheckValue<IkReal> x1883=IKPowWithIntegerCheck(IKsign((((pp*sj1))+(((-1.0)*sj1*(pz*pz))))),-1);
if(!x1883.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1882.value)+(((1.5707963267949)*(x1883.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1884=IKsin(j0);
IkReal x1885=IKcos(j0);
IkReal x1886=(cj1*cj2);
IkReal x1887=((0.09)*sj2);
IkReal x1888=((0.3)*sj3);
IkReal x1889=((0.045)*cj3);
IkReal x1890=((1.1)*sj1);
IkReal x1891=((0.3)*cj3);
IkReal x1892=((1.0)*sj2);
IkReal x1893=((0.045)*sj3);
IkReal x1894=(cj1*pz);
IkReal x1895=((1.0)*sj1);
IkReal x1896=(py*x1884);
IkReal x1897=(py*x1885);
IkReal x1898=(px*x1884);
IkReal x1899=(px*x1885);
IkReal x1900=(cj2*pz*sj1);
evalcond[0]=(((sj2*x1888))+(((0.045)*sj2))+(((-1.0)*x1898))+x1897+(((-1.0)*sj2*x1889)));
evalcond[1]=((-0.55)+(((-1.0)*x1895*x1896))+(((-1.0)*x1895*x1899))+x1894+(((-1.0)*x1893))+(((-1.0)*x1891)));
evalcond[2]=((((-1.0)*cj1*x1892*x1899))+(((-1.0)*cj1*x1892*x1896))+(((-1.0)*pz*sj1*x1892))+((cj2*x1897))+(((-1.0)*cj2*x1898)));
evalcond[3]=((((0.045)*x1886))+x1899+x1896+((sj1*x1893))+((sj1*x1891))+(((0.55)*sj1))+(((-1.0)*x1886*x1889))+((x1886*x1888)));
evalcond[4]=((0.045)+(((-1.0)*x1892*x1898))+((sj2*x1897))+((x1886*x1896))+((x1886*x1899))+x1900+x1888+(((-1.0)*x1889)));
evalcond[5]=((-0.2125)+(((-1.0)*x1890*x1896))+(((-1.0)*x1890*x1899))+(((1.1)*x1894))+(((-1.0)*pp))+(((-1.0)*x1887*x1897))+(((-0.09)*x1900))+(((-0.09)*x1886*x1899))+(((-0.09)*x1886*x1896))+((x1887*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1901=((0.045)*sj2);
CheckValue<IkReal> x1904 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1904.valid){
continue;
}
IkReal x1902=((1.0)*(x1904.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1905=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1905.valid){
continue;
}
if( (((x1905.value)*(((((0.3)*sj2*sj3))+x1901+(((-1.0)*cj3*x1901)))))) < -1-IKFAST_SINCOS_THRESH || (((x1905.value)*(((((0.3)*sj2*sj3))+x1901+(((-1.0)*cj3*x1901)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1903=IKasin(((x1905.value)*(((((0.3)*sj2*sj3))+x1901+(((-1.0)*cj3*x1901))))));
j0array[0]=((((-1.0)*x1903))+(((-1.0)*x1902)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1903+(((-1.0)*x1902)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
IkReal x1906=(py*sj0);
IkReal x1907=(cj2*pz);
IkReal x1908=((0.045)*sj3);
IkReal x1909=((6.66666666666667)*cj3);
IkReal x1910=(cj0*px);
IkReal x1911=((0.3)*cj3);
j1eval[0]=((((12.2222222222222)*x1910))+(((-6.66666666666667)*sj3*x1907))+(((12.2222222222222)*x1906))+(((-1.0)*x1907))+((cj3*x1907))+((x1906*x1909))+((x1909*x1910))+((sj3*x1910))+((sj3*x1906)));
j1eval[1]=IKsign((((x1910*x1911))+(((0.55)*x1906))+(((0.55)*x1910))+(((-0.045)*x1907))+((x1906*x1908))+((x1908*x1910))+(((0.045)*cj3*x1907))+((x1906*x1911))+(((-0.3)*sj3*x1907))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1912=cj0*cj0;
IkReal x1913=py*py;
IkReal x1914=(sj2*x1912);
IkReal x1915=((((-1.0)*x1913*x1914))+((x1914*(px*px)))+((sj2*(pz*pz)))+(((2.0)*cj0*px*py*sj0*sj2))+((sj2*x1913)));
j1eval[0]=x1915;
j1eval[1]=IKsign(x1915);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1916=(cj3*sj2);
IkReal x1917=((0.045)*sj2);
IkReal x1918=(sj2*sj3);
IkReal x1919=(pz*sj2);
IkReal x1920=((1.0)*sj2);
IkReal x1921=(cj2*py*sj0);
IkReal x1922=(pz*x1918);
IkReal x1923=(cj0*cj2*px);
IkReal x1924=(x1918*x1921);
j1eval[0]=((((-1.0)*x1922))+(((-6.66666666666667)*x1924))+((x1916*x1923))+((x1916*x1921))+(((-12.2222222222222)*x1919))+(((-6.66666666666667)*pz*x1916))+(((-6.66666666666667)*x1918*x1923))+(((-1.0)*x1920*x1923))+(((-1.0)*x1920*x1921)));
j1eval[1]=IKsign(((((0.045)*x1916*x1921))+(((0.045)*x1916*x1923))+(((-1.0)*x1917*x1921))+(((-1.0)*x1917*x1923))+(((-1.0)*pz*sj3*x1917))+(((-0.3)*pz*x1916))+(((-0.3)*x1924))+(((-0.55)*x1919))+(((-0.3)*x1918*x1923))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1925=(cj0*px);
IkReal x1926=(py*sj0);
IkReal x1927=(pp*pz);
IkReal x1928=((0.0254095720202485)*sj3);
IkReal x1929=((0.92038656235619)*pp);
IkReal x1930=((36.2220411120167)*pp);
IkReal x1931=((1.0)*sj3);
IkReal x1932=(pz*sj3);
j1eval[0]=((((7.28153581454315)*x1925))+(((7.28153581454315)*x1926))+(((-3.92556370551481)*pz))+((x1925*x1930))+(((-1.0)*x1925*x1931))+(((-12.2222222222222)*x1932))+((x1926*x1930))+(((-1.0)*x1926*x1931))+(((5.4333061668025)*x1927)));
j1eval[1]=IKsign(((((-0.099746893695352)*pz))+(((0.185020708697653)*x1926))+(((0.185020708697653)*x1925))+(((-1.0)*x1926*x1928))+(((0.138057984353428)*x1927))+(((-1.0)*x1925*x1928))+((x1926*x1929))+((x1925*x1929))+(((-0.310561435803037)*x1932))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1933=(py*sj0);
IkReal x1934=((0.3)*cj3);
IkReal x1935=((0.045)*sj3);
IkReal x1936=(pz*sj3);
IkReal x1937=(cj3*pz);
IkReal x1938=((6.66666666666667)*cj3);
IkReal x1939=(cj0*px);
j1eval[0]=((((12.2222222222222)*x1939))+(((12.2222222222222)*x1933))+(((-1.0)*pz))+x1937+(((-6.66666666666667)*x1936))+((x1933*x1938))+((sj3*x1933))+((sj3*x1939))+((x1938*x1939)));
j1eval[1]=IKsign(((((0.045)*x1937))+(((-0.045)*pz))+(((-0.3)*x1936))+((x1934*x1939))+(((0.55)*x1933))+(((0.55)*x1939))+((x1935*x1939))+((x1933*x1935))+((x1933*x1934))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1940=(cj0*px);
IkReal x1941=((0.310561435803037)*sj3);
IkReal x1942=(pp*pz);
IkReal x1943=(py*sj0);
IkReal x1944=((0.138057984353428)*pp);
IkReal x1945=((12.2222222222222)*sj3);
IkReal x1946=((5.4333061668025)*pp);
IkReal x1947=(pz*sj3);
j1eval[0]=(((x1943*x1945))+(((7.28153581454315)*pz))+(((36.2220411120167)*x1942))+(((-1.0)*x1943*x1946))+(((-1.0)*x1940*x1946))+((x1940*x1945))+(((-1.0)*x1947))+(((3.92556370551481)*x1940))+(((3.92556370551481)*x1943)));
j1eval[1]=IKsign(((((-1.0)*x1943*x1944))+(((-1.0)*x1940*x1944))+((x1940*x1941))+(((0.185020708697653)*pz))+((x1941*x1943))+(((0.099746893695352)*x1943))+(((0.099746893695352)*x1940))+(((-0.0254095720202485)*x1947))+(((0.92038656235619)*x1942))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1948=cj3*cj3;
IkReal x1949=(cj0*px);
IkReal x1950=(cj3*sj3);
IkReal x1951=((0.00621260929590428)*pp);
IkReal x1952=(py*sj0);
IkReal x1953=((0.138057984353428)*pp);
IkReal x1954=((0.0414173953060285)*pp);
IkReal x1955=((0.310561435803037)*sj3);
IkReal x1956=((1.0)*pz);
CheckValue<IkReal> x1957=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1949*x1953))+((x1952*x1955))+(((-0.0254095720202485)*pz*sj3))+(((-1.0)*x1952*x1953))+(((0.185020708697653)*pz))+(((0.099746893695352)*x1949))+(((0.92038656235619)*pp*pz))+(((0.099746893695352)*x1952))+((x1949*x1955)))),-1);
if(!x1957.valid){
continue;
}
CheckValue<IkReal> x1958 = IKatan2WithCheck(IkReal(((-0.000703060285319834)+(((-1.0)*x1949*x1956))+(((-1.0)*x1954))+(((-1.0)*x1952*x1956))+((cj3*x1954))+(((-0.276115968706857)*pp*sj3))+(((-0.00762287160607455)*x1948))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+(((-0.00114343074091118)*x1950)))),IkReal(((-0.097657040957202)+((sj3*x1954))+(pz*pz)+(((-1.0)*cj3*x1951))+(((0.00448861021629084)*cj3))+x1951+(((0.0139752646111367)*x1950))+(((0.0931684307409112)*x1948))+(((-0.0438993327197423)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1957.value)))+(x1958.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1959=IKcos(j1);
IkReal x1960=IKsin(j1);
IkReal x1961=((0.045)*sj3);
IkReal x1962=((0.3)*cj3);
IkReal x1963=(cj0*px);
IkReal x1964=((0.045)*cj3);
IkReal x1965=(py*sj0);
IkReal x1966=((1.0)*x1960);
IkReal x1967=(sj3*x1959);
IkReal x1968=(pz*x1960);
IkReal x1969=(pz*x1959);
IkReal x1970=((0.09)*x1959);
IkReal x1971=((1.1)*x1960);
evalcond[0]=((0.045)+((x1959*x1963))+((x1959*x1965))+(((-1.0)*x1964))+x1968+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-1.0)*x1965*x1966))+(((-1.0)*x1962))+(((-1.0)*x1961))+x1969+(((-1.0)*x1963*x1966)));
evalcond[2]=((((0.099746893695352)*x1960))+(((-0.92038656235619)*pp*x1959))+(((-0.185020708697653)*x1959))+(((0.310561435803037)*sj3*x1960))+pz+(((-0.138057984353428)*pp*x1960))+(((0.0254095720202485)*x1967)));
evalcond[3]=((((-1.0)*x1959*x1964))+(((0.045)*x1959))+x1965+x1963+((x1960*x1962))+((x1960*x1961))+(((0.55)*x1960))+(((0.3)*x1967)));
evalcond[4]=((-0.2125)+(((1.1)*x1969))+(((-1.0)*x1965*x1970))+(((-1.0)*x1965*x1971))+(((-1.0)*pp))+(((-0.09)*x1968))+(((-1.0)*x1963*x1970))+(((-1.0)*x1963*x1971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1972=py*py;
IkReal x1973=cj0*cj0;
IkReal x1974=cj3*cj3;
IkReal x1975=(py*sj0);
IkReal x1976=((0.3)*cj3);
IkReal x1977=((0.045)*sj3);
IkReal x1978=(cj0*px);
IkReal x1979=((0.045)*pz);
IkReal x1980=(cj3*sj3);
CheckValue<IkReal> x1981=IKPowWithIntegerCheck(IKsign((((x1976*x1978))+(((-0.3)*pz*sj3))+((x1975*x1976))+((x1975*x1977))+((cj3*x1979))+(((-1.0)*x1979))+(((0.55)*x1978))+(((0.55)*x1975))+((x1977*x1978)))),-1);
if(!x1981.valid){
continue;
}
CheckValue<IkReal> x1982 = IKatan2WithCheck(IkReal(((0.092025)+((x1972*x1973))+(((-0.027)*x1980))+(((-0.00405)*cj3))+(((-1.0)*x1972))+(((-2.0)*x1975*x1978))+(((0.027)*sj3))+(((-1.0)*x1973*(px*px)))+(((-0.087975)*x1974)))),IkReal(((-0.03825)+(((0.01125)*cj3))+((pz*x1975))+((pz*x1978))+(((-0.167025)*sj3))+(((0.027)*x1974))+(((-0.087975)*x1980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1982.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1981.value)))+(x1982.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1983=IKcos(j1);
IkReal x1984=IKsin(j1);
IkReal x1985=((0.045)*sj3);
IkReal x1986=((0.3)*cj3);
IkReal x1987=(cj0*px);
IkReal x1988=((0.045)*cj3);
IkReal x1989=(py*sj0);
IkReal x1990=((1.0)*x1984);
IkReal x1991=(sj3*x1983);
IkReal x1992=(pz*x1984);
IkReal x1993=(pz*x1983);
IkReal x1994=((0.09)*x1983);
IkReal x1995=((1.1)*x1984);
evalcond[0]=((0.045)+(((-1.0)*x1988))+x1992+(((0.3)*sj3))+((x1983*x1989))+((x1983*x1987)));
evalcond[1]=((-0.55)+(((-1.0)*x1985))+(((-1.0)*x1986))+(((-1.0)*x1989*x1990))+(((-1.0)*x1987*x1990))+x1993);
evalcond[2]=((((-0.92038656235619)*pp*x1983))+(((0.099746893695352)*x1984))+pz+(((-0.185020708697653)*x1983))+(((0.0254095720202485)*x1991))+(((-0.138057984353428)*pp*x1984))+(((0.310561435803037)*sj3*x1984)));
evalcond[3]=(((x1984*x1986))+((x1984*x1985))+(((0.3)*x1991))+(((-1.0)*x1983*x1988))+x1987+x1989+(((0.55)*x1984))+(((0.045)*x1983)));
evalcond[4]=((-0.2125)+(((-0.09)*x1992))+(((-1.0)*x1989*x1995))+(((-1.0)*x1989*x1994))+(((-1.0)*pp))+(((-1.0)*x1987*x1994))+(((-1.0)*x1987*x1995))+(((1.1)*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1996=cj3*cj3;
IkReal x1997=(cj3*sj3);
IkReal x1998=(cj0*px);
IkReal x1999=((0.92038656235619)*pp);
IkReal x2000=((0.0254095720202485)*sj3);
IkReal x2001=(py*sj0);
IkReal x2002=(pp*sj3);
IkReal x2003=(cj3*pp);
CheckValue<IkReal> x2004=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1998*x2000))+(((-0.099746893695352)*pz))+((x1999*x2001))+(((-0.310561435803037)*pz*sj3))+(((0.185020708697653)*x1998))+((x1998*x1999))+(((0.185020708697653)*x2001))+(((-1.0)*x2000*x2001))+(((0.138057984353428)*pp*pz)))),-1);
if(!x2004.valid){
continue;
}
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((-0.0414173953060285)*x2002))+(((-0.276115968706857)*x2003))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.00114343074091118)*x1996))+(((-0.0555062126092959)*cj3))+(((0.00762287160607455)*x1997)))),IkReal(((-0.0688360561435803)+(((0.0414173953060285)*x2003))+(((0.0139752646111367)*x1996))+(((-0.0299240681086056)*cj3))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+((pz*x2001))+(((-0.0931684307409112)*x1997))+(((0.00621260929590428)*x2002))+((pz*x1998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2004.value)))+(x2005.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2006=IKcos(j1);
IkReal x2007=IKsin(j1);
IkReal x2008=((0.045)*sj3);
IkReal x2009=((0.3)*cj3);
IkReal x2010=(cj0*px);
IkReal x2011=((0.045)*cj3);
IkReal x2012=(py*sj0);
IkReal x2013=((1.0)*x2007);
IkReal x2014=(sj3*x2006);
IkReal x2015=(pz*x2007);
IkReal x2016=(pz*x2006);
IkReal x2017=((0.09)*x2006);
IkReal x2018=((1.1)*x2007);
evalcond[0]=((0.045)+(((-1.0)*x2011))+x2015+(((0.3)*sj3))+((x2006*x2012))+((x2006*x2010)));
evalcond[1]=((-0.55)+(((-1.0)*x2010*x2013))+x2016+(((-1.0)*x2009))+(((-1.0)*x2008))+(((-1.0)*x2012*x2013)));
evalcond[2]=((((0.0254095720202485)*x2014))+(((-0.185020708697653)*x2006))+pz+(((-0.92038656235619)*pp*x2006))+(((0.310561435803037)*sj3*x2007))+(((-0.138057984353428)*pp*x2007))+(((0.099746893695352)*x2007)));
evalcond[3]=((((0.55)*x2007))+x2010+x2012+((x2007*x2009))+((x2007*x2008))+(((-1.0)*x2006*x2011))+(((0.045)*x2006))+(((0.3)*x2014)));
evalcond[4]=((-0.2125)+(((1.1)*x2016))+(((-1.0)*x2010*x2017))+(((-1.0)*x2010*x2018))+(((-0.09)*x2015))+(((-1.0)*pp))+(((-1.0)*x2012*x2018))+(((-1.0)*x2012*x2017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2019=cj3*cj3;
IkReal x2020=(cj3*pp);
IkReal x2021=(cj3*sj3);
j1eval[0]=((-9.18019027225125)+(((-2.36212985601739)*cj3))+(((4.26078431372549)*x2019))+x2021+(((-13.0718954248366)*x2020))+(((-1.77098614506927)*sj3))+(((-23.1501456871801)*pp)));
j1eval[1]=IKsign(((-0.198275)+(((0.0215981362172112)*x2021))+(((-0.0510176023930051)*cj3))+(((-0.5)*pp))+(((-0.282328578002761)*x2020))+(((0.092025)*x2019))+(((-0.03825)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2022=(cj0*px);
IkReal x2023=(py*sj0);
IkReal x2024=(pp*pz);
IkReal x2025=((0.0254095720202485)*sj3);
IkReal x2026=((0.92038656235619)*pp);
IkReal x2027=((36.2220411120167)*pp);
IkReal x2028=((1.0)*sj3);
IkReal x2029=(pz*sj3);
j1eval[0]=((((-1.0)*x2022*x2028))+(((-1.0)*x2023*x2028))+(((7.28153581454315)*x2022))+(((7.28153581454315)*x2023))+(((12.2222222222222)*x2029))+((x2022*x2027))+((x2023*x2027))+(((-5.4333061668025)*x2024))+(((3.92556370551481)*pz)));
j1eval[1]=IKsign(((((-1.0)*x2022*x2025))+(((-1.0)*x2023*x2025))+((x2022*x2026))+((x2023*x2026))+(((0.099746893695352)*pz))+(((0.185020708697653)*x2023))+(((0.185020708697653)*x2022))+(((-0.138057984353428)*x2024))+(((0.310561435803037)*x2029))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2030=cj0*cj0;
IkReal x2031=py*py;
IkReal x2032=(x2031+(pz*pz)+(((2.0)*cj0*px*py*sj0))+(((-1.0)*x2030*x2031))+((x2030*(px*px))));
j1eval[0]=x2032;
j1eval[1]=IKsign(x2032);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2033=cj0*cj0;
IkReal x2034=py*py;
IkReal x2035=(pz*sj3);
IkReal x2036=(py*sj0);
IkReal x2037=((0.3)*cj3);
IkReal x2038=((0.045)*sj3);
IkReal x2039=((0.045)*cj3);
IkReal x2040=(cj0*px);
IkReal x2041=((0.3)*sj3);
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(IKsign((x2034+(((2.0)*x2036*x2040))+(((-1.0)*x2033*x2034))+(pz*pz)+((x2033*(px*px))))),-1);
if(!x2042.valid){
continue;
}
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(((((-1.0)*x2036*x2038))+(((-1.0)*x2036*x2037))+(((-1.0)*pz*x2039))+(((0.045)*pz))+(((-0.55)*x2040))+(((0.3)*x2035))+(((-0.55)*x2036))+(((-1.0)*x2037*x2040))+(((-1.0)*x2038*x2040)))),IkReal(((((0.045)*x2040))+(((-1.0)*x2036*x2039))+((x2040*x2041))+(((-1.0)*x2039*x2040))+((pz*x2037))+(((0.045)*x2035))+(((0.045)*x2036))+((x2036*x2041))+(((0.55)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2042.value)))+(x2043.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2044=IKsin(j1);
IkReal x2045=IKcos(j1);
IkReal x2046=((0.045)*sj3);
IkReal x2047=((0.3)*cj3);
IkReal x2048=((0.045)*cj3);
IkReal x2049=(py*sj0);
IkReal x2050=(cj0*px);
IkReal x2051=((1.0)*x2050);
IkReal x2052=(sj3*x2045);
IkReal x2053=((1.0)*x2049);
IkReal x2054=(pz*x2044);
IkReal x2055=(pz*x2045);
IkReal x2056=((0.09)*x2045);
IkReal x2057=((1.1)*x2044);
evalcond[0]=((-0.55)+(((-1.0)*x2044*x2053))+(((-1.0)*x2044*x2051))+(((-1.0)*x2046))+(((-1.0)*x2047))+x2055);
evalcond[1]=((0.045)+(((-1.0)*x2045*x2053))+(((-1.0)*x2045*x2051))+(((-1.0)*x2048))+(((-1.0)*x2054))+(((0.3)*sj3)));
evalcond[2]=((((0.138057984353428)*pp*x2044))+(((-0.92038656235619)*pp*x2045))+(((-0.099746893695352)*x2044))+(((0.0254095720202485)*x2052))+pz+(((-0.185020708697653)*x2045))+(((-0.310561435803037)*sj3*x2044)));
evalcond[3]=(x2049+x2050+(((-0.3)*x2052))+((x2045*x2048))+(((-0.045)*x2045))+((x2044*x2046))+((x2044*x2047))+(((0.55)*x2044)));
evalcond[4]=((-0.2125)+((x2049*x2056))+(((1.1)*x2055))+(((0.09)*x2054))+(((-1.0)*pp))+(((-1.0)*x2049*x2057))+(((-1.0)*x2050*x2057))+((x2050*x2056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2058=cj3*cj3;
IkReal x2059=(cj3*sj3);
IkReal x2060=(cj0*px);
IkReal x2061=((0.92038656235619)*pp);
IkReal x2062=((0.0254095720202485)*sj3);
IkReal x2063=(py*sj0);
IkReal x2064=(pp*sj3);
IkReal x2065=(cj3*pp);
CheckValue<IkReal> x2066=IKPowWithIntegerCheck(IKsign(((((-0.138057984353428)*pp*pz))+(((0.310561435803037)*pz*sj3))+(((0.185020708697653)*x2060))+(((0.185020708697653)*x2063))+(((0.099746893695352)*pz))+((x2060*x2061))+(((-1.0)*x2062*x2063))+((x2061*x2063))+(((-1.0)*x2060*x2062)))),-1);
if(!x2066.valid){
continue;
}
CheckValue<IkReal> x2067 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((-0.00114343074091118)*x2058))+(((-0.276115968706857)*x2065))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((0.00762287160607455)*x2059))+(((-0.0414173953060285)*x2064))+(((-0.0555062126092959)*cj3)))),IkReal(((0.0688360561435803)+(((0.175297399907961)*sj3))+(((-0.0139752646111367)*x2058))+(((0.0931684307409112)*x2059))+((pz*x2063))+((pz*x2060))+(((-0.00621260929590428)*x2064))+(((-0.0414173953060285)*x2065))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2067.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2066.value)))+(x2067.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2068=IKsin(j1);
IkReal x2069=IKcos(j1);
IkReal x2070=((0.045)*sj3);
IkReal x2071=((0.3)*cj3);
IkReal x2072=((0.045)*cj3);
IkReal x2073=(py*sj0);
IkReal x2074=(cj0*px);
IkReal x2075=((1.0)*x2074);
IkReal x2076=(sj3*x2069);
IkReal x2077=((1.0)*x2073);
IkReal x2078=(pz*x2068);
IkReal x2079=(pz*x2069);
IkReal x2080=((0.09)*x2069);
IkReal x2081=((1.1)*x2068);
evalcond[0]=((-0.55)+x2079+(((-1.0)*x2070))+(((-1.0)*x2071))+(((-1.0)*x2068*x2075))+(((-1.0)*x2068*x2077)));
evalcond[1]=((0.045)+(((-1.0)*x2072))+(((-1.0)*x2069*x2075))+(((-1.0)*x2069*x2077))+(((-1.0)*x2078))+(((0.3)*sj3)));
evalcond[2]=((((0.138057984353428)*pp*x2068))+(((-0.92038656235619)*pp*x2069))+(((-0.099746893695352)*x2068))+pz+(((0.0254095720202485)*x2076))+(((-0.185020708697653)*x2069))+(((-0.310561435803037)*sj3*x2068)));
evalcond[3]=(x2073+x2074+((x2069*x2072))+((x2068*x2071))+((x2068*x2070))+(((0.55)*x2068))+(((-0.3)*x2076))+(((-0.045)*x2069)));
evalcond[4]=((-0.2125)+(((0.09)*x2078))+(((-1.0)*x2074*x2081))+((x2074*x2080))+(((-1.0)*x2073*x2081))+(((1.1)*x2079))+((x2073*x2080))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2082=(pz*sj3);
IkReal x2083=(cj0*px);
IkReal x2084=((0.310561435803037)*sj3);
IkReal x2085=((0.92038656235619)*pp);
IkReal x2086=(py*sj0);
IkReal x2087=((0.0254095720202485)*sj3);
IkReal x2088=((0.138057984353428)*pp);
IkReal x2089=((0.045)*pz);
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal((((x2085*x2086))+(((-1.0)*x2089))+(((-1.0)*x2086*x2087))+((x2083*x2085))+(((-0.3)*x2082))+(((-1.0)*x2083*x2087))+(((0.185020708697653)*x2083))+(((0.185020708697653)*x2086))+((cj3*x2089)))),IkReal(((((-0.55)*pz))+(((-0.3)*cj3*pz))+(((-0.099746893695352)*x2083))+(((-0.099746893695352)*x2086))+((x2086*x2088))+(((-1.0)*x2084*x2086))+((x2083*x2088))+(((-1.0)*x2083*x2084))+(((-0.045)*x2082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
CheckValue<IkReal> x2091=IKPowWithIntegerCheck(IKsign(((-0.198275)+(((0.092025)*(cj3*cj3)))+(((-0.0510176023930051)*cj3))+(((-0.282328578002761)*cj3*pp))+(((-0.5)*pp))+(((0.0215981362172112)*cj3*sj3))+(((-0.03825)*sj3)))),-1);
if(!x2091.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2090.value)+(((1.5707963267949)*(x2091.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2092=IKsin(j1);
IkReal x2093=IKcos(j1);
IkReal x2094=((0.045)*sj3);
IkReal x2095=((0.3)*cj3);
IkReal x2096=((0.045)*cj3);
IkReal x2097=(py*sj0);
IkReal x2098=(cj0*px);
IkReal x2099=((1.0)*x2098);
IkReal x2100=(sj3*x2093);
IkReal x2101=((1.0)*x2097);
IkReal x2102=(pz*x2092);
IkReal x2103=(pz*x2093);
IkReal x2104=((0.09)*x2093);
IkReal x2105=((1.1)*x2092);
evalcond[0]=((-0.55)+(((-1.0)*x2094))+(((-1.0)*x2095))+(((-1.0)*x2092*x2101))+x2103+(((-1.0)*x2092*x2099)));
evalcond[1]=((0.045)+(((-1.0)*x2093*x2101))+(((-1.0)*x2096))+(((-1.0)*x2093*x2099))+(((-1.0)*x2102))+(((0.3)*sj3)));
evalcond[2]=((((-0.92038656235619)*pp*x2093))+(((-0.185020708697653)*x2093))+(((0.138057984353428)*pp*x2092))+(((-0.310561435803037)*sj3*x2092))+pz+(((-0.099746893695352)*x2092))+(((0.0254095720202485)*x2100)));
evalcond[3]=((((-0.045)*x2093))+x2097+x2098+(((0.55)*x2092))+(((-0.3)*x2100))+((x2092*x2094))+((x2092*x2095))+((x2093*x2096)));
evalcond[4]=((-0.2125)+((x2098*x2104))+(((1.1)*x2103))+(((-1.0)*x2097*x2105))+(((-1.0)*pp))+(((0.09)*x2102))+((x2097*x2104))+(((-1.0)*x2098*x2105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2106=cj2*cj2;
IkReal x2107=(px*sj0);
IkReal x2108=(cj0*py);
IkReal x2109=(cj2*cj3);
IkReal x2110=((0.3)*sj3);
IkReal x2111=(pz*sj2);
IkReal x2112=((0.55)*cj2);
IkReal x2113=((0.045)*cj2);
IkReal x2114=(cj0*px*sj2);
IkReal x2115=((0.045)*x2106);
IkReal x2116=(py*sj0*sj2);
CheckValue<IkReal> x2117 = IKatan2WithCheck(IkReal((((sj3*x2107*x2113))+(((-1.0)*sj3*x2108*x2113))+((cj0*px*x2111))+((py*sj0*x2111))+((x2107*x2112))+(((0.3)*x2107*x2109))+(((-1.0)*x2108*x2112))+(((-0.3)*x2108*x2109)))),IkReal((((cj3*x2108*x2115))+(((-1.0)*cj3*x2107*x2115))+(((-1.0)*pz*x2111))+((x2107*x2115))+(((-1.0)*x2108*x2115))+((x2106*x2107*x2110))+(((-1.0)*x2106*x2108*x2110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2117.valid){
continue;
}
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign(((((0.045)*x2109*x2114))+(((0.045)*x2109*x2116))+(((-1.0)*cj2*x2110*x2114))+(((-1.0)*cj2*x2110*x2116))+(((-0.045)*sj3*x2111))+(((-0.55)*x2111))+(((-0.3)*cj3*x2111))+(((-1.0)*x2113*x2116))+(((-1.0)*x2113*x2114)))),-1);
if(!x2118.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2117.value)+(((1.5707963267949)*(x2118.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2119=IKsin(j1);
IkReal x2120=IKcos(j1);
IkReal x2121=((0.09)*px);
IkReal x2122=(sj0*sj2);
IkReal x2123=((1.0)*px);
IkReal x2124=((0.045)*cj3);
IkReal x2125=(cj0*sj2);
IkReal x2126=(cj0*px);
IkReal x2127=((1.0)*py);
IkReal x2128=(py*sj0);
IkReal x2129=((0.045)*sj3);
IkReal x2130=((0.3)*cj3);
IkReal x2131=((0.3)*sj3);
IkReal x2132=(cj2*x2120);
IkReal x2133=((0.3)*x2119);
IkReal x2134=(cj0*x2119);
IkReal x2135=((0.045)*x2119);
IkReal x2136=(pz*x2120);
IkReal x2137=(pz*x2119);
evalcond[0]=((-0.55)+(((-1.0)*x2130))+x2136+(((-1.0)*x2129))+(((-1.0)*sj0*x2119*x2127))+(((-1.0)*x2123*x2134)));
evalcond[1]=((((-1.0)*sj2*x2137))+(((-1.0)*x2120*x2123*x2125))+(((-1.0)*x2120*x2122*x2127))+(((-1.0)*cj2*sj0*x2123))+((cj0*cj2*py)));
evalcond[2]=((0.045)+(((-1.0)*x2122*x2123))+x2131+(((-1.0)*x2124))+((x2126*x2132))+((cj2*x2137))+((x2128*x2132))+((py*x2125)));
evalcond[3]=((((-1.0)*x2120*x2129))+(((-0.55)*x2120))+((cj2*x2135))+(((-1.0)*cj2*x2119*x2124))+pz+((cj2*x2119*x2131))+(((-1.0)*x2120*x2130)));
evalcond[4]=(((x2131*x2132))+(((0.045)*x2132))+((x2119*x2130))+(((0.55)*x2119))+x2126+x2128+(((-1.0)*x2124*x2132))+((x2119*x2129)));
evalcond[5]=((-0.2125)+(((-1.0)*cj0*x2121*x2132))+(((1.1)*x2136))+(((-0.09)*x2128*x2132))+(((-1.1)*x2119*x2126))+(((-1.1)*x2119*x2128))+((x2121*x2122))+(((-1.0)*pp))+(((-0.09)*cj2*x2137))+(((-0.09)*py*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2138=cj0*cj0;
IkReal x2139=px*px;
IkReal x2140=py*py;
IkReal x2141=(cj2*pz);
IkReal x2142=(px*sj0);
IkReal x2143=(cj0*py);
IkReal x2144=(cj0*px);
IkReal x2145=(py*sj0);
IkReal x2146=((0.55)*sj2);
IkReal x2147=(cj2*px*py);
IkReal x2148=((0.3)*cj3*sj2);
IkReal x2149=(sj2*x2140);
IkReal x2150=((0.045)*sj2*sj3);
IkReal x2151=(cj0*cj2*sj0);
CheckValue<IkReal> x2152=IKPowWithIntegerCheck(IKsign((x2149+((sj2*(pz*pz)))+((sj2*x2138*x2139))+(((-1.0)*x2138*x2149))+(((2.0)*sj2*x2142*x2143)))),-1);
if(!x2152.valid){
continue;
}
CheckValue<IkReal> x2153 = IKatan2WithCheck(IkReal(((((-1.0)*x2144*x2146))+(((-1.0)*x2144*x2148))+(((-1.0)*x2144*x2150))+(((-1.0)*x2141*x2142))+((x2141*x2143))+(((-1.0)*x2145*x2148))+(((-1.0)*x2145*x2146))+(((-1.0)*x2145*x2150)))),IkReal(((((-1.0)*x2147))+(((2.0)*x2138*x2147))+((x2140*x2151))+((pz*x2150))+(((-1.0)*x2139*x2151))+((pz*x2146))+((pz*x2148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2152.value)))+(x2153.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2154=IKsin(j1);
IkReal x2155=IKcos(j1);
IkReal x2156=((0.09)*px);
IkReal x2157=(sj0*sj2);
IkReal x2158=((1.0)*px);
IkReal x2159=((0.045)*cj3);
IkReal x2160=(cj0*sj2);
IkReal x2161=(cj0*px);
IkReal x2162=((1.0)*py);
IkReal x2163=(py*sj0);
IkReal x2164=((0.045)*sj3);
IkReal x2165=((0.3)*cj3);
IkReal x2166=((0.3)*sj3);
IkReal x2167=(cj2*x2155);
IkReal x2168=((0.3)*x2154);
IkReal x2169=(cj0*x2154);
IkReal x2170=((0.045)*x2154);
IkReal x2171=(pz*x2155);
IkReal x2172=(pz*x2154);
evalcond[0]=((-0.55)+(((-1.0)*sj0*x2154*x2162))+x2171+(((-1.0)*x2158*x2169))+(((-1.0)*x2164))+(((-1.0)*x2165)));
evalcond[1]=((((-1.0)*sj2*x2172))+(((-1.0)*x2155*x2158*x2160))+(((-1.0)*x2155*x2157*x2162))+(((-1.0)*cj2*sj0*x2158))+((cj0*cj2*py)));
evalcond[2]=((0.045)+((cj2*x2172))+x2166+(((-1.0)*x2157*x2158))+((x2161*x2167))+(((-1.0)*x2159))+((py*x2160))+((x2163*x2167)));
evalcond[3]=((((-1.0)*x2155*x2164))+(((-1.0)*x2155*x2165))+(((-1.0)*cj2*x2154*x2159))+(((-0.55)*x2155))+((cj2*x2170))+((cj2*x2154*x2166))+pz);
evalcond[4]=(x2161+x2163+((x2166*x2167))+(((-1.0)*x2159*x2167))+((x2154*x2165))+((x2154*x2164))+(((0.55)*x2154))+(((0.045)*x2167)));
evalcond[5]=((-0.2125)+(((-0.09)*py*x2160))+(((-0.09)*x2163*x2167))+(((-1.0)*cj0*x2156*x2167))+((x2156*x2157))+(((-1.0)*pp))+(((1.1)*x2171))+(((-1.1)*x2154*x2163))+(((-1.1)*x2154*x2161))+(((-0.09)*cj2*x2172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2173=cj3*cj3;
IkReal x2174=(cj2*sj3);
IkReal x2175=(cj0*px);
IkReal x2176=(py*sj0);
IkReal x2177=((0.3)*cj3);
IkReal x2178=(cj2*cj3);
IkReal x2179=((0.045)*pz);
IkReal x2180=((0.045)*sj3);
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*x2179))+(((0.55)*x2176))+(((0.55)*x2175))+((x2176*x2177))+((x2175*x2177))+((x2176*x2180))+((x2175*x2180))+((x2178*x2179))+(((-0.3)*pz*x2174)))),-1);
if(!x2181.valid){
continue;
}
CheckValue<IkReal> x2182 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.0495)*sj3))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.33)*cj3))+(((-0.087975)*x2173)))),IkReal(((((-0.087975)*cj3*x2174))+(((0.027)*cj2*x2173))+(((0.01125)*x2178))+(((-0.167025)*x2174))+(((-0.03825)*cj2))+((pz*x2175))+((pz*x2176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2182.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2181.value)))+(x2182.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2183=IKsin(j1);
IkReal x2184=IKcos(j1);
IkReal x2185=((0.09)*px);
IkReal x2186=(sj0*sj2);
IkReal x2187=((1.0)*px);
IkReal x2188=((0.045)*cj3);
IkReal x2189=(cj0*sj2);
IkReal x2190=(cj0*px);
IkReal x2191=((1.0)*py);
IkReal x2192=(py*sj0);
IkReal x2193=((0.045)*sj3);
IkReal x2194=((0.3)*cj3);
IkReal x2195=((0.3)*sj3);
IkReal x2196=(cj2*x2184);
IkReal x2197=((0.3)*x2183);
IkReal x2198=(cj0*x2183);
IkReal x2199=((0.045)*x2183);
IkReal x2200=(pz*x2184);
IkReal x2201=(pz*x2183);
evalcond[0]=((-0.55)+x2200+(((-1.0)*x2187*x2198))+(((-1.0)*sj0*x2183*x2191))+(((-1.0)*x2194))+(((-1.0)*x2193)));
evalcond[1]=((((-1.0)*x2184*x2186*x2191))+(((-1.0)*sj2*x2201))+(((-1.0)*x2184*x2187*x2189))+(((-1.0)*cj2*sj0*x2187))+((cj0*cj2*py)));
evalcond[2]=((0.045)+((x2192*x2196))+x2195+(((-1.0)*x2186*x2187))+((x2190*x2196))+((cj2*x2201))+(((-1.0)*x2188))+((py*x2189)));
evalcond[3]=(((cj2*x2199))+(((-1.0)*cj2*x2183*x2188))+(((-0.55)*x2184))+((cj2*x2183*x2195))+pz+(((-1.0)*x2184*x2193))+(((-1.0)*x2184*x2194)));
evalcond[4]=((((-1.0)*x2188*x2196))+x2190+x2192+((x2183*x2194))+((x2183*x2193))+(((0.045)*x2196))+(((0.55)*x2183))+((x2195*x2196)));
evalcond[5]=((-0.2125)+(((-0.09)*x2192*x2196))+(((-0.09)*py*x2189))+(((-1.0)*pp))+(((-1.1)*x2183*x2190))+(((-1.1)*x2183*x2192))+(((-1.0)*cj0*x2185*x2196))+(((1.1)*x2200))+((x2185*x2186))+(((-0.09)*cj2*x2201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x167=(cj3*sj2);
IkReal x168=((1.0)*cj2);
IkReal x169=(cj3*sj1);
IkReal x170=(cj1*sj3);
IkReal x171=(sj2*sj3);
IkReal x172=(cj1*cj3);
IkReal x173=(sj1*sj3);
IkReal x174=(sj1*sj2);
IkReal x175=(cj1*sj2);
IkReal x176=((-1.0)*cj0);
IkReal x177=(x173+(((-1.0)*x168*x172)));
IkReal x178=(((sj0*x175))+(((-1.0)*cj0*x168)));
IkReal x179=(((cj2*sj0))+((cj0*x175)));
IkReal x180=(x172+(((-1.0)*x168*x173)));
IkReal x181=(sj0*x177);
IkReal x182=((((-1.0)*x170))+(((-1.0)*x168*x169)));
IkReal x183=((((-1.0)*x169))+(((-1.0)*x168*x170)));
IkReal x184=(((cj0*x177))+((sj0*x167)));
IkReal x185=(x181+(((-1.0)*cj0*x167)));
IkReal x186=(((cj0*x183))+((sj0*x171)));
IkReal x187=(((sj0*x183))+((x171*x176)));
new_r00=(((r00*x184))+((r20*x182))+((r10*x185)));
new_r01=(((r01*x184))+((r11*((x181+((x167*x176))))))+((r21*x182)));
new_r02=(((r12*x185))+((r02*x184))+((r22*x182)));
new_r10=(((r00*x179))+((r20*x174))+((r10*x178)));
new_r11=(((r01*x179))+((r21*x174))+((r11*x178)));
new_r12=(((r22*x174))+((r12*x178))+((r02*x179)));
new_r20=(((r00*x186))+((r20*x180))+((r10*x187)));
new_r21=(((r01*x186))+((r21*x180))+((r11*x187)));
new_r22=(((r12*x187))+((r02*x186))+((r22*x180)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
j4eval[0]=sj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=new_r12;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x188=new_r22*new_r22;
IkReal x189=((16.0)*new_r10);
IkReal x190=((16.0)*new_r01);
IkReal x191=((16.0)*new_r22);
IkReal x192=((8.0)*new_r11);
IkReal x193=((8.0)*new_r00);
IkReal x194=(x188*x189);
IkReal x195=(x188*x190);
j4eval[0]=((IKabs(((((-1.0)*x195))+x190)))+(IKabs(((((-1.0)*x194))+x189)))+(IKabs((((new_r11*x191))+(((16.0)*new_r00))+(((-32.0)*new_r00*x188)))))+(IKabs((((x188*x192))+(((-1.0)*new_r22*x193)))))+(IKabs(((((32.0)*new_r11))+(((-16.0)*new_r11*x188))+(((-1.0)*new_r00*x191)))))+(IKabs(((((-1.0)*x193))+((new_r22*x192)))))+(IKabs(((((-1.0)*x190))+x195)))+(IKabs(((((-1.0)*x189))+x194))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j6]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j4evalpoly[1];
IkReal x196=new_r22*new_r22;
IkReal x197=((16.0)*new_r10);
IkReal x198=(new_r11*new_r22);
IkReal x199=(x196*x197);
IkReal x200=((((8.0)*x198))+(((-8.0)*new_r00)));
op[0]=x200;
op[1]=((((-1.0)*x199))+x197);
op[2]=((((16.0)*new_r00))+(((16.0)*x198))+(((-32.0)*new_r00*x196)));
op[3]=((((-1.0)*x197))+x199);
op[4]=x200;
polyroots4(op,zeror,numroots);
IkReal j4array[4], cj4array[4], sj4array[4], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[4]={true,true,true,true};
_nj4 = 4;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x201=new_r22*new_r22;
IkReal x202=((16.0)*new_r01);
IkReal x203=(new_r00*new_r22);
IkReal x204=((8.0)*x203);
IkReal x205=(new_r11*x201);
IkReal x206=(x201*x202);
IkReal x207=((8.0)*x205);
j4evalpoly[0]=((((htj4*htj4*htj4*htj4)*(((((-1.0)*x204))+x207))))+(((htj4*htj4)*(((((-16.0)*x203))+(((-16.0)*x205))+(((32.0)*new_r11))))))+(((-1.0)*x204))+((htj4*(((((-1.0)*x206))+x202))))+x207+(((htj4*htj4*htj4)*(((((-1.0)*x202))+x206)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j6eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x208=cj4*cj4;
IkReal x209=(cj4*new_r22);
IkReal x210=((-1.0)+x208+(((-1.0)*x208*(new_r22*new_r22))));
j6eval[0]=x210;
j6eval[1]=((IKabs((((new_r00*sj4))+((new_r01*x209)))))+(IKabs((((new_r01*sj4))+(((-1.0)*new_r00*x209))))));
j6eval[2]=IKsign(x210);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=new_r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x211=new_r22*new_r22;
j6eval[0]=(((cj4*x211))+(((-1.0)*cj4)));
j6eval[1]=((((-1.0)*sj4))+((sj4*x211)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x212=IKsin(j6);
IkReal x213=IKcos(j6);
evalcond[0]=x212;
evalcond[1]=((-1.0)*x213);
evalcond[2]=((((-1.0)*x212))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x213))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x214=IKsin(j6);
IkReal x215=IKcos(j6);
evalcond[0]=x214;
evalcond[1]=((-1.0)*x215);
evalcond[2]=((((-1.0)*x214))+new_r00);
evalcond[3]=((((-1.0)*x215))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x216=IKsin(j6);
IkReal x217=IKcos(j6);
evalcond[0]=x216;
evalcond[1]=((-1.0)*x217);
evalcond[2]=((((-1.0)*x216))+new_r10);
evalcond[3]=((((-1.0)*x217))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x218=IKsin(j6);
IkReal x219=IKcos(j6);
evalcond[0]=x218;
evalcond[1]=((-1.0)*x219);
evalcond[2]=((((-1.0)*x218))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x219))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x220=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x220.valid){
continue;
}
if((x220.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x220.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs((cj4+(((-1.0)*gconst0)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
cj4=gconst0;
if( (gconst0) < -1-IKFAST_SINCOS_THRESH || (gconst0) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst0);
CheckValue<IkReal> x221=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x221.valid){
continue;
}
if((x221.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x221.value)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
CheckValue<IkReal> x222=IKPowWithIntegerCheck(gconst0,-1);
if(!x222.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x222.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))))+IKsqr((new_r11*(x222.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))), (new_r11*(x222.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x223=IKcos(j6);
IkReal x224=IKsin(j6);
IkReal x225=((1.0)*x223);
IkReal x226=((1.0)*x224);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x227=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
IkReal x228=((1.0)*x227);
evalcond[0]=x224;
evalcond[1]=((-1.0)*x223);
evalcond[2]=((((-1.0)*gconst0*x225))+new_r11);
evalcond[3]=((((-1.0)*gconst0*x226))+new_r10);
evalcond[4]=(((x223*x227))+new_r01);
evalcond[5]=(((x224*x227))+new_r00);
evalcond[6]=(((gconst0*new_r10))+(((-1.0)*x226))+(((-1.0)*new_r00*x228)));
evalcond[7]=((((-1.0)*new_r01*x228))+((gconst0*new_r11))+(((-1.0)*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x229=IKPowWithIntegerCheck(IKsign(gconst0),-1);
if(!x229.valid){
continue;
}
CheckValue<IkReal> x230 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x230.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x229.value)))+(x230.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x231=IKcos(j6);
IkReal x232=IKsin(j6);
IkReal x233=((1.0)*x231);
IkReal x234=((1.0)*x232);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x235=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
IkReal x236=((1.0)*x235);
evalcond[0]=x232;
evalcond[1]=((-1.0)*x231);
evalcond[2]=((((-1.0)*gconst0*x233))+new_r11);
evalcond[3]=((((-1.0)*gconst0*x234))+new_r10);
evalcond[4]=(new_r01+((x231*x235)));
evalcond[5]=(((x232*x235))+new_r00);
evalcond[6]=((((-1.0)*x234))+((gconst0*new_r10))+(((-1.0)*new_r00*x236)));
evalcond[7]=((((-1.0)*x233))+((gconst0*new_r11))+(((-1.0)*new_r01*x236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x237=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x237.valid){
continue;
}
if((x237.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x237.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst0)))))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))))));
cj4=gconst0;
if( (gconst0) < -1-IKFAST_SINCOS_THRESH || (gconst0) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst0)));
CheckValue<IkReal> x238=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x238.valid){
continue;
}
if((x238.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x238.value)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
CheckValue<IkReal> x239=IKPowWithIntegerCheck(gconst0,-1);
if(!x239.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x239.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))))+IKsqr((new_r11*(x239.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))), (new_r11*(x239.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x240=IKcos(j6);
IkReal x241=IKsin(j6);
IkReal x242=((1.0)*x240);
IkReal x243=((1.0)*x241);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x244=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
evalcond[0]=x241;
evalcond[1]=((-1.0)*x240);
evalcond[2]=((((-1.0)*gconst0*x242))+new_r11);
evalcond[3]=((((-1.0)*gconst0*x243))+new_r10);
evalcond[4]=((((-1.0)*x242*x244))+new_r01);
evalcond[5]=((((-1.0)*x243*x244))+new_r00);
evalcond[6]=(((new_r00*x244))+((gconst0*new_r10))+(((-1.0)*x243)));
evalcond[7]=(((new_r01*x244))+((gconst0*new_r11))+(((-1.0)*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x245=IKPowWithIntegerCheck(IKsign(gconst0),-1);
if(!x245.valid){
continue;
}
CheckValue<IkReal> x246 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x246.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x245.value)))+(x246.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x247=IKcos(j6);
IkReal x248=IKsin(j6);
IkReal x249=((1.0)*x247);
IkReal x250=((1.0)*x248);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x251=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
evalcond[0]=x248;
evalcond[1]=((-1.0)*x247);
evalcond[2]=((((-1.0)*gconst0*x249))+new_r11);
evalcond[3]=((((-1.0)*gconst0*x250))+new_r10);
evalcond[4]=((((-1.0)*x249*x251))+new_r01);
evalcond[5]=((((-1.0)*x250*x251))+new_r00);
evalcond[6]=(((new_r00*x251))+((gconst0*new_r10))+(((-1.0)*x250)));
evalcond[7]=(((new_r01*x251))+((gconst0*new_r11))+(((-1.0)*x249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x252=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x252.valid){
continue;
}
if((x252.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x252.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs((cj4+(((-1.0)*gconst1)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
cj4=gconst1;
if( (gconst1) < -1-IKFAST_SINCOS_THRESH || (gconst1) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst1);
CheckValue<IkReal> x253=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x253.valid){
continue;
}
if((x253.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x253.value);
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
CheckValue<IkReal> x254=IKPowWithIntegerCheck(gconst1,-1);
if(!x254.valid){
continue;
}
if( IKabs((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x254.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))))+IKsqr((new_r11*(x254.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))), (new_r11*(x254.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x255=IKcos(j6);
IkReal x256=IKsin(j6);
IkReal x257=((1.0)*gconst1);
if((((1.0)+(((-1.0)*gconst1*x257)))) < -0.00001)
continue;
IkReal x258=IKsqrt(((1.0)+(((-1.0)*gconst1*x257))));
IkReal x259=((1.0)*x258);
evalcond[0]=x256;
evalcond[1]=((-1.0)*x255);
evalcond[2]=((((-1.0)*x255*x257))+new_r11);
evalcond[3]=((((-1.0)*x256*x257))+new_r10);
evalcond[4]=(new_r01+((x255*x258)));
evalcond[5]=(((x256*x258))+new_r00);
evalcond[6]=(((gconst1*new_r10))+(((-1.0)*new_r00*x259))+(((-1.0)*x256)));
evalcond[7]=((((-1.0)*new_r01*x259))+((gconst1*new_r11))+(((-1.0)*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x260=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x260.valid){
continue;
}
CheckValue<IkReal> x261 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x261.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x260.value)))+(x261.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x262=IKcos(j6);
IkReal x263=IKsin(j6);
IkReal x264=((1.0)*gconst1);
if((((1.0)+(((-1.0)*gconst1*x264)))) < -0.00001)
continue;
IkReal x265=IKsqrt(((1.0)+(((-1.0)*gconst1*x264))));
IkReal x266=((1.0)*x265);
evalcond[0]=x263;
evalcond[1]=((-1.0)*x262);
evalcond[2]=((((-1.0)*x262*x264))+new_r11);
evalcond[3]=((((-1.0)*x263*x264))+new_r10);
evalcond[4]=(((x262*x265))+new_r01);
evalcond[5]=(((x263*x265))+new_r00);
evalcond[6]=((((-1.0)*x263))+((gconst1*new_r10))+(((-1.0)*new_r00*x266)));
evalcond[7]=((((-1.0)*x262))+(((-1.0)*new_r01*x266))+((gconst1*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x267=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x267.valid){
continue;
}
if((x267.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x267.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst1)))))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))));
cj4=gconst1;
if( (gconst1) < -1-IKFAST_SINCOS_THRESH || (gconst1) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst1)));
CheckValue<IkReal> x268=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x268.valid){
continue;
}
if((x268.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x268.value);
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
CheckValue<IkReal> x269=IKPowWithIntegerCheck(gconst1,-1);
if(!x269.valid){
continue;
}
if( IKabs((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x269.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))))+IKsqr((new_r11*(x269.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))), (new_r11*(x269.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x270=IKcos(j6);
IkReal x271=IKsin(j6);
IkReal x272=((1.0)*gconst1);
if((((1.0)+(((-1.0)*gconst1*x272)))) < -0.00001)
continue;
IkReal x273=IKsqrt(((1.0)+(((-1.0)*gconst1*x272))));
IkReal x274=((1.0)*x273);
evalcond[0]=x271;
evalcond[1]=((-1.0)*x270);
evalcond[2]=((((-1.0)*x270*x272))+new_r11);
evalcond[3]=((((-1.0)*x271*x272))+new_r10);
evalcond[4]=((((-1.0)*x270*x274))+new_r01);
evalcond[5]=((((-1.0)*x271*x274))+new_r00);
evalcond[6]=((((-1.0)*x271))+((gconst1*new_r10))+((new_r00*x273)));
evalcond[7]=((((-1.0)*x270))+((gconst1*new_r11))+((new_r01*x273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x275=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x275.valid){
continue;
}
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x275.value)))+(x276.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x277=IKcos(j6);
IkReal x278=IKsin(j6);
IkReal x279=((1.0)*gconst1);
if((((1.0)+(((-1.0)*gconst1*x279)))) < -0.00001)
continue;
IkReal x280=IKsqrt(((1.0)+(((-1.0)*gconst1*x279))));
IkReal x281=((1.0)*x280);
evalcond[0]=x278;
evalcond[1]=((-1.0)*x277);
evalcond[2]=((((-1.0)*x277*x279))+new_r11);
evalcond[3]=((((-1.0)*x278*x279))+new_r10);
evalcond[4]=((((-1.0)*x277*x281))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x278*x281)));
evalcond[6]=((((-1.0)*x278))+((gconst1*new_r10))+((new_r00*x280)));
evalcond[7]=((((-1.0)*x277))+((gconst1*new_r11))+((new_r01*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x282=new_r22*new_r22;
CheckValue<IkReal> x283=IKPowWithIntegerCheck((((cj4*x282))+(((-1.0)*cj4))),-1);
if(!x283.valid){
continue;
}
CheckValue<IkReal> x284=IKPowWithIntegerCheck(((((-1.0)*sj4))+((sj4*x282))),-1);
if(!x284.valid){
continue;
}
if( IKabs(((x283.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x284.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x283.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x284.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x283.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x284.value)*((((new_r10*new_r22))+new_r01))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x285=IKsin(j6);
IkReal x286=IKcos(j6);
IkReal x287=((1.0)*sj4);
IkReal x288=(cj4*new_r01);
IkReal x289=(new_r10*sj4);
IkReal x290=(new_r11*sj4);
IkReal x291=(cj4*new_r00);
IkReal x292=((1.0)*x286);
IkReal x293=(sj4*x285);
IkReal x294=(new_r22*x285);
IkReal x295=((1.0)*x285);
evalcond[0]=(x290+x294+x288);
evalcond[1]=(((new_r22*x290))+x285+((new_r22*x288)));
evalcond[2]=(((cj4*new_r10))+(((-1.0)*x295))+(((-1.0)*new_r00*x287)));
evalcond[3]=(((cj4*new_r11))+(((-1.0)*x292))+(((-1.0)*new_r01*x287)));
evalcond[4]=(((cj4*x294))+new_r01+((sj4*x286)));
evalcond[5]=(x291+x289+(((-1.0)*new_r22*x292)));
evalcond[6]=(x293+new_r00+(((-1.0)*cj4*new_r22*x292)));
evalcond[7]=((((-1.0)*cj4*x292))+((new_r22*x293))+new_r11);
evalcond[8]=((((-1.0)*x292))+((new_r22*x291))+((new_r22*x289)));
evalcond[9]=((((-1.0)*cj4*x295))+(((-1.0)*new_r22*x286*x287))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x296=((1.0)*sj4);
CheckValue<IkReal> x297=IKPowWithIntegerCheck(new_r22,-1);
if(!x297.valid){
continue;
}
if( IKabs(((x297.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x296)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x296))+((cj4*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x297.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x296))))))+IKsqr(((((-1.0)*new_r01*x296))+((cj4*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x297.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x296))))), ((((-1.0)*new_r01*x296))+((cj4*new_r11))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x298=IKsin(j6);
IkReal x299=IKcos(j6);
IkReal x300=((1.0)*sj4);
IkReal x301=(cj4*new_r01);
IkReal x302=(new_r10*sj4);
IkReal x303=(new_r11*sj4);
IkReal x304=(cj4*new_r00);
IkReal x305=((1.0)*x299);
IkReal x306=(sj4*x298);
IkReal x307=(new_r22*x298);
IkReal x308=((1.0)*x298);
evalcond[0]=(x307+x303+x301);
evalcond[1]=(((new_r22*x303))+((new_r22*x301))+x298);
evalcond[2]=(((cj4*new_r10))+(((-1.0)*new_r00*x300))+(((-1.0)*x308)));
evalcond[3]=(((cj4*new_r11))+(((-1.0)*new_r01*x300))+(((-1.0)*x305)));
evalcond[4]=(((sj4*x299))+new_r01+((cj4*x307)));
evalcond[5]=((((-1.0)*new_r22*x305))+x304+x302);
evalcond[6]=((((-1.0)*cj4*new_r22*x305))+x306+new_r00);
evalcond[7]=((((-1.0)*cj4*x305))+((new_r22*x306))+new_r11);
evalcond[8]=(((new_r22*x302))+((new_r22*x304))+(((-1.0)*x305)));
evalcond[9]=((((-1.0)*new_r22*x299*x300))+(((-1.0)*cj4*x308))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x309=cj4*cj4;
IkReal x310=(cj4*new_r22);
CheckValue<IkReal> x311 = IKatan2WithCheck(IkReal((((new_r01*x310))+((new_r00*sj4)))),IkReal(((((-1.0)*new_r00*x310))+((new_r01*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x311.valid){
continue;
}
CheckValue<IkReal> x312=IKPowWithIntegerCheck(IKsign(((-1.0)+x309+(((-1.0)*x309*(new_r22*new_r22))))),-1);
if(!x312.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x311.value)+(((1.5707963267949)*(x312.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x313=IKsin(j6);
IkReal x314=IKcos(j6);
IkReal x315=((1.0)*sj4);
IkReal x316=(cj4*new_r01);
IkReal x317=(new_r10*sj4);
IkReal x318=(new_r11*sj4);
IkReal x319=(cj4*new_r00);
IkReal x320=((1.0)*x314);
IkReal x321=(sj4*x313);
IkReal x322=(new_r22*x313);
IkReal x323=((1.0)*x313);
evalcond[0]=(x322+x318+x316);
evalcond[1]=(x313+((new_r22*x316))+((new_r22*x318)));
evalcond[2]=((((-1.0)*new_r00*x315))+((cj4*new_r10))+(((-1.0)*x323)));
evalcond[3]=(((cj4*new_r11))+(((-1.0)*x320))+(((-1.0)*new_r01*x315)));
evalcond[4]=(((sj4*x314))+((cj4*x322))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x320))+x319+x317);
evalcond[6]=((((-1.0)*cj4*new_r22*x320))+x321+new_r00);
evalcond[7]=(((new_r22*x321))+new_r11+(((-1.0)*cj4*x320)));
evalcond[8]=((((-1.0)*x320))+((new_r22*x317))+((new_r22*x319)));
evalcond[9]=((((-1.0)*new_r22*x314*x315))+new_r10+(((-1.0)*cj4*x323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x325=IKPowWithIntegerCheck(sj5,-1);
if(!x325.valid){
continue;
}
IkReal x324=x325.value;
CheckValue<IkReal> x326=IKPowWithIntegerCheck(new_r12,-1);
if(!x326.valid){
continue;
}
if( IKabs((x324*(x326.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x324)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x324*(x326.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))))+IKsqr((new_r02*x324))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x324*(x326.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))), (new_r02*x324));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x327=IKcos(j4);
IkReal x328=IKsin(j4);
IkReal x329=((1.0)*sj5);
IkReal x330=((1.0)*cj5);
IkReal x331=(new_r12*x328);
IkReal x332=(new_r02*x327);
evalcond[0]=((((-1.0)*x327*x329))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x328*x329)));
evalcond[2]=(((new_r12*x327))+(((-1.0)*new_r02*x328)));
evalcond[3]=((((-1.0)*x329))+x332+x331);
evalcond[4]=((((-1.0)*new_r22*x329))+((cj5*x331))+((cj5*x332)));
evalcond[5]=((((-1.0)*new_r10*x328*x329))+(((-1.0)*new_r00*x327*x329))+(((-1.0)*new_r20*x330)));
evalcond[6]=((((-1.0)*new_r21*x330))+(((-1.0)*new_r11*x328*x329))+(((-1.0)*new_r01*x327*x329)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x330))+(((-1.0)*x329*x331))+(((-1.0)*x329*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
j6eval[1]=IKsign(new_r12);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x333=IKcos(j6);
IkReal x334=((1.0)*(IKsin(j6)));
evalcond[0]=(x333+new_r20);
evalcond[1]=((((-1.0)*x334))+new_r21);
evalcond[2]=((((-1.0)*x334))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x333))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x335=IKsin(j6);
IkReal x336=((1.0)*(IKcos(j6)));
evalcond[0]=(x335+new_r21);
evalcond[1]=((((-1.0)*x336))+new_r20);
evalcond[2]=((((-1.0)*x335))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x336))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r12);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x337=IKsin(j6);
IkReal x338=IKcos(j6);
evalcond[0]=x337;
evalcond[1]=((-1.0)*x338);
evalcond[2]=((((-1.0)*x337))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x338))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x339=IKsin(j6);
IkReal x340=IKcos(j6);
evalcond[0]=x339;
evalcond[1]=((-1.0)*x340);
evalcond[2]=((((-1.0)*x339))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x341=IKsin(j6);
IkReal x342=IKcos(j6);
IkReal x343=((-1.0)*x342);
evalcond[0]=x341;
evalcond[1]=(cj5*x341);
evalcond[2]=x343;
evalcond[3]=(cj5*x343);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x341)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x344=IKPowWithIntegerCheck(cj5,-1);
if(!x344.valid){
continue;
}
if( IKabs(((-1.0)*cj5*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x344.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*new_r11))+IKsqr((new_r10*(x344.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*cj5*new_r11), (new_r10*(x344.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x345=IKsin(j6);
IkReal x346=IKcos(j6);
IkReal x347=((1.0)*x346);
evalcond[0]=(((cj5*x345))+new_r11);
evalcond[1]=(((cj5*new_r11))+x345);
evalcond[2]=((((-1.0)*cj5*x347))+new_r10);
evalcond[3]=((((-1.0)*new_r00))+(((-1.0)*x345)));
evalcond[4]=((((-1.0)*new_r01))+(((-1.0)*x347)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x348 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x348.valid){
continue;
}
CheckValue<IkReal> x349=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x349.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x348.value)+(((1.5707963267949)*(x349.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x350=IKsin(j6);
IkReal x351=IKcos(j6);
IkReal x352=((1.0)*x351);
evalcond[0]=(((cj5*x350))+new_r11);
evalcond[1]=(((cj5*new_r11))+x350);
evalcond[2]=(new_r10+(((-1.0)*cj5*x352)));
evalcond[3]=((((-1.0)*x350))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x352))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x353=IKsin(j6);
IkReal x354=IKcos(j6);
IkReal x355=((-1.0)*x354);
evalcond[0]=x353;
evalcond[1]=(new_r22*x353);
evalcond[2]=x355;
evalcond[3]=(new_r22*x355);
evalcond[4]=((((-1.0)*x353))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x354))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x356=IKPowWithIntegerCheck(new_r12,-1);
if(!x356.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x356.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x356.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x356.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x357=IKsin(j6);
IkReal x358=IKcos(j6);
IkReal x359=((1.0)*sj5);
IkReal x360=((1.0)*x358);
IkReal x361=((1.0)*x357);
evalcond[0]=(new_r20+((new_r12*x358)));
evalcond[1]=(((cj5*x357))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x361))+new_r21);
evalcond[3]=((((-1.0)*cj5*x360))+new_r10);
evalcond[4]=((((-1.0)*x361))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x360))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+x357+(((-1.0)*new_r21*x359)));
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x360))+(((-1.0)*new_r20*x359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x362 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x362.valid){
continue;
}
CheckValue<IkReal> x363=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x363.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x362.value)+(((1.5707963267949)*(x363.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x364=IKsin(j6);
IkReal x365=IKcos(j6);
IkReal x366=((1.0)*sj5);
IkReal x367=((1.0)*x365);
IkReal x368=((1.0)*x364);
evalcond[0]=(new_r20+((new_r12*x365)));
evalcond[1]=(((cj5*x364))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x368))+new_r21);
evalcond[3]=((((-1.0)*cj5*x367))+new_r10);
evalcond[4]=((((-1.0)*x368))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x367))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+x364+(((-1.0)*new_r21*x366)));
evalcond[7]=((((-1.0)*new_r20*x366))+((cj5*new_r10))+(((-1.0)*x367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x369 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x369.valid){
continue;
}
CheckValue<IkReal> x370=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x370.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x369.value)+(((1.5707963267949)*(x370.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x371=IKsin(j6);
IkReal x372=IKcos(j6);
IkReal x373=((1.0)*sj5);
IkReal x374=((1.0)*x372);
IkReal x375=((1.0)*x371);
evalcond[0]=(((new_r12*x372))+new_r20);
evalcond[1]=(((cj5*x371))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x375))+new_r21);
evalcond[3]=((((-1.0)*cj5*x374))+new_r10);
evalcond[4]=((((-1.0)*x375))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x374))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x373))+((cj5*new_r11))+x371);
evalcond[7]=((((-1.0)*new_r20*x373))+((cj5*new_r10))+(((-1.0)*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x376=IKsin(j6);
IkReal x377=IKcos(j6);
CheckValue<IkReal> x382=IKPowWithIntegerCheck(new_r12,-1);
if(!x382.valid){
continue;
}
IkReal x378=x382.value;
IkReal x379=new_r22*new_r22;
IkReal x380=((1.0)*x377);
IkReal x381=(x378*x379);
evalcond[0]=(((new_r12*x376))+new_r21);
evalcond[1]=((((-1.0)*x376))+new_r00);
evalcond[2]=((((-1.0)*x380))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x380))+new_r20);
evalcond[4]=(((cj5*x376))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*cj5*x380))+(((-1.0)*new_r10)));
evalcond[6]=(x376+((new_r12*new_r21))+((new_r21*x381)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*x380))+((new_r20*x381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x383=IKcos(j6);
IkReal x384=IKsin(j6);
IkReal x385=((1.0)*sj4);
IkReal x386=((1.0)*x384);
IkReal x387=((1.0)*x383);
evalcond[0]=(x383+new_r20);
evalcond[1]=((((-1.0)*x386))+new_r21);
evalcond[2]=(((sj4*x383))+new_r01);
evalcond[3]=(((sj4*x384))+new_r00);
evalcond[4]=((((-1.0)*cj4*x387))+new_r11);
evalcond[5]=((((-1.0)*cj4*x386))+new_r10);
evalcond[6]=(((cj4*new_r10))+(((-1.0)*new_r00*x385))+(((-1.0)*x386)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*new_r01*x385))+(((-1.0)*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x388=IKcos(j6);
IkReal x389=IKsin(j6);
IkReal x390=((1.0)*sj4);
IkReal x391=((1.0)*x388);
IkReal x392=((1.0)*x389);
evalcond[0]=(x389+new_r21);
evalcond[1]=((((-1.0)*x391))+new_r20);
evalcond[2]=(((sj4*x388))+new_r01);
evalcond[3]=(((sj4*x389))+new_r00);
evalcond[4]=((((-1.0)*cj4*x391))+new_r11);
evalcond[5]=((((-1.0)*cj4*x392))+new_r10);
evalcond[6]=((((-1.0)*x392))+((cj4*new_r10))+(((-1.0)*new_r00*x390)));
evalcond[7]=((((-1.0)*new_r01*x390))+(((-1.0)*x391))+((cj4*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x393=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x393))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x393))+((cj4*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x393))+(((-1.0)*new_r00*sj4))))+IKsqr(((((-1.0)*sj4*x393))+((cj4*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x393))+(((-1.0)*new_r00*sj4))), ((((-1.0)*sj4*x393))+((cj4*new_r00))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x394=IKsin(j6);
IkReal x395=IKcos(j6);
IkReal x396=((1.0)*sj4);
IkReal x397=((1.0)*x395);
IkReal x398=(sj4*x394);
IkReal x399=(sj4*x395);
IkReal x400=(cj4*x394);
IkReal x401=(cj4*x397);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x394);
evalcond[1]=(x399+x400+new_r01);
evalcond[2]=((((-1.0)*x397))+((cj4*new_r00))+((new_r10*sj4)));
evalcond[3]=((((-1.0)*x394))+((cj4*new_r10))+(((-1.0)*new_r00*x396)));
evalcond[4]=((((-1.0)*new_r01*x396))+(((-1.0)*x397))+((cj4*new_r11)));
evalcond[5]=(x398+new_r00+(((-1.0)*x401)));
evalcond[6]=(x398+new_r11+(((-1.0)*x401)));
evalcond[7]=((((-1.0)*x395*x396))+new_r10+(((-1.0)*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x402=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x402))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x402))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x402))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x402))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x403=IKcos(j6);
IkReal x404=IKsin(j6);
IkReal x405=((1.0)*sj4);
IkReal x406=((1.0)*x404);
IkReal x407=(sj4*x403);
IkReal x408=((1.0)*x403);
IkReal x409=(cj4*x406);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x403);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x406)));
evalcond[2]=(((cj4*x403))+new_r00+((sj4*x404)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x405))+(((-1.0)*x406)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x405))+(((-1.0)*x408)));
evalcond[5]=(x407+new_r01+(((-1.0)*x409)));
evalcond[6]=(x407+new_r10+(((-1.0)*x409)));
evalcond[7]=((((-1.0)*x404*x405))+new_r11+(((-1.0)*cj4*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x410=IKcos(j6);
IkReal x411=IKsin(j6);
IkReal x412=((1.0)*sj5);
IkReal x413=((1.0)*x410);
IkReal x414=((1.0)*x411);
evalcond[0]=(new_r20+((new_r02*x410)));
evalcond[1]=(new_r10+(((-1.0)*x414)));
evalcond[2]=(new_r11+(((-1.0)*x413)));
evalcond[3]=(((cj5*x411))+new_r01);
evalcond[4]=(new_r21+(((-1.0)*new_r02*x414)));
evalcond[5]=((((-1.0)*cj5*x413))+new_r00);
evalcond[6]=(((cj5*new_r01))+x411+(((-1.0)*new_r21*x412)));
evalcond[7]=(((cj5*new_r00))+(((-1.0)*new_r20*x412))+(((-1.0)*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=IKsign(new_r02);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x415=IKcos(j6);
IkReal x416=((1.0)*(IKsin(j6)));
evalcond[0]=(x415+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x416)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x416)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x417=IKsin(j6);
IkReal x418=((1.0)*(IKcos(j6)));
evalcond[0]=(x417+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x418)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x417)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x419=IKsin(j6);
IkReal x420=IKcos(j6);
IkReal x421=((-1.0)*x420);
evalcond[0]=x419;
evalcond[1]=(new_r22*x419);
evalcond[2]=x421;
evalcond[3]=(new_r22*x421);
evalcond[4]=((((-1.0)*new_r10))+(((-1.0)*x419)));
evalcond[5]=((((-1.0)*x420))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x422=IKPowWithIntegerCheck(new_r02,-1);
if(!x422.valid){
continue;
}
CheckValue<IkReal> x423=IKPowWithIntegerCheck(cj5,-1);
if(!x423.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x422.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x423.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x422.value)))+IKsqr(((-1.0)*new_r00*(x423.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x422.value)), ((-1.0)*new_r00*(x423.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x424=IKsin(j6);
IkReal x425=IKcos(j6);
CheckValue<IkReal> x430=IKPowWithIntegerCheck(new_r02,-1);
if(!x430.valid){
continue;
}
IkReal x426=x430.value;
IkReal x427=new_r22*new_r22;
IkReal x428=((1.0)*x425);
IkReal x429=(x426*x427);
evalcond[0]=(new_r21+((new_r02*x424)));
evalcond[1]=((((-1.0)*new_r02*x428))+new_r20);
evalcond[2]=((((-1.0)*x424))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x428))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x424))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x428))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x429))+x424+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x428))+((new_r20*x429))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x431=IKPowWithIntegerCheck(new_r02,-1);
if(!x431.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x431.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x431.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x431.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x432=IKsin(j6);
IkReal x433=IKcos(j6);
CheckValue<IkReal> x438=IKPowWithIntegerCheck(new_r02,-1);
if(!x438.valid){
continue;
}
IkReal x434=x438.value;
IkReal x435=new_r22*new_r22;
IkReal x436=((1.0)*x433);
IkReal x437=(x434*x435);
evalcond[0]=(new_r21+((new_r02*x432)));
evalcond[1]=((((-1.0)*new_r02*x436))+new_r20);
evalcond[2]=((((-1.0)*x432))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x436))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x432))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x436))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x437))+x432+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x436))+((new_r20*x437))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x439 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x439.valid){
continue;
}
CheckValue<IkReal> x440=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x440.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x439.value)+(((1.5707963267949)*(x440.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x441=IKsin(j6);
IkReal x442=IKcos(j6);
CheckValue<IkReal> x447=IKPowWithIntegerCheck(new_r02,-1);
if(!x447.valid){
continue;
}
IkReal x443=x447.value;
IkReal x444=new_r22*new_r22;
IkReal x445=((1.0)*x442);
IkReal x446=(x443*x444);
evalcond[0]=(((new_r02*x441))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x445))+new_r20);
evalcond[2]=((((-1.0)*x441))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x445))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x441))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x445))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x446))+x441+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x445))+((new_r20*x446))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(sj5,-1);
if(!x449.valid){
continue;
}
IkReal x448=x449.value;
CheckValue<IkReal> x450=IKPowWithIntegerCheck(cj4,-1);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451=IKPowWithIntegerCheck(cj5,-1);
if(!x451.valid){
continue;
}
if( IKabs((x448*(x450.value)*(x451.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x448)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x448*(x450.value)*(x451.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x448))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x448*(x450.value)*(x451.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x448));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x452=IKsin(j6);
IkReal x453=IKcos(j6);
IkReal x454=((1.0)*sj5);
IkReal x455=((1.0)*sj4);
IkReal x456=(cj5*sj4);
IkReal x457=(cj4*new_r01);
IkReal x458=(cj4*new_r00);
IkReal x459=((1.0)*x453);
IkReal x460=(cj5*x452);
IkReal x461=((1.0)*x452);
evalcond[0]=(new_r20+((sj5*x453)));
evalcond[1]=((((-1.0)*x452*x454))+new_r21);
evalcond[2]=(((new_r11*sj4))+x457+x460);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x461))+(((-1.0)*new_r00*x455)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x455))+(((-1.0)*x459)));
evalcond[5]=(((cj4*x460))+((sj4*x453))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x459))+x458);
evalcond[7]=((((-1.0)*cj4*cj5*x459))+((sj4*x452))+new_r00);
evalcond[8]=(((x452*x456))+(((-1.0)*cj4*x459))+new_r11);
evalcond[9]=((((-1.0)*cj4*x461))+new_r10+(((-1.0)*cj5*x453*x455)));
evalcond[10]=((((-1.0)*new_r21*x454))+((cj5*x457))+((new_r11*x456))+x452);
evalcond[11]=(((cj5*x458))+((new_r10*x456))+(((-1.0)*new_r20*x454))+(((-1.0)*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x463=IKPowWithIntegerCheck(sj5,-1);
if(!x463.valid){
continue;
}
IkReal x462=x463.value;
CheckValue<IkReal> x464=IKPowWithIntegerCheck(sj4,-1);
if(!x464.valid){
continue;
}
if( IKabs((x462*(x464.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x462)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x462*(x464.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x462))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x462*(x464.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x462));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x465=IKsin(j6);
IkReal x466=IKcos(j6);
IkReal x467=((1.0)*sj5);
IkReal x468=((1.0)*sj4);
IkReal x469=(cj5*sj4);
IkReal x470=(cj4*new_r01);
IkReal x471=(cj4*new_r00);
IkReal x472=((1.0)*x466);
IkReal x473=(cj5*x465);
IkReal x474=((1.0)*x465);
evalcond[0]=(new_r20+((sj5*x466)));
evalcond[1]=((((-1.0)*x465*x467))+new_r21);
evalcond[2]=(((new_r11*sj4))+x470+x473);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x474))+(((-1.0)*new_r00*x468)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x472))+(((-1.0)*new_r01*x468)));
evalcond[5]=(((cj4*x473))+((sj4*x466))+new_r01);
evalcond[6]=((((-1.0)*cj5*x472))+((new_r10*sj4))+x471);
evalcond[7]=((((-1.0)*cj4*cj5*x472))+((sj4*x465))+new_r00);
evalcond[8]=(((x465*x469))+(((-1.0)*cj4*x472))+new_r11);
evalcond[9]=((((-1.0)*cj4*x474))+(((-1.0)*cj5*x466*x468))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x467))+((cj5*x470))+((new_r11*x469))+x465);
evalcond[11]=(((cj5*x471))+((new_r10*x469))+(((-1.0)*new_r20*x467))+(((-1.0)*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x475=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x475.valid){
continue;
}
CheckValue<IkReal> x476 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x476.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x475.value)))+(x476.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x477=IKsin(j6);
IkReal x478=IKcos(j6);
IkReal x479=((1.0)*sj5);
IkReal x480=((1.0)*sj4);
IkReal x481=(cj5*sj4);
IkReal x482=(cj4*new_r01);
IkReal x483=(cj4*new_r00);
IkReal x484=((1.0)*x478);
IkReal x485=(cj5*x477);
IkReal x486=((1.0)*x477);
evalcond[0]=(((sj5*x478))+new_r20);
evalcond[1]=((((-1.0)*x477*x479))+new_r21);
evalcond[2]=(((new_r11*sj4))+x482+x485);
evalcond[3]=((((-1.0)*x486))+(((-1.0)*new_r00*x480))+((cj4*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x480))+(((-1.0)*x484))+((cj4*new_r11)));
evalcond[5]=(((sj4*x478))+((cj4*x485))+new_r01);
evalcond[6]=(((new_r10*sj4))+x483+(((-1.0)*cj5*x484)));
evalcond[7]=(((sj4*x477))+(((-1.0)*cj4*cj5*x484))+new_r00);
evalcond[8]=(new_r11+(((-1.0)*cj4*x484))+((x477*x481)));
evalcond[9]=((((-1.0)*cj5*x478*x480))+new_r10+(((-1.0)*cj4*x486)));
evalcond[10]=((((-1.0)*new_r21*x479))+((new_r11*x481))+((cj5*x482))+x477);
evalcond[11]=((((-1.0)*x484))+((new_r10*x481))+((cj5*x483))+(((-1.0)*new_r20*x479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x487=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x487.valid){
continue;
}
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x487.value)))+(x488.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(new_r20+((sj5*(IKcos(j6)))));
evalcond[1]=((((-1.0)*sj5*(IKsin(j6))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj6;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x489=IKsin(j4);
IkReal x490=IKcos(j4);
IkReal x491=((1.0)*sj5);
IkReal x492=(new_r22*x489);
IkReal x493=(new_r11*x489);
IkReal x494=(new_r02*x490);
IkReal x495=(new_r22*x490);
IkReal x496=(new_r12*x489);
IkReal x497=(new_r10*x489);
IkReal x498=((1.0)*x489);
IkReal x499=(x490*x491);
evalcond[0]=(x489+new_r00);
evalcond[1]=(x495+new_r01);
evalcond[2]=(x492+new_r11);
evalcond[3]=((((-1.0)*x490))+new_r10);
evalcond[4]=((((-1.0)*x499))+new_r02);
evalcond[5]=((((-1.0)*x489*x491))+new_r12);
evalcond[6]=(x497+((new_r00*x490)));
evalcond[7]=((((-1.0)*new_r02*x498))+((new_r12*x490)));
evalcond[8]=((((-1.0)*new_r01*x498))+((new_r11*x490)));
evalcond[9]=(x493+new_r22+((new_r01*x490)));
evalcond[10]=((-1.0)+(((-1.0)*new_r00*x498))+((new_r10*x490)));
evalcond[11]=(((new_r10*x492))+((new_r00*x495)));
evalcond[12]=((((-1.0)*x491))+x496+x494);
evalcond[13]=((((-1.0)*new_r00*x499))+(((-1.0)*x491*x497)));
evalcond[14]=(((new_r12*x492))+((new_r22*x494))+(((-1.0)*new_r22*x491)));
evalcond[15]=((((-1.0)*new_r01*x499))+(((-1.0)*cj5*new_r21))+(((-1.0)*x491*x493)));
evalcond[16]=((1.0)+(((-1.0)*sj5*x491))+((new_r11*x492))+((new_r01*x495)));
evalcond[17]=((1.0)+(((-1.0)*x491*x494))+(((-1.0)*x491*x496))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x500=IKcos(j4);
IkReal x501=IKsin(j4);
IkReal x502=(new_r22*sj5);
IkReal x503=((1.0)*sj5);
IkReal x504=((1.0)*x500);
IkReal x505=(new_r22*x501);
IkReal x506=(new_r11*x501);
IkReal x507=(new_r02*x500);
IkReal x508=(new_r01*x500);
IkReal x509=(new_r12*x501);
IkReal x510=((1.0)*x501);
IkReal x511=(new_r10*x501);
IkReal x512=(new_r00*x500);
evalcond[0]=(x500+new_r10);
evalcond[1]=(new_r00+(((-1.0)*x510)));
evalcond[2]=(new_r02+(((-1.0)*x500*x503)));
evalcond[3]=((((-1.0)*x501*x503))+new_r12);
evalcond[4]=(new_r01+(((-1.0)*new_r22*x504)));
evalcond[5]=(new_r11+(((-1.0)*x505)));
evalcond[6]=(x512+x511);
evalcond[7]=(((new_r12*x500))+(((-1.0)*new_r02*x510)));
evalcond[8]=(((new_r11*x500))+(((-1.0)*new_r01*x510)));
evalcond[9]=((1.0)+((new_r10*x500))+(((-1.0)*new_r00*x510)));
evalcond[10]=(((new_r10*x505))+((new_r22*x512)));
evalcond[11]=((((-1.0)*x503))+x509+x507);
evalcond[12]=((((-1.0)*new_r22))+x508+x506);
evalcond[13]=((((-1.0)*x503*x511))+(((-1.0)*x503*x512)));
evalcond[14]=(((new_r22*x507))+((new_r12*x505))+(((-1.0)*x502)));
evalcond[15]=((-1.0)+((new_r22*x508))+((new_r11*x505))+(sj5*sj5));
evalcond[16]=((((-1.0)*x503*x508))+(((-1.0)*x503*x506))+x502);
evalcond[17]=((1.0)+(((-1.0)*x503*x509))+(((-1.0)*x503*x507))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x513=((1.0)*sj6);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x513))+((cj6*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x513))))+IKsqr(((((-1.0)*new_r01*x513))+((cj6*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x513))), ((((-1.0)*new_r01*x513))+((cj6*new_r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x514=IKcos(j4);
IkReal x515=IKsin(j4);
IkReal x516=((1.0)*cj6);
IkReal x517=(sj6*x515);
IkReal x518=(cj6*x515);
IkReal x519=(sj6*x514);
IkReal x520=((1.0)*x515);
IkReal x521=(x514*x516);
evalcond[0]=(((new_r01*x514))+((new_r11*x515))+sj6);
evalcond[1]=(x519+x518+new_r01);
evalcond[2]=((((-1.0)*x521))+x517+new_r00);
evalcond[3]=((((-1.0)*x521))+x517+new_r11);
evalcond[4]=(((new_r00*x514))+((new_r10*x515))+(((-1.0)*x516)));
evalcond[5]=((((-1.0)*x519))+(((-1.0)*x515*x516))+new_r10);
evalcond[6]=(((new_r10*x514))+(((-1.0)*sj6))+(((-1.0)*new_r00*x520)));
evalcond[7]=(((new_r11*x514))+(((-1.0)*new_r01*x520))+(((-1.0)*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x522=((1.0)*new_r00);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj6))+(((-1.0)*cj6*x522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x522))))+IKsqr((((new_r01*sj6))+(((-1.0)*cj6*x522))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x522))), (((new_r01*sj6))+(((-1.0)*cj6*x522))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x523=IKsin(j4);
IkReal x524=IKcos(j4);
IkReal x525=((1.0)*sj6);
IkReal x526=(cj6*x523);
IkReal x527=(cj6*x524);
IkReal x528=((1.0)*x523);
IkReal x529=(x524*x525);
evalcond[0]=(cj6+((new_r10*x523))+((new_r00*x524)));
evalcond[1]=(x527+((sj6*x523))+new_r00);
evalcond[2]=((((-1.0)*x529))+x526+new_r01);
evalcond[3]=((((-1.0)*x529))+x526+new_r10);
evalcond[4]=(((new_r01*x524))+((new_r11*x523))+(((-1.0)*x525)));
evalcond[5]=((((-1.0)*x523*x525))+(((-1.0)*x527))+new_r11);
evalcond[6]=((((-1.0)*new_r00*x528))+(((-1.0)*x525))+((new_r10*x524)));
evalcond[7]=(((new_r11*x524))+(((-1.0)*new_r01*x528))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x531 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x531.valid){
continue;
}
IkReal x530=x531.value;
j4array[0]=((-1.0)*x530);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x530)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x532=IKcos(j4);
IkReal x533=IKsin(j4);
IkReal x534=(new_r00*x532);
IkReal x535=(new_r10*x533);
IkReal x536=((1.0)*x533);
evalcond[0]=(((new_r01*x532))+((new_r11*x533)));
evalcond[1]=(x535+x534);
evalcond[2]=((((-1.0)*new_r00*x536))+((new_r10*x532)));
evalcond[3]=(((new_r11*x532))+(((-1.0)*new_r01*x536)));
evalcond[4]=(((new_r22*x535))+((new_r22*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
IkReal x537=x538.value;
j4array[0]=((-1.0)*x537);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x537)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x539=IKcos(j4);
IkReal x540=IKsin(j4);
IkReal x541=(new_r01*x539);
IkReal x542=(new_r11*x540);
IkReal x543=((1.0)*x540);
evalcond[0]=(x541+x542);
evalcond[1]=((((-1.0)*new_r00*x543))+((new_r10*x539)));
evalcond[2]=(((new_r11*x539))+(((-1.0)*new_r01*x543)));
evalcond[3]=(((new_r22*x542))+((new_r22*x541)));
evalcond[4]=(((new_r00*new_r22*x539))+((new_r10*new_r22*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x545.valid){
continue;
}
IkReal x544=x545.value;
j4array[0]=((-1.0)*x544);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x544)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x546=IKcos(j4);
IkReal x547=IKsin(j4);
IkReal x548=(new_r00*x546);
IkReal x549=(new_r22*x547);
IkReal x550=((1.0)*x547);
evalcond[0]=(((new_r10*x547))+x548);
evalcond[1]=(((new_r10*x546))+(((-1.0)*new_r00*x550)));
evalcond[2]=((((-1.0)*new_r01*x550))+((new_r11*x546)));
evalcond[3]=(((new_r11*x549))+((new_r01*new_r22*x546)));
evalcond[4]=(((new_r10*x549))+((new_r22*x548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x552=IKPowWithIntegerCheck(sj5,-1);
if(!x552.valid){
continue;
}
IkReal x551=x552.value;
CheckValue<IkReal> x553=IKPowWithIntegerCheck(cj6,-1);
if(!x553.valid){
continue;
}
if( IKabs((x551*(x553.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x551)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x551*(x553.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6))))))+IKsqr((new_r02*x551))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x551*(x553.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6))))), (new_r02*x551));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x554=IKcos(j4);
IkReal x555=IKsin(j4);
IkReal x556=((1.0)*cj6);
IkReal x557=(cj5*sj6);
IkReal x558=((1.0)*cj5);
IkReal x559=((1.0)*sj5);
IkReal x560=((1.0)*x554);
IkReal x561=(cj5*x555);
IkReal x562=(new_r11*x555);
IkReal x563=(cj5*x554);
IkReal x564=(new_r12*x555);
IkReal x565=(new_r10*x555);
IkReal x566=((1.0)*x555);
evalcond[0]=((((-1.0)*x554*x559))+new_r02);
evalcond[1]=((((-1.0)*x555*x559))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x566))+((new_r12*x554)));
evalcond[3]=(((x554*x557))+new_r01+((cj6*x555)));
evalcond[4]=(((new_r02*x554))+(((-1.0)*x559))+x564);
evalcond[5]=(x557+x562+((new_r01*x554)));
evalcond[6]=((((-1.0)*x556*x563))+((sj6*x555))+new_r00);
evalcond[7]=((((-1.0)*x554*x556))+((x555*x557))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x566))+(((-1.0)*sj6))+((new_r10*x554)));
evalcond[9]=(((new_r11*x554))+(((-1.0)*x556))+(((-1.0)*new_r01*x566)));
evalcond[10]=((((-1.0)*cj5*x556))+x565+((new_r00*x554)));
evalcond[11]=((((-1.0)*sj6*x560))+(((-1.0)*x556*x561))+new_r10);
evalcond[12]=((((-1.0)*new_r22*x559))+((new_r02*x563))+((new_r12*x561)));
evalcond[13]=(sj6+(((-1.0)*new_r21*x559))+((new_r01*x563))+((new_r11*x561)));
evalcond[14]=((((-1.0)*new_r00*x554*x559))+(((-1.0)*new_r20*x558))+(((-1.0)*x559*x565)));
evalcond[15]=((((-1.0)*new_r21*x558))+(((-1.0)*new_r01*x554*x559))+(((-1.0)*x559*x562)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x558))+(((-1.0)*new_r02*x554*x559))+(((-1.0)*x559*x564)));
evalcond[17]=(((new_r00*x563))+(((-1.0)*x556))+(((-1.0)*new_r20*x559))+((new_r10*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x567=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x567.valid){
continue;
}
CheckValue<IkReal> x568 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x567.value)))+(x568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x569=IKcos(j4);
IkReal x570=IKsin(j4);
IkReal x571=((1.0)*cj6);
IkReal x572=(cj5*sj6);
IkReal x573=((1.0)*cj5);
IkReal x574=((1.0)*sj5);
IkReal x575=((1.0)*x569);
IkReal x576=(cj5*x570);
IkReal x577=(new_r11*x570);
IkReal x578=(cj5*x569);
IkReal x579=(new_r12*x570);
IkReal x580=(new_r10*x570);
IkReal x581=((1.0)*x570);
evalcond[0]=((((-1.0)*x569*x574))+new_r02);
evalcond[1]=((((-1.0)*x570*x574))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x581))+((new_r12*x569)));
evalcond[3]=(((cj6*x570))+((x569*x572))+new_r01);
evalcond[4]=((((-1.0)*x574))+x579+((new_r02*x569)));
evalcond[5]=(((new_r01*x569))+x577+x572);
evalcond[6]=((((-1.0)*x571*x578))+((sj6*x570))+new_r00);
evalcond[7]=((((-1.0)*x569*x571))+new_r11+((x570*x572)));
evalcond[8]=((((-1.0)*sj6))+((new_r10*x569))+(((-1.0)*new_r00*x581)));
evalcond[9]=((((-1.0)*new_r01*x581))+(((-1.0)*x571))+((new_r11*x569)));
evalcond[10]=(((new_r00*x569))+(((-1.0)*cj5*x571))+x580);
evalcond[11]=((((-1.0)*sj6*x575))+(((-1.0)*x571*x576))+new_r10);
evalcond[12]=(((new_r12*x576))+(((-1.0)*new_r22*x574))+((new_r02*x578)));
evalcond[13]=(sj6+((new_r11*x576))+((new_r01*x578))+(((-1.0)*new_r21*x574)));
evalcond[14]=((((-1.0)*new_r00*x569*x574))+(((-1.0)*new_r20*x573))+(((-1.0)*x574*x580)));
evalcond[15]=((((-1.0)*x574*x577))+(((-1.0)*new_r21*x573))+(((-1.0)*new_r01*x569*x574)));
evalcond[16]=((1.0)+(((-1.0)*new_r02*x569*x574))+(((-1.0)*new_r22*x573))+(((-1.0)*x574*x579)));
evalcond[17]=(((new_r00*x578))+((new_r10*x576))+(((-1.0)*x571))+(((-1.0)*new_r20*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x582=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x582.valid){
continue;
}
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x582.value)))+(x583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x584=IKcos(j4);
IkReal x585=IKsin(j4);
IkReal x586=((1.0)*sj5);
IkReal x587=((1.0)*cj5);
IkReal x588=(new_r12*x585);
IkReal x589=(new_r02*x584);
evalcond[0]=((((-1.0)*x584*x586))+new_r02);
evalcond[1]=((((-1.0)*x585*x586))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x585))+((new_r12*x584)));
evalcond[3]=(x588+x589+(((-1.0)*x586)));
evalcond[4]=((((-1.0)*new_r22*x586))+((cj5*x588))+((cj5*x589)));
evalcond[5]=((((-1.0)*new_r20*x587))+(((-1.0)*new_r10*x585*x586))+(((-1.0)*new_r00*x584*x586)));
evalcond[6]=((((-1.0)*new_r11*x585*x586))+(((-1.0)*new_r21*x587))+(((-1.0)*new_r01*x584*x586)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x587))+(((-1.0)*x586*x588))+(((-1.0)*x586*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
j6eval[1]=IKsign(new_r12);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x590=IKcos(j6);
IkReal x591=((1.0)*(IKsin(j6)));
evalcond[0]=(x590+new_r20);
evalcond[1]=((((-1.0)*x591))+new_r21);
evalcond[2]=((((-1.0)*x591))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x590))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x592=IKsin(j6);
IkReal x593=((1.0)*(IKcos(j6)));
evalcond[0]=(x592+new_r21);
evalcond[1]=((((-1.0)*x593))+new_r20);
evalcond[2]=((((-1.0)*x592))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x593))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r12);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x594=IKsin(j6);
IkReal x595=IKcos(j6);
evalcond[0]=x594;
evalcond[1]=((-1.0)*x595);
evalcond[2]=((((-1.0)*x594))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x595))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x596=IKsin(j6);
IkReal x597=IKcos(j6);
evalcond[0]=x596;
evalcond[1]=((-1.0)*x597);
evalcond[2]=((((-1.0)*x596))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x597))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x598=IKsin(j6);
IkReal x599=IKcos(j6);
IkReal x600=((-1.0)*x599);
evalcond[0]=x598;
evalcond[1]=(cj5*x598);
evalcond[2]=x600;
evalcond[3]=(cj5*x600);
evalcond[4]=((((-1.0)*x598))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x599))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x601=IKPowWithIntegerCheck(cj5,-1);
if(!x601.valid){
continue;
}
if( IKabs(((-1.0)*cj5*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x601.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*new_r11))+IKsqr((new_r10*(x601.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*cj5*new_r11), (new_r10*(x601.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x602=IKsin(j6);
IkReal x603=IKcos(j6);
IkReal x604=((1.0)*x603);
evalcond[0]=(((cj5*x602))+new_r11);
evalcond[1]=(((cj5*new_r11))+x602);
evalcond[2]=((((-1.0)*cj5*x604))+new_r10);
evalcond[3]=((((-1.0)*x602))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x604))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x605 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x605.valid){
continue;
}
CheckValue<IkReal> x606=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x606.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x605.value)+(((1.5707963267949)*(x606.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x607=IKsin(j6);
IkReal x608=IKcos(j6);
IkReal x609=((1.0)*x608);
evalcond[0]=(((cj5*x607))+new_r11);
evalcond[1]=(((cj5*new_r11))+x607);
evalcond[2]=((((-1.0)*cj5*x609))+new_r10);
evalcond[3]=((((-1.0)*x607))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x609))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x610=IKsin(j6);
IkReal x611=IKcos(j6);
IkReal x612=((-1.0)*x611);
evalcond[0]=x610;
evalcond[1]=(new_r22*x610);
evalcond[2]=x612;
evalcond[3]=(new_r22*x612);
evalcond[4]=((((-1.0)*x610))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x611))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x613=IKPowWithIntegerCheck(new_r12,-1);
if(!x613.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x613.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x613.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x613.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x614=IKsin(j6);
IkReal x615=IKcos(j6);
IkReal x616=((1.0)*sj5);
IkReal x617=((1.0)*x615);
IkReal x618=((1.0)*x614);
evalcond[0]=(((new_r12*x615))+new_r20);
evalcond[1]=(new_r11+((cj5*x614)));
evalcond[2]=((((-1.0)*new_r12*x618))+new_r21);
evalcond[3]=((((-1.0)*cj5*x617))+new_r10);
evalcond[4]=((((-1.0)*x618))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x617))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x616))+((cj5*new_r11))+x614);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x617))+(((-1.0)*new_r20*x616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
CheckValue<IkReal> x620=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x620.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x619.value)+(((1.5707963267949)*(x620.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x621=IKsin(j6);
IkReal x622=IKcos(j6);
IkReal x623=((1.0)*sj5);
IkReal x624=((1.0)*x622);
IkReal x625=((1.0)*x621);
evalcond[0]=(new_r20+((new_r12*x622)));
evalcond[1]=(((cj5*x621))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x625))+new_r21);
evalcond[3]=((((-1.0)*cj5*x624))+new_r10);
evalcond[4]=((((-1.0)*x625))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x624))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*new_r21*x623))+x621);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x624))+(((-1.0)*new_r20*x623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
CheckValue<IkReal> x627=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x627.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x626.value)+(((1.5707963267949)*(x627.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x628=IKsin(j6);
IkReal x629=IKcos(j6);
IkReal x630=((1.0)*sj5);
IkReal x631=((1.0)*x629);
IkReal x632=((1.0)*x628);
evalcond[0]=(new_r20+((new_r12*x629)));
evalcond[1]=(((cj5*x628))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x632))+new_r21);
evalcond[3]=((((-1.0)*cj5*x631))+new_r10);
evalcond[4]=((((-1.0)*x632))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x631))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*new_r21*x630))+x628);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x631))+(((-1.0)*new_r20*x630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x633=IKsin(j6);
IkReal x634=IKcos(j6);
CheckValue<IkReal> x639=IKPowWithIntegerCheck(new_r12,-1);
if(!x639.valid){
continue;
}
IkReal x635=x639.value;
IkReal x636=new_r22*new_r22;
IkReal x637=((1.0)*x634);
IkReal x638=(x635*x636);
evalcond[0]=(((new_r12*x633))+new_r21);
evalcond[1]=((((-1.0)*x633))+new_r00);
evalcond[2]=((((-1.0)*x637))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x637))+new_r20);
evalcond[4]=(((cj5*x633))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*cj5*x637))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r12*new_r21))+((new_r21*x638))+x633);
evalcond[7]=((((-1.0)*x637))+((new_r12*new_r20))+((new_r20*x638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x640=IKcos(j6);
IkReal x641=IKsin(j6);
IkReal x642=((1.0)*sj4);
IkReal x643=((1.0)*x641);
IkReal x644=((1.0)*x640);
evalcond[0]=(x640+new_r20);
evalcond[1]=((((-1.0)*x643))+new_r21);
evalcond[2]=(((sj4*x640))+new_r01);
evalcond[3]=(((sj4*x641))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj4*x644)));
evalcond[5]=(new_r10+(((-1.0)*cj4*x643)));
evalcond[6]=(((cj4*new_r10))+(((-1.0)*x643))+(((-1.0)*new_r00*x642)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x644))+(((-1.0)*new_r01*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x645=IKcos(j6);
IkReal x646=IKsin(j6);
IkReal x647=((1.0)*sj4);
IkReal x648=((1.0)*x645);
IkReal x649=((1.0)*x646);
evalcond[0]=(x646+new_r21);
evalcond[1]=((((-1.0)*x648))+new_r20);
evalcond[2]=(((sj4*x645))+new_r01);
evalcond[3]=(((sj4*x646))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj4*x648)));
evalcond[5]=(new_r10+(((-1.0)*cj4*x649)));
evalcond[6]=(((cj4*new_r10))+(((-1.0)*x649))+(((-1.0)*new_r00*x647)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x648))+(((-1.0)*new_r01*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x650=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj4))+(((-1.0)*cj4*x650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x650))+((cj4*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj4))+(((-1.0)*cj4*x650))))+IKsqr(((((-1.0)*sj4*x650))+((cj4*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*sj4))+(((-1.0)*cj4*x650))), ((((-1.0)*sj4*x650))+((cj4*new_r00))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x651=IKsin(j6);
IkReal x652=IKcos(j6);
IkReal x653=((1.0)*sj4);
IkReal x654=((1.0)*x652);
IkReal x655=(sj4*x651);
IkReal x656=(sj4*x652);
IkReal x657=(cj4*x651);
IkReal x658=(cj4*x654);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x651);
evalcond[1]=(x656+x657+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x654)));
evalcond[3]=((((-1.0)*x651))+((cj4*new_r10))+(((-1.0)*new_r00*x653)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x654))+(((-1.0)*new_r01*x653)));
evalcond[5]=((((-1.0)*x658))+x655+new_r00);
evalcond[6]=((((-1.0)*x658))+x655+new_r11);
evalcond[7]=((((-1.0)*x657))+new_r10+(((-1.0)*x652*x653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x659=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj4*x659))+((cj4*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x659))+((cj4*new_r01))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x659))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj4*x659))+((cj4*new_r01))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x659))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x660=IKcos(j6);
IkReal x661=IKsin(j6);
IkReal x662=((1.0)*sj4);
IkReal x663=((1.0)*x661);
IkReal x664=(sj4*x660);
IkReal x665=((1.0)*x660);
IkReal x666=(cj4*x663);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x660);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x663)));
evalcond[2]=(((sj4*x661))+new_r00+((cj4*x660)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x663))+(((-1.0)*new_r00*x662)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x665))+(((-1.0)*new_r01*x662)));
evalcond[5]=((((-1.0)*x666))+x664+new_r01);
evalcond[6]=((((-1.0)*x666))+x664+new_r10);
evalcond[7]=((((-1.0)*x661*x662))+(((-1.0)*cj4*x665))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x667=IKcos(j6);
IkReal x668=IKsin(j6);
IkReal x669=((1.0)*sj5);
IkReal x670=((1.0)*x667);
IkReal x671=((1.0)*x668);
evalcond[0]=(((new_r02*x667))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x671)));
evalcond[2]=(new_r11+(((-1.0)*x670)));
evalcond[3]=(new_r01+((cj5*x668)));
evalcond[4]=((((-1.0)*new_r02*x671))+new_r21);
evalcond[5]=((((-1.0)*cj5*x670))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x669))+((cj5*new_r01))+x668);
evalcond[7]=(((cj5*new_r00))+(((-1.0)*x670))+(((-1.0)*new_r20*x669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=IKsign(new_r02);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x672=IKcos(j6);
IkReal x673=((1.0)*(IKsin(j6)));
evalcond[0]=(x672+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x673)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x673)));
evalcond[3]=((((-1.0)*x672))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x674=IKsin(j6);
IkReal x675=((1.0)*(IKcos(j6)));
evalcond[0]=(x674+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x675)));
evalcond[2]=((((-1.0)*x674))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x676=IKsin(j6);
IkReal x677=IKcos(j6);
IkReal x678=((-1.0)*x677);
evalcond[0]=x676;
evalcond[1]=(new_r22*x676);
evalcond[2]=x678;
evalcond[3]=(new_r22*x678);
evalcond[4]=((((-1.0)*x676))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x677))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x679=IKPowWithIntegerCheck(new_r02,-1);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680=IKPowWithIntegerCheck(cj5,-1);
if(!x680.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x679.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x680.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x679.value)))+IKsqr(((-1.0)*new_r00*(x680.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x679.value)), ((-1.0)*new_r00*(x680.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x681=IKsin(j6);
IkReal x682=IKcos(j6);
CheckValue<IkReal> x687=IKPowWithIntegerCheck(new_r02,-1);
if(!x687.valid){
continue;
}
IkReal x683=x687.value;
IkReal x684=new_r22*new_r22;
IkReal x685=((1.0)*x682);
IkReal x686=(x683*x684);
evalcond[0]=(((new_r02*x681))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x685))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x681)));
evalcond[3]=((((-1.0)*x685))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x681))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x685))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x686))+x681+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x685))+((new_r02*new_r20))+((new_r20*x686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x688=IKPowWithIntegerCheck(new_r02,-1);
if(!x688.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x688.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x688.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x688.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x689=IKsin(j6);
IkReal x690=IKcos(j6);
CheckValue<IkReal> x695=IKPowWithIntegerCheck(new_r02,-1);
if(!x695.valid){
continue;
}
IkReal x691=x695.value;
IkReal x692=new_r22*new_r22;
IkReal x693=((1.0)*x690);
IkReal x694=(x691*x692);
evalcond[0]=(((new_r02*x689))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x693)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x689)));
evalcond[3]=((((-1.0)*x693))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x689))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x693))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x694))+x689+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x694))+(((-1.0)*x693))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x697.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x696.value)+(((1.5707963267949)*(x697.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x698=IKsin(j6);
IkReal x699=IKcos(j6);
CheckValue<IkReal> x704=IKPowWithIntegerCheck(new_r02,-1);
if(!x704.valid){
continue;
}
IkReal x700=x704.value;
IkReal x701=new_r22*new_r22;
IkReal x702=((1.0)*x699);
IkReal x703=(x700*x701);
evalcond[0]=(((new_r02*x698))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x702))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x698)));
evalcond[3]=((((-1.0)*x702))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((cj5*x698)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj5*x702)));
evalcond[6]=(((new_r21*x703))+x698+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x702))+((new_r02*new_r20))+((new_r20*x703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x706=IKPowWithIntegerCheck(sj5,-1);
if(!x706.valid){
continue;
}
IkReal x705=x706.value;
CheckValue<IkReal> x707=IKPowWithIntegerCheck(cj4,-1);
if(!x707.valid){
continue;
}
CheckValue<IkReal> x708=IKPowWithIntegerCheck(cj5,-1);
if(!x708.valid){
continue;
}
if( IKabs((x705*(x707.value)*(x708.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x705)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x705*(x707.value)*(x708.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x705))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x705*(x707.value)*(x708.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x705));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x709=IKsin(j6);
IkReal x710=IKcos(j6);
IkReal x711=((1.0)*sj5);
IkReal x712=((1.0)*sj4);
IkReal x713=(cj5*sj4);
IkReal x714=(cj4*new_r01);
IkReal x715=(cj4*new_r00);
IkReal x716=((1.0)*x710);
IkReal x717=(cj5*x709);
IkReal x718=((1.0)*x709);
evalcond[0]=(((sj5*x710))+new_r20);
evalcond[1]=((((-1.0)*x709*x711))+new_r21);
evalcond[2]=(((new_r11*sj4))+x714+x717);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x718))+(((-1.0)*new_r00*x712)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x716))+(((-1.0)*new_r01*x712)));
evalcond[5]=(((sj4*x710))+((cj4*x717))+new_r01);
evalcond[6]=(((new_r10*sj4))+x715+(((-1.0)*cj5*x716)));
evalcond[7]=((((-1.0)*cj4*cj5*x716))+new_r00+((sj4*x709)));
evalcond[8]=(((x709*x713))+new_r11+(((-1.0)*cj4*x716)));
evalcond[9]=((((-1.0)*cj5*x710*x712))+new_r10+(((-1.0)*cj4*x718)));
evalcond[10]=((((-1.0)*new_r21*x711))+((cj5*x714))+((new_r11*x713))+x709);
evalcond[11]=(((cj5*x715))+(((-1.0)*new_r20*x711))+(((-1.0)*x716))+((new_r10*x713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x720=IKPowWithIntegerCheck(sj5,-1);
if(!x720.valid){
continue;
}
IkReal x719=x720.value;
CheckValue<IkReal> x721=IKPowWithIntegerCheck(sj4,-1);
if(!x721.valid){
continue;
}
if( IKabs((x719*(x721.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x719)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x719*(x721.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x719))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x719*(x721.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x719));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x722=IKsin(j6);
IkReal x723=IKcos(j6);
IkReal x724=((1.0)*sj5);
IkReal x725=((1.0)*sj4);
IkReal x726=(cj5*sj4);
IkReal x727=(cj4*new_r01);
IkReal x728=(cj4*new_r00);
IkReal x729=((1.0)*x723);
IkReal x730=(cj5*x722);
IkReal x731=((1.0)*x722);
evalcond[0]=(((sj5*x723))+new_r20);
evalcond[1]=((((-1.0)*x722*x724))+new_r21);
evalcond[2]=(((new_r11*sj4))+x730+x727);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x731))+(((-1.0)*new_r00*x725)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x729))+(((-1.0)*new_r01*x725)));
evalcond[5]=(((cj4*x730))+new_r01+((sj4*x723)));
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x729))+x728);
evalcond[7]=((((-1.0)*cj4*cj5*x729))+new_r00+((sj4*x722)));
evalcond[8]=(((x722*x726))+(((-1.0)*cj4*x729))+new_r11);
evalcond[9]=((((-1.0)*cj5*x723*x725))+(((-1.0)*cj4*x731))+new_r10);
evalcond[10]=(((cj5*x727))+(((-1.0)*new_r21*x724))+x722+((new_r11*x726)));
evalcond[11]=((((-1.0)*new_r20*x724))+((cj5*x728))+(((-1.0)*x729))+((new_r10*x726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x732=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x732.valid){
continue;
}
CheckValue<IkReal> x733 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x733.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x732.value)))+(x733.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x734=IKsin(j6);
IkReal x735=IKcos(j6);
IkReal x736=((1.0)*sj5);
IkReal x737=((1.0)*sj4);
IkReal x738=(cj5*sj4);
IkReal x739=(cj4*new_r01);
IkReal x740=(cj4*new_r00);
IkReal x741=((1.0)*x735);
IkReal x742=(cj5*x734);
IkReal x743=((1.0)*x734);
evalcond[0]=(((sj5*x735))+new_r20);
evalcond[1]=((((-1.0)*x734*x736))+new_r21);
evalcond[2]=(((new_r11*sj4))+x739+x742);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x737))+(((-1.0)*x743)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x741))+(((-1.0)*new_r01*x737)));
evalcond[5]=(((sj4*x735))+new_r01+((cj4*x742)));
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x741))+x740);
evalcond[7]=((((-1.0)*cj4*cj5*x741))+((sj4*x734))+new_r00);
evalcond[8]=(((x734*x738))+(((-1.0)*cj4*x741))+new_r11);
evalcond[9]=((((-1.0)*cj5*x735*x737))+(((-1.0)*cj4*x743))+new_r10);
evalcond[10]=(((cj5*x739))+(((-1.0)*new_r21*x736))+x734+((new_r11*x738)));
evalcond[11]=((((-1.0)*new_r20*x736))+((cj5*x740))+(((-1.0)*x741))+((new_r10*x738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "783d9d53851319ddb82ac5e4905c0ab1"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
