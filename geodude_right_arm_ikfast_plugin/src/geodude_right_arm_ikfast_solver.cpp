/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-08-21 11:07:02.228091
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKsin(j[3]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKcos(j[5]);
x12=IKsin(j[5]);
x13=IKcos(j[6]);
x14=((0.045)*x3);
x15=((1.0)*x4);
x16=((1.0)*x6);
x17=((0.3)*x3);
x18=((1.0)*x8);
x19=((1.0)*x12);
x20=((0.045)*x4);
x21=((0.55)*x7);
x22=((1.0)*x11);
x23=(x0*x2);
x24=(x0*x4);
x25=(x2*x7);
x26=(x7*x8);
x27=(x1*x2);
x28=(x6*x7);
x29=(x1*x4);
x30=((0.045)*x27);
x31=((0.045)*x23);
x32=(x16*x3);
x33=(x1*x28);
x34=(x0*x15*x3);
x35=(x14*x24);
x36=(x14*x29);
x37=((((-1.0)*x34))+x27);
x38=(((x23*x3))+x29);
x39=(((x27*x3))+(((-1.0)*x0*x15)));
x40=((((-1.0)*x32))+((x26*x4)));
x41=((((-1.0)*x27))+x34);
x42=(((x1*x15*x3))+(((1.0)*x23)));
x43=((-1.0)*x42);
x44=(((x18*x3))+((x15*x28)));
x45=(x31+x36);
x46=(x12*x40);
x47=(x37*x6);
x48=(x43*x6);
x49=(x42*x8);
x50=(((x0*x28))+((x41*x8)));
x51=(x33+x49);
x52=(((x44*x9))+((x25*x5)));
x53=((((-1.0)*x44*x5))+((x25*x9)));
x54=(x12*x50);
x55=(x12*x51);
x56=(((x5*((((x0*x26))+x47))))+((x38*x9)));
x57=(((x5*((((x1*x26))+x48))))+((x39*x9)));
x58=(x11*x56);
x59=(((x9*(((((-1.0)*x47))+(((-1.0)*x0*x26))))))+((x38*x5)));
x60=(((x9*(((((-1.0)*x16*x43))+(((-1.0)*x1*x18*x7))))))+((x39*x5)));
x61=(x11*x57);
eerot[0]=(((x13*((x58+x54))))+((x10*x59)));
eerot[1]=(((x13*x59))+((x10*(((((-1.0)*x19*x50))+(((-1.0)*x22*x56)))))));
eerot[2]=(((x12*x56))+((x11*(((((-1.0)*x18*x41))+(((-1.0)*x0*x16*x7)))))));
eetrans[0]=((0.22)+(((-1.0)*x35))+((x8*(((((-1.0)*x17*x24))+(((0.3)*x27))))))+(((-0.3)*x0*x28))+(((-0.045)*x0*x26))+(((-1.0)*x0*x21))+x30+((x6*(((((-1.0)*x30))+x35)))));
eerot[3]=(((x13*((x55+x61))))+((x10*x60)));
eerot[4]=(((x13*x60))+((x10*(((((-1.0)*x55))+(((-1.0)*x61)))))));
eerot[5]=(((x12*x57))+((x11*(((((-1.0)*x18*x42))+(((-1.0)*x1*x16*x7)))))));
eetrans[1]=((0.14)+(((-1.0)*x45))+(((-1.0)*x1*x21))+(((-0.045)*x1*x26))+(((-0.3)*x33))+((x45*x6))+((x8*(((((-0.3)*x23))+(((-1.0)*x17*x29)))))));
eerot[6]=(((x10*x52))+((x13*((((x11*x53))+x46)))));
eerot[7]=(((x13*x52))+((x10*(((((-1.0)*x19*x40))+(((-1.0)*x22*x53)))))));
eerot[8]=(((x12*x53))+((x11*(((((-1.0)*x15*x26))+x32)))));
eetrans[2]=((0.346)+(((-0.3)*x26*x4))+((x14*x8))+((x17*x6))+(((-1.0)*x20*x7))+((x20*x28))+(((0.55)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,j13,cj13,sj13,htj13,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij11[2], _nj11,_ij12[2], _nj12,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17,_ij13[2], _nj13;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1;  _ij13[0] = -1; _ij13[1] = -1; _nj13 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j13=pfree[0]; cj13=cos(pfree[0]); sj13=sin(pfree[0]), htj13=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.22)+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.14)+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x62=((1.0)*px);
IkReal x63=((1.0)*pz);
IkReal x64=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x64))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x63)));
rxp0_2=((((-1.0)*r10*x62))+((py*r00)));
rxp1_0=((((-1.0)*r21*x64))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x63)));
rxp1_2=((((-1.0)*r11*x62))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x64)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x63)));
rxp2_2=((((-1.0)*r12*x62))+((py*r02)));
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x65=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j14array[0]=((-1.34027003705633)+(((-1.0)*x65)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((1.80132261653346)+x65);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j11eval[2];
j11eval[0]=((px*px)+(py*py));
j11eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x66=cj13*cj13;
IkReal x67=sj14*sj14;
IkReal x68=cj14*cj14;
IkReal x69=((3.0)*cj13);
IkReal x70=((13.3333333333333)*cj14*sj14);
j12eval[0]=((((66.6666666666667)*(IKabs(((-0.55)+(((-0.045)*sj14))+(((-0.3)*cj14)))))))+(IKabs(((((-1.0)*cj14*x69))+(((20.0)*cj13*sj14))+x69))));
j12eval[1]=((149.382716049383)+(((-2.0)*cj14*x66))+(((-1.0)*x66*x70))+(((24.4444444444444)*sj14))+(((13.3333333333333)*sj14*x66))+(((162.962962962963)*cj14))+x70+x66+x67+(((44.4444444444444)*x66*x67))+(((44.4444444444444)*x68))+((x66*x68)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x71=py*py;
IkReal x72=cj13*cj13;
IkReal x73=sj13*sj13;
IkReal x74=py*py*py*py;
IkReal x75=sj13*sj13*sj13*sj13;
IkReal x76=px*px;
IkReal x77=cj13*cj13*cj13*cj13;
IkReal x78=((1.0)*px*py);
IkReal x79=((2.0)*x73);
IkReal x80=(x71*x72);
IkReal x81=(x71*x76);
j11eval[0]=((IKabs(((((-1.0)*x72*x78))+(((-1.0)*x73*x78)))))+(IKabs((x80+((x71*x73))))));
j11eval[1]=(((x77*x81))+((x76*x79*x80))+((x75*x81))+((x72*x74*x79))+((x74*x77))+((x74*x75)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j11, j12]

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
IkReal x82=cj13*cj13;
IkReal x83=py*py;
IkReal x84=sj13*sj13;
IkReal x85=(py*sj13);
IkReal x86=((1.0)*px*py);
IkReal x87=(((x82*x83))+((x83*x84)));
IkReal x88=((((-1.0)*x82*x86))+(((-1.0)*x84*x86)));
CheckValue<IkReal> x91 = IKatan2WithCheck(IkReal(x87),IkReal(x88),IKFAST_ATAN2_MAGTHRESH);
if(!x91.valid){
continue;
}
IkReal x89=((1.0)*(x91.value));
if((((x87*x87)+(x88*x88))) < -0.00001)
continue;
CheckValue<IkReal> x92=IKPowWithIntegerCheck(IKabs(IKsqrt(((x87*x87)+(x88*x88)))),-1);
if(!x92.valid){
continue;
}
if( (((x92.value)*(((((0.045)*x85))+(((0.3)*sj14*x85))+(((-0.045)*cj14*x85)))))) < -1-IKFAST_SINCOS_THRESH || (((x92.value)*(((((0.045)*x85))+(((0.3)*sj14*x85))+(((-0.045)*cj14*x85)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x90=IKasin(((x92.value)*(((((0.045)*x85))+(((0.3)*sj14*x85))+(((-0.045)*cj14*x85))))));
j11array[0]=((((-1.0)*x90))+(((-1.0)*x89)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+x90+(((-1.0)*x89)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x93=px*px;
IkReal x94=sj13*sj13;
IkReal x95=cj13*cj13;
IkReal x96=IKcos(j11);
IkReal x97=IKsin(j11);
IkReal x98=(px*py);
IkReal x99=((0.045)*sj13);
IkReal x100=(px*x99);
IkReal x101=((1.0)*x93);
IkReal x102=((0.3)*sj13*sj14);
evalcond[0]=(((x96*((((x95*x98))+((x94*x98))))))+x100+((px*x102))+(((-1.0)*cj14*x100))+((x97*(((((-1.0)*x101*x94))+(((-1.0)*x101*x95)))))));
evalcond[1]=((((-1.0)*px*x97))+(((-1.0)*cj14*x99))+((py*x96))+x102+x99);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
IkReal x103=(cj13*pz);
IkReal x104=(cj11*px);
IkReal x105=(py*sj11);
IkReal x106=((0.3)*cj14);
IkReal x107=((6.66666666666667)*cj14);
IkReal x108=((0.045)*sj14);
j12eval[0]=((((-6.66666666666667)*sj14*x103))+((sj14*x104))+((sj14*x105))+(((12.2222222222222)*x105))+(((12.2222222222222)*x104))+((x105*x107))+((x104*x107))+((cj14*x103))+(((-1.0)*x103)));
j12eval[1]=IKsign(((((-0.3)*sj14*x103))+(((0.045)*cj14*x103))+((x105*x106))+((x105*x108))+(((0.55)*x104))+(((0.55)*x105))+(((-0.045)*x103))+((x104*x106))+((x104*x108))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x109=cj11*cj11;
IkReal x110=py*py;
IkReal x111=(sj13*x110);
IkReal x112=((((-1.0)*x109*x111))+(((2.0)*cj11*px*py*sj11*sj13))+((sj13*x109*(px*px)))+x111+((sj13*(pz*pz))));
j12eval[0]=x112;
j12eval[1]=IKsign(x112);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x113=((0.045)*cj14);
IkReal x114=(pz*sj13);
IkReal x115=((0.3)*sj14);
IkReal x116=((6.66666666666667)*sj14);
IkReal x117=(cj11*cj13*px*sj13);
IkReal x118=(cj13*py*sj11*sj13);
j12eval[0]=((((-1.0)*x116*x118))+(((-1.0)*x116*x117))+(((-12.2222222222222)*x114))+(((-1.0)*sj14*x114))+(((-6.66666666666667)*cj14*x114))+((cj14*x118))+((cj14*x117))+(((-1.0)*x117))+(((-1.0)*x118)));
j12eval[1]=IKsign(((((-0.55)*x114))+(((-0.045)*sj14*x114))+(((-0.3)*cj14*x114))+((x113*x117))+((x113*x118))+(((-1.0)*x115*x117))+(((-1.0)*x115*x118))+(((-0.045)*x117))+(((-0.045)*x118))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x119=cj14*cj14;
IkReal x120=(cj14*sj14);
IkReal x121=((6.66666666666667)*cj14);
IkReal x122=(cj11*px);
IkReal x123=(py*sj11);
IkReal x124=((0.045)*sj14);
IkReal x125=((0.3)*cj14);
IkReal x126=((0.045)*pz);
IkReal x127=(pz*sj14);
j12eval[0]=(((x121*x122))+((x121*x123))+((sj14*x123))+((sj14*x122))+(((-1.0)*pz))+((cj14*pz))+(((-6.66666666666667)*x127))+(((12.2222222222222)*x123))+(((12.2222222222222)*x122)));
j12eval[1]=IKsign((((x122*x125))+((x122*x124))+(((-1.0)*x126))+((x123*x125))+((x123*x124))+(((-0.3)*x127))+((cj14*x126))+(((0.55)*x123))+(((0.55)*x122))));
j12eval[2]=((IKabs(((-0.304525)+(((-0.027)*x120))+(((-0.0495)*sj14))+(pz*pz)+(((-0.087975)*x119))+(((-0.33)*cj14)))))+(IKabs(((-0.03825)+(((-0.087975)*x120))+((pz*x123))+((pz*x122))+(((-0.167025)*sj14))+(((0.01125)*cj14))+(((0.027)*x119))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x128=cj14*cj14;
IkReal x129=(cj14*sj14);
IkReal x130=(cj14*pz);
IkReal x131=(cj11*px);
IkReal x132=(py*sj11);
IkReal x133=((1.0)*cj14);
IkReal x134=((0.3)*sj14);
IkReal x135=((0.045)*cj14);
IkReal x136=(pz*sj14);
IkReal x137=((6.66666666666667)*sj14);
IkReal x138=((1.0)*pz);
j12eval[0]=((((12.2222222222222)*pz))+(((6.66666666666667)*x130))+x136+x131+x132+((x131*x137))+(((-1.0)*x132*x133))+((x132*x137))+(((-1.0)*x131*x133)));
j12eval[1]=((IKabs(((-0.092025)+(((-0.027)*sj14))+(((0.087975)*x128))+(pz*pz)+(((0.027)*x129))+(((0.00405)*cj14)))))+(IKabs(((-0.03825)+(((-0.087975)*x129))+(((-0.167025)*sj14))+(((0.01125)*cj14))+(((-1.0)*x132*x138))+(((0.027)*x128))+(((-1.0)*x131*x138))))));
j12eval[2]=IKsign(((((0.045)*x136))+(((0.045)*x132))+(((0.045)*x131))+(((0.3)*x130))+((x131*x134))+(((-1.0)*x132*x135))+((x132*x134))+(((0.55)*pz))+(((-1.0)*x131*x135))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=0;
cj13=1.0;
j13=0;
IkReal x139=(cj14*pz);
IkReal x140=(py*sj11);
IkReal x141=((0.045)*sj14);
IkReal x142=(cj11*px);
IkReal x143=((0.3)*cj14);
IkReal x144=(pz*sj14);
IkReal x145=((6.66666666666667)*cj14);
j12eval[0]=(((x140*x145))+((x142*x145))+(((12.2222222222222)*x140))+(((12.2222222222222)*x142))+(((-6.66666666666667)*x144))+x139+(((-1.0)*pz))+((sj14*x140))+((sj14*x142)));
j12eval[1]=IKsign(((((-0.3)*x144))+((x140*x143))+((x140*x141))+(((-0.045)*pz))+((x142*x143))+(((0.045)*x139))+(((0.55)*x140))+(((0.55)*x142))+((x141*x142))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x146=((-1.0)*py);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x146);
rxp0_1=(px*r20);
rxp1_0=(r21*x146);
rxp1_1=(px*r21);
rxp2_0=(r22*x146);
rxp2_1=(px*r22);
j12eval[0]=((((-1.0)*py*sj11))+(((-1.0)*cj11*px)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
evalcond[1]=py;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x669=((-1.0)*py);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x669);
rxp0_1=0;
rxp1_0=(r21*x669);
rxp1_1=0;
rxp2_0=(r22*x669);
rxp2_1=0;
px=0;
j11=0;
sj11=0;
cj11=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x670=((-1.0)*py);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x670);
rxp0_1=0;
rxp1_0=(r21*x670);
rxp1_1=0;
rxp2_0=(r22*x670);
rxp2_1=0;
px=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x671=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
rxp0_2=(r10*x671);
rxp1_2=(r11*x671);
rxp2_2=(r12*x671);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x672=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
rxp0_2=(r10*x672);
rxp1_2=(r11*x672);
rxp2_2=(r12*x672);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x673=py*py;
IkReal x674=cj11*cj11;
IkReal x675=(cj11*px);
IkReal x676=(py*sj11);
IkReal x677=((4400.0)*x674);
CheckValue<IkReal> x678=IKPowWithIntegerCheck(((((-306.0)*x676))+(((-306.0)*x675))),-1);
if(!x678.valid){
continue;
}
if( IKabs(((((-1.17647058823529)*x675))+(((-1.17647058823529)*x676)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x678.value)*(((3179.0)+((x673*x677))+(((-4400.0)*x673))+(((-1.0)*x677*(px*px)))+(((-8800.0)*x675*x676)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.17647058823529)*x675))+(((-1.17647058823529)*x676))))+IKsqr(((x678.value)*(((3179.0)+((x673*x677))+(((-4400.0)*x673))+(((-1.0)*x677*(px*px)))+(((-8800.0)*x675*x676))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.17647058823529)*x675))+(((-1.17647058823529)*x676))), ((x678.value)*(((3179.0)+((x673*x677))+(((-4400.0)*x673))+(((-1.0)*x677*(px*px)))+(((-8800.0)*x675*x676))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x679=IKcos(j12);
IkReal x680=IKsin(j12);
IkReal x681=(py*sj11);
IkReal x682=(cj11*px);
IkReal x683=((1.0)*x680);
IkReal x684=((0.09)*x679);
IkReal x685=((1.1)*x680);
evalcond[0]=((-0.85)*x679);
evalcond[1]=((((0.85)*x680))+x682+x681);
evalcond[2]=(((x679*x682))+((x679*x681)));
evalcond[3]=((-0.85)+(((-1.0)*x681*x683))+(((-1.0)*x682*x683)));
evalcond[4]=((-0.935)+(((-1.0)*x681*x685))+(((-1.0)*x681*x684))+(((-1.0)*x682*x684))+(((-1.0)*x682*x685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x686=cj11*cj11;
IkReal x687=py*py;
IkReal x688=cj14*cj14;
IkReal x689=(cj14*sj14);
IkReal x690=(py*sj11);
IkReal x691=((0.3)*cj14);
IkReal x692=(cj11*px);
IkReal x693=((0.045)*pz);
IkReal x694=((0.045)*sj14);
CheckValue<IkReal> x695 = IKatan2WithCheck(IkReal(((0.092025)+(((-2.0)*x690*x692))+((x686*x687))+(((-0.087975)*x688))+(((-0.027)*x689))+(((-1.0)*x686*(px*px)))+(((0.027)*sj14))+(((-1.0)*x687))+(((-0.00405)*cj14)))),IkReal(((-0.03825)+((pz*x692))+((pz*x690))+(((-0.087975)*x689))+(((-0.167025)*sj14))+(((0.027)*x688))+(((0.01125)*cj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x695.valid){
continue;
}
CheckValue<IkReal> x696=IKPowWithIntegerCheck(IKsign(((((0.55)*x690))+(((0.55)*x692))+((x690*x691))+((x690*x694))+((x691*x692))+((x692*x694))+((cj14*x693))+(((-1.0)*x693))+(((-0.3)*pz*sj14)))),-1);
if(!x696.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x695.value)+(((1.5707963267949)*(x696.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x697=IKcos(j12);
IkReal x698=IKsin(j12);
IkReal x699=((0.045)*sj14);
IkReal x700=(py*sj11);
IkReal x701=(cj11*px);
IkReal x702=((0.045)*cj14);
IkReal x703=((0.3)*sj14);
IkReal x704=((0.3)*cj14);
IkReal x705=(pz*x697);
IkReal x706=((1.0)*x698);
IkReal x707=((0.09)*x697);
IkReal x708=(pz*x698);
IkReal x709=((1.1)*x698);
evalcond[0]=((0.045)+((x697*x700))+((x697*x701))+(((-1.0)*x702))+x708+x703);
evalcond[1]=((-0.55)+(((-1.0)*x704))+(((-1.0)*x699))+x705+(((-1.0)*x701*x706))+(((-1.0)*x700*x706)));
evalcond[2]=((((-1.0)*x697*x699))+(((0.045)*x698))+pz+((x698*x703))+(((-1.0)*x698*x702))+(((-1.0)*x697*x704))+(((-0.55)*x697)));
evalcond[3]=((((0.55)*x698))+(((0.045)*x697))+((x697*x703))+((x698*x704))+x700+x701+(((-1.0)*x697*x702))+((x698*x699)));
evalcond[4]=((-0.2125)+(((1.1)*x705))+(((-1.0)*pp))+(((-0.09)*x708))+(((-1.0)*x701*x709))+(((-1.0)*x701*x707))+(((-1.0)*x700*x709))+(((-1.0)*x700*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x710=cj14*cj14;
IkReal x711=(cj14*sj14);
IkReal x712=((0.3)*sj14);
IkReal x713=(cj11*px);
IkReal x714=(py*sj11);
IkReal x715=((0.045)*cj14);
IkReal x716=((1.0)*pz);
CheckValue<IkReal> x717=IKPowWithIntegerCheck(IKsign(((((-1.0)*x714*x715))+(((0.045)*pz*sj14))+(((0.045)*x714))+(((0.045)*x713))+(((0.3)*cj14*pz))+(((-1.0)*x713*x715))+((x712*x714))+((x712*x713))+(((0.55)*pz)))),-1);
if(!x717.valid){
continue;
}
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(((-0.03825)+(((-1.0)*x714*x716))+(((-0.167025)*sj14))+(((0.01125)*cj14))+(((-1.0)*x713*x716))+(((0.027)*x710))+(((-0.087975)*x711)))),IkReal(((-0.092025)+(((-0.027)*sj14))+(pz*pz)+(((0.00405)*cj14))+(((0.027)*x711))+(((0.087975)*x710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x717.value)))+(x718.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x719=IKcos(j12);
IkReal x720=IKsin(j12);
IkReal x721=((0.045)*sj14);
IkReal x722=(py*sj11);
IkReal x723=(cj11*px);
IkReal x724=((0.045)*cj14);
IkReal x725=((0.3)*sj14);
IkReal x726=((0.3)*cj14);
IkReal x727=(pz*x719);
IkReal x728=((1.0)*x720);
IkReal x729=((0.09)*x719);
IkReal x730=(pz*x720);
IkReal x731=((1.1)*x720);
evalcond[0]=((0.045)+(((-1.0)*x724))+((x719*x722))+((x719*x723))+x730+x725);
evalcond[1]=((-0.55)+(((-1.0)*x723*x728))+(((-1.0)*x722*x728))+(((-1.0)*x721))+(((-1.0)*x726))+x727);
evalcond[2]=(((x720*x725))+(((-0.55)*x719))+pz+(((0.045)*x720))+(((-1.0)*x720*x724))+(((-1.0)*x719*x726))+(((-1.0)*x719*x721)));
evalcond[3]=(((x720*x726))+((x720*x721))+(((0.55)*x720))+(((0.045)*x719))+((x719*x725))+x722+x723+(((-1.0)*x719*x724)));
evalcond[4]=((-0.2125)+(((1.1)*x727))+(((-1.0)*x723*x731))+(((-1.0)*x723*x729))+(((-1.0)*x722*x731))+(((-1.0)*x722*x729))+(((-1.0)*pp))+(((-0.09)*x730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x732=cj14*cj14;
IkReal x733=(cj14*sj14);
IkReal x734=(py*sj11);
IkReal x735=((0.045)*sj14);
IkReal x736=((0.3)*cj14);
IkReal x737=(cj11*px);
IkReal x738=((0.045)*pz);
CheckValue<IkReal> x739=IKPowWithIntegerCheck(IKsign((((cj14*x738))+((x735*x737))+((x736*x737))+((x734*x735))+((x734*x736))+(((0.55)*x737))+(((0.55)*x734))+(((-1.0)*x738))+(((-0.3)*pz*sj14)))),-1);
if(!x739.valid){
continue;
}
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.027)*x733))+(((-0.0495)*sj14))+(pz*pz)+(((-0.087975)*x732))+(((-0.33)*cj14)))),IkReal(((-0.03825)+(((-0.167025)*sj14))+(((0.01125)*cj14))+((pz*x734))+((pz*x737))+(((-0.087975)*x733))+(((0.027)*x732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x739.value)))+(x740.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x741=IKcos(j12);
IkReal x742=IKsin(j12);
IkReal x743=((0.045)*sj14);
IkReal x744=(py*sj11);
IkReal x745=(cj11*px);
IkReal x746=((0.045)*cj14);
IkReal x747=((0.3)*sj14);
IkReal x748=((0.3)*cj14);
IkReal x749=(pz*x741);
IkReal x750=((1.0)*x742);
IkReal x751=((0.09)*x741);
IkReal x752=(pz*x742);
IkReal x753=((1.1)*x742);
evalcond[0]=((0.045)+((x741*x744))+((x741*x745))+x752+x747+(((-1.0)*x746)));
evalcond[1]=((-0.55)+(((-1.0)*x745*x750))+(((-1.0)*x744*x750))+x749+(((-1.0)*x748))+(((-1.0)*x743)));
evalcond[2]=(((x742*x747))+(((-1.0)*x742*x746))+(((0.045)*x742))+pz+(((-1.0)*x741*x748))+(((-1.0)*x741*x743))+(((-0.55)*x741)));
evalcond[3]=(((x742*x748))+((x742*x743))+(((0.045)*x741))+((x741*x747))+(((0.55)*x742))+(((-1.0)*x741*x746))+x744+x745);
evalcond[4]=((-0.2125)+(((-1.0)*x745*x751))+(((-1.0)*x745*x753))+(((-0.09)*x752))+(((-1.0)*pp))+(((-1.0)*x744*x753))+(((-1.0)*x744*x751))+(((1.1)*x749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x754=cj14*cj14;
IkReal x755=(py*sj11);
IkReal x756=((0.045)*sj14);
IkReal x757=(cj14*sj14);
IkReal x758=((0.045)*pz);
IkReal x759=(cj11*px);
IkReal x760=(pz*sj14);
IkReal x761=(cj14*x759);
j12eval[0]=((((-1.0)*cj14*pz))+(((6.66666666666667)*cj14*x755))+pz+((sj14*x759))+((sj14*x755))+(((6.66666666666667)*x761))+(((6.66666666666667)*x760))+(((12.2222222222222)*x755))+(((12.2222222222222)*x759)));
j12eval[1]=IKsign((((x756*x759))+(((-1.0)*cj14*x758))+(((0.55)*x759))+(((0.55)*x755))+(((0.3)*cj14*x755))+((x755*x756))+x758+(((0.3)*x760))+(((0.3)*x761))));
j12eval[2]=((IKabs(((0.03825)+(((0.167025)*sj14))+(((-0.027)*x754))+((pz*x759))+((pz*x755))+(((0.087975)*x757))+(((-0.01125)*cj14)))))+(IKabs(((-0.304525)+(((-0.027)*x757))+(((-0.0495)*sj14))+(pz*pz)+(((-0.087975)*x754))+(((-0.33)*cj14))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x762=cj14*cj14;
IkReal x763=(cj14*sj14);
IkReal x764=(cj14*pz);
IkReal x765=(cj11*px);
IkReal x766=(py*sj11);
IkReal x767=((1.0)*cj14);
IkReal x768=((0.3)*sj14);
IkReal x769=(pz*sj14);
IkReal x770=((0.045)*cj14);
IkReal x771=((6.66666666666667)*sj14);
j12eval[0]=((((-6.66666666666667)*x764))+(((-1.0)*x765*x767))+(((-1.0)*x766*x767))+((x766*x771))+((x765*x771))+(((-1.0)*x769))+(((-12.2222222222222)*pz))+x765+x766);
j12eval[1]=IKsign(((((-0.55)*pz))+(((-0.045)*x769))+(((0.045)*x766))+(((0.045)*x765))+(((-1.0)*x766*x770))+((x765*x768))+(((-0.3)*x764))+(((-1.0)*x765*x770))+((x766*x768))));
j12eval[2]=((IKabs(((-0.03825)+(((-0.167025)*sj14))+(((0.01125)*cj14))+((pz*x766))+((pz*x765))+(((-0.087975)*x763))+(((0.027)*x762)))))+(IKabs(((0.092025)+(((-0.027)*x763))+(((-1.0)*(pz*pz)))+(((-0.087975)*x762))+(((0.027)*sj14))+(((-0.00405)*cj14))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j12eval[0]=((-5.18366013071895)+(((-4.26078431372549)*cj14))+(((-1.0)*sj14)));
j12eval[1]=IKsign(((-0.39655)+(((-0.0765)*sj14))+(((-0.32595)*cj14))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x772=((-1.0)*py);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x772);
rxp0_1=(px*r20);
rxp1_0=(r21*x772);
rxp1_1=(px*r21);
rxp2_0=(r22*x772);
rxp2_1=(px*r22);
j12eval[0]=(((py*sj11))+((cj11*px)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
evalcond[1]=py;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x773=((-1.0)*py);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x773);
rxp0_1=0;
rxp1_0=(r21*x773);
rxp1_1=0;
rxp2_0=(r22*x773);
rxp2_1=0;
px=0;
j11=0;
sj11=0;
cj11=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=py;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x774=((-1.0)*py);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x774);
rxp0_1=0;
rxp1_0=(r21*x774);
rxp1_1=0;
rxp2_0=(r22*x774);
rxp2_1=0;
px=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x775=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
rxp0_2=(r10*x775);
rxp1_2=(r11*x775);
rxp2_2=(r12*x775);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x776=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
rxp0_2=(r10*x776);
rxp1_2=(r11*x776);
rxp2_2=(r12*x776);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x777=py*py;
IkReal x778=cj11*cj11;
IkReal x779=(cj11*px);
IkReal x780=(py*sj11);
IkReal x781=((4400.0)*x778);
CheckValue<IkReal> x782=IKPowWithIntegerCheck(((((306.0)*x779))+(((306.0)*x780))),-1);
if(!x782.valid){
continue;
}
if( IKabs(((((-1.17647058823529)*x780))+(((-1.17647058823529)*x779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x782.value)*(((3179.0)+(((-4400.0)*x777))+(((-1.0)*x781*(px*px)))+(((-8800.0)*x779*x780))+((x777*x781)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.17647058823529)*x780))+(((-1.17647058823529)*x779))))+IKsqr(((x782.value)*(((3179.0)+(((-4400.0)*x777))+(((-1.0)*x781*(px*px)))+(((-8800.0)*x779*x780))+((x777*x781))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.17647058823529)*x780))+(((-1.17647058823529)*x779))), ((x782.value)*(((3179.0)+(((-4400.0)*x777))+(((-1.0)*x781*(px*px)))+(((-8800.0)*x779*x780))+((x777*x781))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x783=IKcos(j12);
IkReal x784=IKsin(j12);
IkReal x785=(py*sj11);
IkReal x786=(cj11*px);
IkReal x787=((1.1)*x784);
IkReal x788=((1.0)*x784);
IkReal x789=(x783*x786);
evalcond[0]=((-0.85)*x783);
evalcond[1]=((((0.85)*x784))+x786+x785);
evalcond[2]=((((-1.0)*x789))+(((-1.0)*x783*x785)));
evalcond[3]=((-0.85)+(((-1.0)*x786*x788))+(((-1.0)*x785*x788)));
evalcond[4]=((-0.935)+(((0.09)*x789))+(((-1.0)*x786*x787))+(((-1.0)*x785*x787))+(((0.09)*x783*x785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x790=((0.3)*sj14);
IkReal x791=(cj11*px);
IkReal x792=(py*sj11);
IkReal x793=((0.045)*pz);
IkReal x794=((0.3)*cj14);
IkReal x795=((0.045)*cj14);
IkReal x796=((0.045)*sj14);
CheckValue<IkReal> x797=IKPowWithIntegerCheck(IKsign(((-0.39655)+(((-0.0765)*sj14))+(((-0.32595)*cj14)))),-1);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal(((((0.55)*x791))+(((0.55)*x792))+(((-1.0)*x793))+((cj14*x793))+((x792*x794))+((x792*x796))+(((-1.0)*pz*x790))+((x791*x794))+((x791*x796)))),IkReal(((((-0.55)*pz))+(((-0.045)*x792))+(((-0.045)*x791))+(((-1.0)*sj14*x793))+(((-1.0)*x790*x791))+(((-1.0)*x790*x792))+((x792*x795))+(((-1.0)*pz*x794))+((x791*x795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x797.value)))+(x798.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x799=IKsin(j12);
IkReal x800=IKcos(j12);
IkReal x801=((0.045)*sj14);
IkReal x802=(cj11*px);
IkReal x803=(py*sj11);
IkReal x804=((0.045)*cj14);
IkReal x805=((0.3)*sj14);
IkReal x806=((0.3)*cj14);
IkReal x807=(pz*x800);
IkReal x808=((1.0)*x799);
IkReal x809=((1.0)*x800);
IkReal x810=((0.09)*x800);
IkReal x811=((1.1)*x799);
evalcond[0]=((-0.55)+(((-1.0)*x803*x808))+x807+(((-1.0)*x801))+(((-1.0)*x806))+(((-1.0)*x802*x808)));
evalcond[1]=((0.045)+(((-1.0)*x803*x809))+x805+(((-1.0)*x804))+(((-1.0)*x802*x809))+(((-1.0)*pz*x808)));
evalcond[2]=((((-0.55)*x800))+(((-1.0)*x799*x805))+(((-0.045)*x799))+(((-1.0)*x800*x801))+(((-1.0)*x800*x806))+((x799*x804))+pz);
evalcond[3]=((((0.55)*x799))+((x800*x804))+(((-1.0)*x800*x805))+((x799*x801))+((x799*x806))+(((-0.045)*x800))+x803+x802);
evalcond[4]=((-0.2125)+(((-1.0)*x803*x811))+(((0.09)*pz*x799))+(((-1.0)*x802*x811))+((x802*x810))+(((-1.0)*pp))+(((1.1)*x807))+((x803*x810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x812=cj14*cj14;
IkReal x813=(cj14*sj14);
IkReal x814=(py*sj11);
IkReal x815=((0.3)*sj14);
IkReal x816=(cj11*px);
IkReal x817=((0.045)*cj14);
CheckValue<IkReal> x818=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+((x815*x816))+(((-1.0)*x816*x817))+((x814*x815))+(((-1.0)*x814*x817))+(((0.045)*x816))+(((0.045)*x814))+(((-0.3)*cj14*pz))+(((-0.045)*pz*sj14)))),-1);
if(!x818.valid){
continue;
}
CheckValue<IkReal> x819 = IKatan2WithCheck(IkReal(((-0.03825)+((pz*x816))+((pz*x814))+(((-0.167025)*sj14))+(((0.01125)*cj14))+(((0.027)*x812))+(((-0.087975)*x813)))),IkReal(((0.092025)+(((-1.0)*(pz*pz)))+(((0.027)*sj14))+(((-0.087975)*x812))+(((-0.027)*x813))+(((-0.00405)*cj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x819.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x818.value)))+(x819.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x820=IKsin(j12);
IkReal x821=IKcos(j12);
IkReal x822=((0.045)*sj14);
IkReal x823=(cj11*px);
IkReal x824=(py*sj11);
IkReal x825=((0.045)*cj14);
IkReal x826=((0.3)*sj14);
IkReal x827=((0.3)*cj14);
IkReal x828=(pz*x821);
IkReal x829=((1.0)*x820);
IkReal x830=((1.0)*x821);
IkReal x831=((0.09)*x821);
IkReal x832=((1.1)*x820);
evalcond[0]=((-0.55)+(((-1.0)*x827))+(((-1.0)*x822))+(((-1.0)*x823*x829))+(((-1.0)*x824*x829))+x828);
evalcond[1]=((0.045)+(((-1.0)*pz*x829))+(((-1.0)*x825))+(((-1.0)*x823*x830))+(((-1.0)*x824*x830))+x826);
evalcond[2]=(((x820*x825))+(((-0.045)*x820))+pz+(((-1.0)*x821*x827))+(((-1.0)*x821*x822))+(((-1.0)*x820*x826))+(((-0.55)*x821)));
evalcond[3]=(((x820*x827))+((x820*x822))+((x821*x825))+(((-0.045)*x821))+(((0.55)*x820))+(((-1.0)*x821*x826))+x823+x824);
evalcond[4]=((-0.2125)+((x824*x831))+(((0.09)*pz*x820))+(((-1.0)*x823*x832))+(((-1.0)*pp))+(((-1.0)*x824*x832))+((x823*x831))+(((1.1)*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x833=cj14*cj14;
IkReal x834=(cj14*sj14);
IkReal x835=(py*sj11);
IkReal x836=(cj11*px);
IkReal x837=((0.3)*cj14);
IkReal x838=((0.045)*pz);
IkReal x839=((0.045)*sj14);
CheckValue<IkReal> x840=IKPowWithIntegerCheck(IKsign(((((0.3)*pz*sj14))+((x835*x839))+((x835*x837))+((x836*x839))+((x836*x837))+(((0.55)*x836))+(((0.55)*x835))+x838+(((-1.0)*cj14*x838)))),-1);
if(!x840.valid){
continue;
}
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.0495)*sj14))+(pz*pz)+(((-0.087975)*x833))+(((-0.027)*x834))+(((-0.33)*cj14)))),IkReal(((0.03825)+(((0.167025)*sj14))+(((0.087975)*x834))+((pz*x836))+((pz*x835))+(((-0.027)*x833))+(((-0.01125)*cj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x840.value)))+(x841.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x842=IKsin(j12);
IkReal x843=IKcos(j12);
IkReal x844=((0.045)*sj14);
IkReal x845=(cj11*px);
IkReal x846=(py*sj11);
IkReal x847=((0.045)*cj14);
IkReal x848=((0.3)*sj14);
IkReal x849=((0.3)*cj14);
IkReal x850=(pz*x843);
IkReal x851=((1.0)*x842);
IkReal x852=((1.0)*x843);
IkReal x853=((0.09)*x843);
IkReal x854=((1.1)*x842);
evalcond[0]=((-0.55)+(((-1.0)*x846*x851))+(((-1.0)*x845*x851))+(((-1.0)*x844))+(((-1.0)*x849))+x850);
evalcond[1]=((0.045)+(((-1.0)*x846*x852))+(((-1.0)*x845*x852))+(((-1.0)*x847))+(((-1.0)*pz*x851))+x848);
evalcond[2]=((((-0.045)*x842))+(((-1.0)*x842*x848))+(((-1.0)*x843*x849))+(((-1.0)*x843*x844))+((x842*x847))+pz+(((-0.55)*x843)));
evalcond[3]=(((x843*x847))+(((-0.045)*x843))+(((-1.0)*x843*x848))+((x842*x844))+((x842*x849))+(((0.55)*x842))+x845+x846);
evalcond[4]=((-0.2125)+(((-1.0)*x846*x854))+((x845*x853))+(((-1.0)*x845*x854))+(((1.1)*x850))+(((0.09)*pz*x842))+(((-1.0)*pp))+((x846*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x855=cj13*cj13;
IkReal x856=(cj11*px);
IkReal x857=(cj14*sj11);
IkReal x858=(pz*sj13);
IkReal x859=(py*sj11);
IkReal x860=((0.55)*cj13);
IkReal x861=(px*sj11);
IkReal x862=(cj11*py);
IkReal x863=((0.3)*cj13);
IkReal x864=((0.045)*cj13*sj13);
IkReal x865=((0.045)*x855);
IkReal x866=((0.045)*cj13*sj14);
IkReal x867=(px*x865);
IkReal x868=(sj13*sj14*x863);
IkReal x869=((0.3)*sj14*x855);
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal(((((-1.0)*cj14*x862*x863))+(((-1.0)*x862*x866))+(((-1.0)*x860*x862))+((x858*x859))+((x856*x858))+((x861*x866))+((x860*x861))+((px*x857*x863)))),IkReal(((((-1.0)*x862*x869))+(((-1.0)*x862*x865))+(((-1.0)*pz*x858))+((x861*x865))+((x861*x869))+((cj14*x862*x865))+(((-1.0)*x857*x867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
CheckValue<IkReal> x871=IKPowWithIntegerCheck(IKsign((((py*x857*x864))+(((-0.55)*x858))+(((-1.0)*x856*x868))+(((-1.0)*x856*x864))+(((-1.0)*x859*x868))+(((-1.0)*x859*x864))+(((-0.3)*cj14*x858))+((cj14*x856*x864))+(((-0.045)*sj14*x858)))),-1);
if(!x871.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x870.value)+(((1.5707963267949)*(x871.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x872=IKsin(j12);
IkReal x873=IKcos(j12);
IkReal x874=((0.09)*cj13);
IkReal x875=(cj11*px);
IkReal x876=((0.045)*sj14);
IkReal x877=((0.3)*sj14);
IkReal x878=((1.0)*sj13);
IkReal x879=(py*sj11);
IkReal x880=(px*sj11);
IkReal x881=((0.045)*cj14);
IkReal x882=((0.09)*sj13);
IkReal x883=(cj11*py);
IkReal x884=((0.3)*cj14);
IkReal x885=(pz*x873);
IkReal x886=(pz*x872);
IkReal x887=(cj13*x873);
IkReal x888=((1.1)*x872);
IkReal x889=((1.0)*x872);
IkReal x890=(cj13*x872);
evalcond[0]=((-0.55)+(((-1.0)*x879*x889))+(((-1.0)*x884))+x885+(((-1.0)*x876))+(((-1.0)*x875*x889)));
evalcond[1]=((((-1.0)*x873*x878*x879))+(((-1.0)*x873*x875*x878))+(((-1.0)*cj13*x880))+((cj13*x883))+(((-1.0)*x878*x886)));
evalcond[2]=((0.045)+((x879*x887))+((sj13*x883))+(((-1.0)*x881))+((cj13*x886))+((x875*x887))+x877+(((-1.0)*x878*x880)));
evalcond[3]=((((-1.0)*x873*x884))+((x877*x890))+(((-1.0)*x873*x876))+(((-1.0)*x881*x890))+pz+(((-0.55)*x873))+(((0.045)*x890)));
evalcond[4]=(((x872*x876))+((x877*x887))+(((0.55)*x872))+(((-1.0)*x881*x887))+(((0.045)*x887))+x879+x875+((x872*x884)));
evalcond[5]=((-0.2125)+(((1.1)*x885))+(((-1.0)*x879*x888))+(((-1.0)*x882*x883))+((x880*x882))+(((-1.0)*pp))+(((-1.0)*x874*x886))+(((-1.0)*x873*x874*x879))+(((-1.0)*x873*x874*x875))+(((-1.0)*x875*x888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x891=cj11*cj11;
IkReal x892=py*py;
IkReal x893=px*px;
IkReal x894=((0.045)*sj14);
IkReal x895=((2.0)*px);
IkReal x896=(pz*sj13);
IkReal x897=((0.3)*cj14);
IkReal x898=(cj13*py);
IkReal x899=(py*sj11*sj13);
IkReal x900=(cj11*px*sj13);
IkReal x901=((1.0)*cj13*sj11);
IkReal x902=(sj13*x892);
CheckValue<IkReal> x903=IKPowWithIntegerCheck(IKsign((((sj13*x891*x893))+(((-1.0)*x891*x902))+((pz*x896))+((cj11*x895*x899))+x902)),-1);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904 = IKatan2WithCheck(IkReal((((cj11*pz*x898))+(((-1.0)*x897*x900))+(((-1.0)*x894*x900))+(((-1.0)*px*pz*x901))+(((-0.55)*x900))+(((-1.0)*x894*x899))+(((-1.0)*x897*x899))+(((-0.55)*x899)))),IkReal((((cj11*cj13*sj11*x892))+((x894*x896))+((x896*x897))+(((0.55)*x896))+((x891*x895*x898))+(((-1.0)*px*x898))+(((-1.0)*cj11*x893*x901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x904.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x903.value)))+(x904.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x905=IKsin(j12);
IkReal x906=IKcos(j12);
IkReal x907=((0.09)*cj13);
IkReal x908=(cj11*px);
IkReal x909=((0.045)*sj14);
IkReal x910=((0.3)*sj14);
IkReal x911=((1.0)*sj13);
IkReal x912=(py*sj11);
IkReal x913=(px*sj11);
IkReal x914=((0.045)*cj14);
IkReal x915=((0.09)*sj13);
IkReal x916=(cj11*py);
IkReal x917=((0.3)*cj14);
IkReal x918=(pz*x906);
IkReal x919=(pz*x905);
IkReal x920=(cj13*x906);
IkReal x921=((1.1)*x905);
IkReal x922=((1.0)*x905);
IkReal x923=(cj13*x905);
evalcond[0]=((-0.55)+(((-1.0)*x912*x922))+(((-1.0)*x909))+(((-1.0)*x917))+(((-1.0)*x908*x922))+x918);
evalcond[1]=((((-1.0)*cj13*x913))+(((-1.0)*x906*x911*x912))+(((-1.0)*x906*x908*x911))+(((-1.0)*x911*x919))+((cj13*x916)));
evalcond[2]=((0.045)+((x908*x920))+(((-1.0)*x914))+((sj13*x916))+x910+(((-1.0)*x911*x913))+((x912*x920))+((cj13*x919)));
evalcond[3]=((((-1.0)*x906*x917))+(((-1.0)*x914*x923))+(((-0.55)*x906))+pz+((x910*x923))+(((0.045)*x923))+(((-1.0)*x906*x909)));
evalcond[4]=(((x905*x909))+(((-1.0)*x914*x920))+((x910*x920))+(((0.55)*x905))+((x905*x917))+(((0.045)*x920))+x912+x908);
evalcond[5]=((-0.2125)+(((-1.0)*x906*x907*x912))+(((-1.0)*x906*x907*x908))+(((-1.0)*x912*x921))+(((1.1)*x918))+(((-1.0)*pp))+(((-1.0)*x908*x921))+((x913*x915))+(((-1.0)*x907*x919))+(((-1.0)*x915*x916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x924=cj14*cj14;
IkReal x925=(cj11*px);
IkReal x926=(py*sj11);
IkReal x927=((0.045)*sj14);
IkReal x928=(cj13*cj14);
IkReal x929=(cj13*sj14);
IkReal x930=((0.3)*cj14);
IkReal x931=((0.045)*pz);
CheckValue<IkReal> x932=IKPowWithIntegerCheck(IKsign((((x928*x931))+(((-1.0)*cj13*x931))+(((0.55)*x926))+(((0.55)*x925))+((x925*x930))+((x925*x927))+((x926*x927))+((x926*x930))+(((-0.3)*pz*x929)))),-1);
if(!x932.valid){
continue;
}
CheckValue<IkReal> x933 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.027)*cj14*sj14))+(((-0.0495)*sj14))+(pz*pz)+(((-0.087975)*x924))+(((-0.33)*cj14)))),IkReal(((((-0.03825)*cj13))+(((0.01125)*x928))+((pz*x926))+((pz*x925))+(((-0.167025)*x929))+(((0.027)*cj13*x924))+(((-0.087975)*sj14*x928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x933.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x932.value)))+(x933.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x934=IKsin(j12);
IkReal x935=IKcos(j12);
IkReal x936=((0.09)*cj13);
IkReal x937=(cj11*px);
IkReal x938=((0.045)*sj14);
IkReal x939=((0.3)*sj14);
IkReal x940=((1.0)*sj13);
IkReal x941=(py*sj11);
IkReal x942=(px*sj11);
IkReal x943=((0.045)*cj14);
IkReal x944=((0.09)*sj13);
IkReal x945=(cj11*py);
IkReal x946=((0.3)*cj14);
IkReal x947=(pz*x935);
IkReal x948=(pz*x934);
IkReal x949=(cj13*x935);
IkReal x950=((1.1)*x934);
IkReal x951=((1.0)*x934);
IkReal x952=(cj13*x934);
evalcond[0]=((-0.55)+(((-1.0)*x946))+(((-1.0)*x941*x951))+(((-1.0)*x937*x951))+x947+(((-1.0)*x938)));
evalcond[1]=((((-1.0)*x935*x940*x941))+(((-1.0)*x935*x937*x940))+(((-1.0)*cj13*x942))+((cj13*x945))+(((-1.0)*x940*x948)));
evalcond[2]=((0.045)+(((-1.0)*x943))+((x937*x949))+((x941*x949))+((sj13*x945))+((cj13*x948))+x939+(((-1.0)*x940*x942)));
evalcond[3]=((((-1.0)*x935*x938))+(((0.045)*x952))+(((-0.55)*x935))+(((-1.0)*x943*x952))+pz+((x939*x952))+(((-1.0)*x935*x946)));
evalcond[4]=(((x939*x949))+(((0.55)*x934))+(((-1.0)*x943*x949))+((x934*x946))+((x934*x938))+x937+x941+(((0.045)*x949)));
evalcond[5]=((-0.2125)+(((-1.0)*x941*x950))+(((-1.0)*x935*x936*x941))+(((-1.0)*pp))+((x942*x944))+(((-1.0)*x944*x945))+(((1.1)*x947))+(((-1.0)*x937*x950))+(((-1.0)*x936*x948))+(((-1.0)*x935*x936*x937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x953=((0.045)*cj13);
IkReal x954=((-0.55)+(((-0.045)*sj14))+(((-0.3)*cj14)));
IkReal x955=((((0.3)*cj13*sj14))+(((-1.0)*cj14*x953))+x953);
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal(x954),IkReal(x955),IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
IkReal x956=((1.0)*(x958.value));
if((((x955*x955)+(x954*x954))) < -0.00001)
continue;
CheckValue<IkReal> x959=IKPowWithIntegerCheck(IKabs(IKsqrt(((x955*x955)+(x954*x954)))),-1);
if(!x959.valid){
continue;
}
if( ((pz*(x959.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x959.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x957=IKasin((pz*(x959.value)));
j12array[0]=((((-1.0)*x957))+(((-1.0)*x956)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x956))+x957);
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j11eval[2];
IkReal x960=((((-1.0)*sj12*(pz*pz)))+((pp*sj12)));
j11eval[0]=x960;
j11eval[1]=IKsign(x960);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x961=(cj13*sj12);
IkReal x962=((((-1.0)*x961*(pz*pz)))+((pp*x961)));
j11eval[0]=x962;
j11eval[1]=IKsign(x962);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x963=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x963;
j11eval[1]=IKsign(x963);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x964=pz*pz;
IkReal x965=(py*pz);
IkReal x966=(cj12*pp);
IkReal x967=((0.2125)*cj12);
IkReal x968=((0.09)*sj12);
IkReal x969=(px*pz);
IkReal x970=(cj12*x964);
j11eval[0]=((((-1.0)*x966))+x970);
j11eval[1]=((IKabs(((((-1.1)*x965))+((py*x967))+((py*x966))+((x968*x969)))))+(IKabs(((((-1.0)*px*x966))+((x965*x968))+(((1.1)*x969))+(((-1.0)*px*x967))))));
j11eval[2]=IKsign(((((0.09)*x970))+(((-0.09)*x966))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x971=(cj12*px);
IkReal x972=((0.3)*sj14);
IkReal x973=((0.045)*cj12*py);
IkReal x974=((1.0)*pz*sj12);
IkReal x975=(((cj12*pp))+(((-1.0)*cj12*(pz*pz))));
j11eval[0]=x975;
j11eval[1]=IKsign(x975);
j11eval[2]=((IKabs(((((-1.0)*px*x974))+(((-1.0)*cj12*py*x972))+((cj14*x973))+(((-1.0)*x973)))))+(IKabs(((((0.045)*x971))+(((-1.0)*py*x974))+((x971*x972))+(((-0.045)*cj14*x971))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x976=((0.3)*sj14);
IkReal x977=((0.55)*sj12);
IkReal x978=((0.045)*py);
IkReal x979=((0.045)*px);
IkReal x980=(pp+(((-1.0)*(pz*pz))));
IkReal x981=((0.3)*cj14*sj12);
IkReal x982=((0.045)*sj12*sj14);
j11eval[0]=x980;
j11eval[1]=IKsign(x980);
j11eval[2]=((IKabs(((((-1.0)*py*x977))+(((-1.0)*py*x981))+(((-1.0)*cj14*x979))+x979+((px*x976))+(((-1.0)*sj12*sj14*x978)))))+(IKabs(((((-1.0)*px*x977))+(((-1.0)*px*x981))+(((-1.0)*py*x976))+((cj14*x978))+(((-1.0)*x978))+(((-1.0)*sj12*sj14*x979))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x983=pz*pz;
IkReal x984=sj14*sj14;
IkReal x985=cj14*cj14;
IkReal x986=((4.26078431372549)*cj14);
IkReal x987=((1.20294117647059)*pp);
IkReal x988=((((-1.0)*x983))+pp);
IkReal x989=((1.20294117647059)*x983);
IkReal x990=((1.0)*x983);
j11eval[0]=x988;
j11eval[1]=IKsign(x988);
j11eval[2]=(((pp*x986))+(((-1.0)*sj14*x990))+(((-3.98071895424837)*x983))+(((3.98071895424837)*pp))+(((-1.0)*x984*x989))+((x984*x987))+((x985*x987))+(((-1.0)*x985*x989))+((pp*sj14))+(((-1.0)*x983*x986)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x991=pz*pz;
IkReal x992=(cj14*px);
IkReal x993=((0.33)*sj14);
IkReal x994=(cj14*py);
IkReal x995=((0.027)*sj14);
j11eval[0]=((((-1.0)*pp))+x991);
j11eval[1]=IKsign(((((1.1)*x991))+(((-1.1)*pp))));
j11eval[2]=((IKabs(((((-1.0)*px*x993))+(((-1.0)*py*x995))+(((0.0495)*x992))+(((-0.0495)*px))+(((0.00405)*x994))+(((0.20845)*py))+((pp*py)))))+(IKabs(((((-1.0)*px*x995))+(((0.0495)*py))+((py*x993))+(((0.00405)*x992))+(((-0.0495)*x994))+(((0.20845)*px))+((pp*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x996=pz*pz;
IkReal x997=(px*sj14);
IkReal x998=((1.0)*pp);
IkReal x999=(cj14*px);
IkReal x1000=(cj14*py);
IkReal x1001=((0.0495)*py);
j11eval[0]=((((-1.0)*x998))+x996);
j11eval[1]=((IKabs(((((-1.0)*sj14*x1001))+(((0.0495)*px))+(((-0.33)*x1000))+(((0.00405)*x997))+(((0.027)*x999))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((0.00405)*py*sj14))+x1001+(((-1.0)*px*x998))+(((0.0495)*x997))+(((0.33)*x999))+(((0.027)*x1000))+(((0.3925)*px))))));
j11eval[2]=IKsign(((((0.09)*x996))+(((-0.09)*pp))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1002=(px*sj14);
IkReal x1003=(cj14*px);
IkReal x1004=(cj14*py);
IkReal x1005=((0.0495)*py);
CheckValue<IkReal> x1006 = IKatan2WithCheck(IkReal(((((0.00405)*py*sj14))+(((0.0495)*x1002))+(((-1.0)*pp*px))+x1005+(((0.33)*x1003))+(((0.027)*x1004))+(((0.3925)*px)))),IkReal(((((-1.0)*sj14*x1005))+(((0.0495)*px))+(((-0.33)*x1004))+(((0.00405)*x1002))+(((0.027)*x1003))+(((-0.3925)*py))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1006.valid){
continue;
}
CheckValue<IkReal> x1007=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1007.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1006.value)+(((1.5707963267949)*(x1007.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1008=IKsin(j11);
IkReal x1009=IKcos(j11);
IkReal x1010=((1.0)*px);
IkReal x1011=(py*x1008);
IkReal x1012=(py*x1009);
evalcond[0]=((0.045)+x1012+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1008*x1010)));
evalcond[1]=((-0.55)+(((-1.0)*x1009*x1010))+(((-0.045)*sj14))+(((-0.3)*cj14))+(((-1.0)*x1011)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1009))+(((-1.1)*x1011))+(((-0.09)*x1012))+(((-1.0)*pp))+(((0.09)*px*x1008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1013=((0.0495)*cj14);
IkReal x1014=((0.33)*sj14);
IkReal x1015=((0.00405)*cj14);
IkReal x1016=((0.027)*sj14);
CheckValue<IkReal> x1017=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x1017.valid){
continue;
}
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1014))+(((-1.0)*py*x1016))+(((-0.0495)*px))+((py*x1015))+(((0.20845)*py))+((pp*py))+((px*x1013)))),IkReal(((((-1.0)*px*x1016))+(((0.0495)*py))+(((-1.0)*py*x1013))+((py*x1014))+(((0.20845)*px))+((pp*px))+((px*x1015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1017.value)))+(x1018.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1019=IKsin(j11);
IkReal x1020=IKcos(j11);
IkReal x1021=((1.0)*px);
IkReal x1022=(py*x1019);
IkReal x1023=(py*x1020);
evalcond[0]=((0.045)+x1023+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1019*x1021)));
evalcond[1]=((-0.55)+(((-1.0)*x1022))+(((-1.0)*x1020*x1021))+(((-0.045)*sj14))+(((-0.3)*cj14)));
evalcond[2]=((-0.2125)+(((-1.1)*x1022))+(((-1.1)*px*x1020))+(((-0.09)*x1023))+(((-1.0)*pp))+(((0.09)*px*x1019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1024=(px*sj14);
IkReal x1025=(py*sj14);
IkReal x1026=((0.045)*py);
IkReal x1027=(cj14*px);
CheckValue<IkReal> x1028 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((0.045)*px))+(((-0.045)*x1027))+(((-0.045)*x1025))+(((0.3)*x1024))+(((-0.3)*cj14*py)))),IkReal(((((-0.55)*px))+(((-1.0)*x1026))+(((-0.045)*x1024))+(((-0.3)*x1025))+(((-0.3)*x1027))+((cj14*x1026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1028.valid){
continue;
}
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1029.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1028.value)+(((1.5707963267949)*(x1029.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1030=IKsin(j11);
IkReal x1031=IKcos(j11);
IkReal x1032=((1.0)*px);
IkReal x1033=(py*x1030);
IkReal x1034=(py*x1031);
evalcond[0]=((0.045)+x1034+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1030*x1032)));
evalcond[1]=((-0.55)+(((-1.0)*x1033))+(((-0.045)*sj14))+(((-1.0)*x1031*x1032))+(((-0.3)*cj14)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1031))+(((-1.1)*x1033))+(((-1.0)*pp))+(((-0.09)*x1034))+(((0.09)*px*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1035=pz*pz;
IkReal x1036=sj14*sj14;
IkReal x1037=cj14*cj14;
IkReal x1038=((4.26078431372549)*cj14);
IkReal x1039=((1.20294117647059)*pp);
IkReal x1040=((((-1.0)*x1035))+pp);
IkReal x1041=((1.20294117647059)*x1035);
IkReal x1042=((1.0)*x1035);
j11eval[0]=x1040;
j11eval[1]=IKsign(x1040);
j11eval[2]=(((x1036*x1039))+(((-1.0)*x1035*x1038))+(((-1.0)*sj14*x1042))+(((-1.0)*x1037*x1041))+((pp*x1038))+(((3.98071895424837)*pp))+((x1037*x1039))+(((-3.98071895424837)*x1035))+(((-1.0)*x1036*x1041))+((pp*sj14)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1043=pz*pz;
IkReal x1044=(cj14*px);
IkReal x1045=((0.33)*sj14);
IkReal x1046=(cj14*py);
IkReal x1047=((0.027)*sj14);
j11eval[0]=(pp+(((-1.0)*x1043)));
j11eval[1]=((IKabs(((((-1.0)*px*x1047))+(((-0.0495)*py))+(((-1.0)*py*x1045))+(((0.0495)*x1046))+(((0.00405)*x1044))+(((0.20845)*px))+((pp*px)))))+(IKabs(((((0.0495)*px))+((px*x1045))+(((-1.0)*py*x1047))+(((-0.0495)*x1044))+(((0.00405)*x1046))+(((0.20845)*py))+((pp*py))))));
j11eval[2]=IKsign(((((1.1)*pp))+(((-1.1)*x1043))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1048=pz*pz;
IkReal x1049=(px*sj14);
IkReal x1050=((1.0)*pp);
IkReal x1051=((0.027)*cj14);
IkReal x1052=((0.33)*cj14);
IkReal x1053=((0.0495)*py);
j11eval[0]=((((-1.0)*x1050))+x1048);
j11eval[1]=((IKabs(((((-1.0)*sj14*x1053))+(((-1.0)*px*x1051))+(((-0.0495)*px))+(((-0.00405)*x1049))+(((-1.0)*py*x1052))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((-1.0)*x1053))+((px*x1052))+(((-0.00405)*py*sj14))+(((-1.0)*px*x1050))+(((-1.0)*py*x1051))+(((0.0495)*x1049))+(((0.3925)*px))))));
j11eval[2]=IKsign(((((-0.09)*pp))+(((0.09)*x1048))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1054=(px*sj14);
IkReal x1055=((0.027)*cj14);
IkReal x1056=((0.33)*cj14);
IkReal x1057=((0.0495)*py);
CheckValue<IkReal> x1058=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1058.valid){
continue;
}
CheckValue<IkReal> x1059 = IKatan2WithCheck(IkReal(((((-1.0)*x1057))+(((-1.0)*pp*px))+((px*x1056))+(((-0.00405)*py*sj14))+(((-1.0)*py*x1055))+(((0.0495)*x1054))+(((0.3925)*px)))),IkReal(((((-1.0)*sj14*x1057))+(((-1.0)*px*x1055))+(((-0.0495)*px))+(((-1.0)*py*x1056))+(((-0.00405)*x1054))+(((-0.3925)*py))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1059.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1058.value)))+(x1059.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1060=IKcos(j11);
IkReal x1061=IKsin(j11);
IkReal x1062=(py*x1061);
IkReal x1063=(px*x1060);
IkReal x1064=(px*x1061);
IkReal x1065=(py*x1060);
evalcond[0]=((-0.55)+x1063+x1062+(((-0.045)*sj14))+(((-0.3)*cj14)));
evalcond[1]=((0.045)+x1065+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1064)));
evalcond[2]=((-0.2125)+(((0.09)*x1064))+(((1.1)*x1063))+(((1.1)*x1062))+(((-1.0)*pp))+(((-0.09)*x1065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1066=(cj14*px);
IkReal x1067=(py*sj14);
IkReal x1068=(cj14*py);
IkReal x1069=(px*sj14);
CheckValue<IkReal> x1070 = IKatan2WithCheck(IkReal(((((0.0495)*px))+(((-0.027)*x1067))+(((-0.0495)*x1066))+(((0.33)*x1069))+(((0.00405)*x1068))+(((0.20845)*py))+((pp*py)))),IkReal(((((-0.027)*x1069))+(((-0.0495)*py))+(((-0.33)*x1067))+(((0.0495)*x1068))+(((0.00405)*x1066))+(((0.20845)*px))+((pp*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1070.valid){
continue;
}
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x1071.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1070.value)+(((1.5707963267949)*(x1071.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1072=IKcos(j11);
IkReal x1073=IKsin(j11);
IkReal x1074=(py*x1073);
IkReal x1075=(px*x1072);
IkReal x1076=(px*x1073);
IkReal x1077=(py*x1072);
evalcond[0]=((-0.55)+x1074+x1075+(((-0.045)*sj14))+(((-0.3)*cj14)));
evalcond[1]=((0.045)+x1077+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1076)));
evalcond[2]=((-0.2125)+(((0.09)*x1076))+(((1.1)*x1074))+(((1.1)*x1075))+(((-1.0)*pp))+(((-0.09)*x1077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1078=(px*sj14);
IkReal x1079=(py*sj14);
IkReal x1080=((0.045)*py);
IkReal x1081=((0.045)*px);
IkReal x1082=((0.3)*cj14);
CheckValue<IkReal> x1083=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1083.valid){
continue;
}
CheckValue<IkReal> x1084 = IKatan2WithCheck(IkReal(((((0.3)*x1078))+x1081+((py*x1082))+(((-1.0)*cj14*x1081))+(((0.55)*py))+(((0.045)*x1079)))),IkReal(((((-0.3)*x1079))+((px*x1082))+((cj14*x1080))+(((-1.0)*x1080))+(((0.55)*px))+(((0.045)*x1078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1084.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1083.value)))+(x1084.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1085=IKcos(j11);
IkReal x1086=IKsin(j11);
IkReal x1087=(py*x1086);
IkReal x1088=(px*x1085);
IkReal x1089=(px*x1086);
IkReal x1090=(py*x1085);
evalcond[0]=((-0.55)+x1087+x1088+(((-0.045)*sj14))+(((-0.3)*cj14)));
evalcond[1]=((0.045)+x1090+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1089)));
evalcond[2]=((-0.2125)+(((-0.09)*x1090))+(((-1.0)*pp))+(((1.1)*x1088))+(((1.1)*x1087))+(((0.09)*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1091=((0.3)*sj14);
IkReal x1092=((0.045)*py);
IkReal x1093=((0.045)*px);
IkReal x1094=((0.55)*sj12);
IkReal x1095=((0.3)*cj14*sj12);
IkReal x1096=((0.045)*sj12*sj14);
CheckValue<IkReal> x1097=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1097.valid){
continue;
}
CheckValue<IkReal> x1098 = IKatan2WithCheck(IkReal((x1093+(((-1.0)*py*x1095))+(((-1.0)*py*x1094))+(((-1.0)*sj12*sj14*x1092))+(((-1.0)*cj14*x1093))+((px*x1091)))),IkReal((((cj14*x1092))+(((-1.0)*py*x1091))+(((-1.0)*x1092))+(((-1.0)*sj12*sj14*x1093))+(((-1.0)*px*x1094))+(((-1.0)*px*x1095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1098.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1097.value)))+(x1098.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1099=IKsin(j11);
IkReal x1100=IKcos(j11);
IkReal x1101=((1.1)*sj12);
IkReal x1102=((0.045)*sj14);
IkReal x1103=(cj12*pz);
IkReal x1104=((1.0)*sj12);
IkReal x1105=((0.3)*cj14);
IkReal x1106=(px*x1100);
IkReal x1107=((1.0)*x1099);
IkReal x1108=(py*x1100);
IkReal x1109=(py*x1099);
evalcond[0]=((0.045)+x1108+(((-1.0)*px*x1107))+(((0.3)*sj14))+(((-0.045)*cj14)));
evalcond[1]=((((-1.0)*cj12*py*x1107))+(((-1.0)*pz*x1104))+(((-1.0)*cj12*x1106)));
evalcond[2]=(((sj12*x1102))+((sj12*x1105))+x1106+x1109+(((0.55)*sj12)));
evalcond[3]=((-0.55)+x1103+(((-1.0)*x1104*x1109))+(((-1.0)*x1104*x1106))+(((-1.0)*x1102))+(((-1.0)*x1105)));
evalcond[4]=((-0.2125)+(((0.09)*px*x1099))+(((-1.0)*pp))+(((1.1)*x1103))+(((-0.09)*x1108))+(((-1.0)*x1101*x1106))+(((-1.0)*x1101*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1110=(cj12*px);
IkReal x1111=((0.3)*sj14);
IkReal x1112=((1.0)*pz*sj12);
IkReal x1113=((0.045)*cj12*py);
CheckValue<IkReal> x1114=IKPowWithIntegerCheck(IKsign((((cj12*pp))+(((-1.0)*cj12*(pz*pz))))),-1);
if(!x1114.valid){
continue;
}
CheckValue<IkReal> x1115 = IKatan2WithCheck(IkReal((((x1110*x1111))+(((0.045)*x1110))+(((-1.0)*py*x1112))+(((-0.045)*cj14*x1110)))),IkReal(((((-1.0)*px*x1112))+(((-1.0)*cj12*py*x1111))+(((-1.0)*x1113))+((cj14*x1113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1115.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1114.value)))+(x1115.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1116=IKsin(j11);
IkReal x1117=IKcos(j11);
IkReal x1118=((1.1)*sj12);
IkReal x1119=((0.045)*sj14);
IkReal x1120=(cj12*pz);
IkReal x1121=((1.0)*sj12);
IkReal x1122=((0.3)*cj14);
IkReal x1123=(px*x1117);
IkReal x1124=((1.0)*x1116);
IkReal x1125=(py*x1117);
IkReal x1126=(py*x1116);
evalcond[0]=((0.045)+x1125+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*px*x1124)));
evalcond[1]=((((-1.0)*cj12*x1123))+(((-1.0)*cj12*py*x1124))+(((-1.0)*pz*x1121)));
evalcond[2]=(((sj12*x1122))+((sj12*x1119))+x1123+x1126+(((0.55)*sj12)));
evalcond[3]=((-0.55)+x1120+(((-1.0)*x1121*x1126))+(((-1.0)*x1121*x1123))+(((-1.0)*x1122))+(((-1.0)*x1119)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*x1120))+(((-1.0)*x1118*x1123))+(((-1.0)*x1118*x1126))+(((-0.09)*x1125))+(((0.09)*px*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1127=(py*pz);
IkReal x1128=((0.2125)*cj12);
IkReal x1129=((0.09)*cj12);
IkReal x1130=((0.09)*sj12);
IkReal x1131=(px*pz);
IkReal x1132=(cj12*pp);
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1132))+(((1.1)*x1131))+(((-1.0)*px*x1128))+((x1127*x1130)))),IkReal(((((-1.1)*x1127))+((x1130*x1131))+((py*x1132))+((py*x1128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1129))+((x1129*(pz*pz))))),-1);
if(!x1134.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1133.value)+(((1.5707963267949)*(x1134.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1135=IKsin(j11);
IkReal x1136=IKcos(j11);
IkReal x1137=((1.1)*sj12);
IkReal x1138=((0.045)*sj14);
IkReal x1139=(cj12*pz);
IkReal x1140=((1.0)*sj12);
IkReal x1141=((0.3)*cj14);
IkReal x1142=(px*x1136);
IkReal x1143=((1.0)*x1135);
IkReal x1144=(py*x1136);
IkReal x1145=(py*x1135);
evalcond[0]=((0.045)+x1144+(((-1.0)*px*x1143))+(((0.3)*sj14))+(((-0.045)*cj14)));
evalcond[1]=((((-1.0)*cj12*x1142))+(((-1.0)*pz*x1140))+(((-1.0)*cj12*py*x1143)));
evalcond[2]=(x1142+x1145+((sj12*x1141))+((sj12*x1138))+(((0.55)*sj12)));
evalcond[3]=((-0.55)+(((-1.0)*x1140*x1142))+(((-1.0)*x1140*x1145))+x1139+(((-1.0)*x1141))+(((-1.0)*x1138)));
evalcond[4]=((-0.2125)+(((-1.0)*x1137*x1145))+(((-1.0)*x1137*x1142))+(((-0.09)*x1144))+(((-1.0)*pp))+(((0.09)*px*x1135))+(((1.1)*x1139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1146=pz*pz;
IkReal x1147=(py*pz);
IkReal x1148=((0.2125)*cj12);
IkReal x1149=((0.09)*cj12);
IkReal x1150=((0.09)*sj12);
IkReal x1151=(px*pz);
IkReal x1152=(cj12*pp);
j11eval[0]=(x1152+(((-1.0)*cj12*x1146)));
j11eval[1]=((IKabs(((((1.1)*x1151))+(((-1.0)*px*x1148))+(((-1.0)*x1147*x1150))+(((-1.0)*px*x1152)))))+(IKabs((((py*x1148))+(((-1.1)*x1147))+(((-1.0)*x1150*x1151))+((py*x1152))))));
j11eval[2]=IKsign((((pp*x1149))+(((-1.0)*x1146*x1149))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1153=(cj12*px);
IkReal x1154=((0.3)*sj14);
IkReal x1155=((1.0)*pz*sj12);
IkReal x1156=((0.045)*cj12*py);
IkReal x1157=(((cj12*pp))+(((-1.0)*cj12*(pz*pz))));
j11eval[0]=x1157;
j11eval[1]=((IKabs((x1156+(((-1.0)*px*x1155))+(((-1.0)*cj14*x1156))+((cj12*py*x1154)))))+(IKabs(((((0.045)*cj14*x1153))+(((-0.045)*x1153))+(((-1.0)*py*x1155))+(((-1.0)*x1153*x1154))))));
j11eval[2]=IKsign(x1157);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1158=(py*sj14);
IkReal x1159=((0.045)*sj12);
IkReal x1160=((0.045)*px);
IkReal x1161=(px*sj14);
IkReal x1162=((0.55)*sj12);
IkReal x1163=((0.045)*py);
IkReal x1164=(pp+(((-1.0)*(pz*pz))));
IkReal x1165=((0.3)*cj14*sj12);
j11eval[0]=x1164;
j11eval[1]=((IKabs(((((-1.0)*x1158*x1159))+(((-1.0)*py*x1165))+(((-1.0)*py*x1162))+(((-0.3)*x1161))+((cj14*x1160))+(((-1.0)*x1160)))))+(IKabs((x1163+(((-1.0)*x1159*x1161))+(((0.3)*x1158))+(((-1.0)*px*x1165))+(((-1.0)*px*x1162))+(((-1.0)*cj14*x1163))))));
j11eval[2]=IKsign(x1164);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x1166=pz*pz;
IkReal x1167=sj14*sj14;
IkReal x1168=cj14*cj14;
IkReal x1169=((4.26078431372549)*cj14);
IkReal x1170=((1.20294117647059)*pp);
IkReal x1171=(pp+(((-1.0)*x1166)));
IkReal x1172=((1.20294117647059)*x1166);
IkReal x1173=((1.0)*x1166);
j11eval[0]=x1171;
j11eval[1]=IKsign(x1171);
j11eval[2]=((((-1.0)*x1166*x1169))+(((-1.0)*x1168*x1172))+(((-1.0)*sj14*x1173))+((x1168*x1170))+(((-1.0)*x1167*x1172))+((x1167*x1170))+(((3.98071895424837)*pp))+((pp*x1169))+(((-3.98071895424837)*x1166))+((pp*sj14)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x1174=pz*pz;
IkReal x1175=(cj14*px);
IkReal x1176=((0.33)*sj14);
IkReal x1177=(cj14*py);
IkReal x1178=((0.027)*sj14);
j11eval[0]=(x1174+(((-1.0)*pp)));
j11eval[1]=((IKabs(((((0.0495)*x1177))+(((-1.0)*py*x1176))+(((-0.0495)*py))+(((-1.0)*px*x1178))+(((0.00405)*x1175))+(((0.20845)*px))+((pp*px)))))+(IKabs((((px*x1176))+(((0.0495)*px))+(((-1.0)*py*x1178))+(((-0.0495)*x1175))+(((0.00405)*x1177))+(((0.20845)*py))+((pp*py))))));
j11eval[2]=IKsign(((((-1.1)*pp))+(((1.1)*x1174))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x1179=pz*pz;
IkReal x1180=(px*sj14);
IkReal x1181=((0.027)*cj14);
IkReal x1182=((0.33)*cj14);
IkReal x1183=((0.0495)*py);
j11eval[0]=(pp+(((-1.0)*x1179)));
j11eval[1]=IKsign(((((-0.09)*x1179))+(((0.09)*pp))));
j11eval[2]=((IKabs(((((-1.0)*py*x1182))+(((-1.0)*sj14*x1183))+(((-0.0495)*px))+(((-1.0)*px*x1181))+(((-0.00405)*x1180))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((0.0495)*x1180))+(((-1.0)*pp*px))+(((-0.00405)*py*sj14))+(((-1.0)*py*x1181))+(((-1.0)*x1183))+((px*x1182))+(((0.3925)*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1184=(px*sj14);
IkReal x1185=((0.027)*cj14);
IkReal x1186=((0.33)*cj14);
IkReal x1187=((0.0495)*py);
CheckValue<IkReal> x1188 = IKatan2WithCheck(IkReal(((((0.0495)*x1184))+(((-1.0)*pp*px))+(((-0.00405)*py*sj14))+(((-1.0)*py*x1185))+(((-1.0)*x1187))+((px*x1186))+(((0.3925)*px)))),IkReal(((((-1.0)*py*x1186))+(((-1.0)*sj14*x1187))+(((-0.0495)*px))+(((-1.0)*px*x1185))+(((-0.00405)*x1184))+(((-0.3925)*py))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1188.valid){
continue;
}
CheckValue<IkReal> x1189=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x1189.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1188.value)+(((1.5707963267949)*(x1189.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1190=IKsin(j11);
IkReal x1191=IKcos(j11);
IkReal x1192=(py*x1190);
IkReal x1193=(px*x1190);
IkReal x1194=(px*x1191);
IkReal x1195=(py*x1191);
evalcond[0]=((-0.045)+x1195+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1193)));
evalcond[1]=((-0.55)+(((-0.045)*sj14))+(((-0.3)*cj14))+(((-1.0)*x1192))+(((-1.0)*x1194)));
evalcond[2]=((-0.2125)+(((0.09)*x1195))+(((-1.0)*pp))+(((-1.1)*x1192))+(((-1.1)*x1194))+(((-0.09)*x1193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1196=(cj14*px);
IkReal x1197=(py*sj14);
IkReal x1198=(cj14*py);
IkReal x1199=(px*sj14);
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal(((((0.33)*x1199))+(((0.00405)*x1198))+(((0.0495)*px))+(((-0.027)*x1197))+(((-0.0495)*x1196))+(((0.20845)*py))+((pp*py)))),IkReal(((((-0.33)*x1197))+(((0.0495)*x1198))+(((0.00405)*x1196))+(((-0.027)*x1199))+(((-0.0495)*py))+(((0.20845)*px))+((pp*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x1201.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1200.value)+(((1.5707963267949)*(x1201.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1202=IKsin(j11);
IkReal x1203=IKcos(j11);
IkReal x1204=(py*x1202);
IkReal x1205=(px*x1202);
IkReal x1206=(px*x1203);
IkReal x1207=(py*x1203);
evalcond[0]=((-0.045)+x1207+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1205)));
evalcond[1]=((-0.55)+(((-0.045)*sj14))+(((-1.0)*x1204))+(((-1.0)*x1206))+(((-0.3)*cj14)));
evalcond[2]=((-0.2125)+(((-1.1)*x1206))+(((-1.1)*x1204))+(((0.09)*x1207))+(((-1.0)*pp))+(((-0.09)*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1208=(px*sj14);
IkReal x1209=(py*sj14);
IkReal x1210=((0.045)*py);
IkReal x1211=((0.045)*px);
IkReal x1212=((0.3)*cj14);
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((-0.045)*x1209))+((cj14*x1211))+(((-1.0)*x1211))+(((-0.3)*x1208))+(((-1.0)*py*x1212)))),IkReal(((((-0.55)*px))+(((-0.045)*x1208))+x1210+(((-1.0)*px*x1212))+(((-1.0)*cj14*x1210))+(((0.3)*x1209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1214.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1213.value)+(((1.5707963267949)*(x1214.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1215=IKsin(j11);
IkReal x1216=IKcos(j11);
IkReal x1217=(py*x1215);
IkReal x1218=(px*x1215);
IkReal x1219=(px*x1216);
IkReal x1220=(py*x1216);
evalcond[0]=((-0.045)+x1220+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1218)));
evalcond[1]=((-0.55)+(((-0.045)*sj14))+(((-0.3)*cj14))+(((-1.0)*x1217))+(((-1.0)*x1219)));
evalcond[2]=((-0.2125)+(((-0.09)*x1218))+(((-1.1)*x1217))+(((-1.1)*x1219))+(((-1.0)*pp))+(((0.09)*x1220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1221=pz*pz;
IkReal x1222=sj14*sj14;
IkReal x1223=cj14*cj14;
IkReal x1224=((4.26078431372549)*cj14);
IkReal x1225=((1.20294117647059)*pp);
IkReal x1226=((((-1.0)*x1221))+pp);
IkReal x1227=((1.20294117647059)*x1221);
IkReal x1228=((1.0)*x1221);
j11eval[0]=x1226;
j11eval[1]=IKsign(x1226);
j11eval[2]=((((-3.98071895424837)*x1221))+((x1223*x1225))+(((-1.0)*sj14*x1228))+(((-1.0)*x1221*x1224))+(((-1.0)*x1222*x1227))+((pp*x1224))+((x1222*x1225))+(((3.98071895424837)*pp))+((pp*sj14))+(((-1.0)*x1223*x1227)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1229=pz*pz;
IkReal x1230=(cj14*px);
IkReal x1231=((0.33)*sj14);
IkReal x1232=(cj14*py);
IkReal x1233=((0.027)*sj14);
j11eval[0]=((((-1.0)*x1229))+pp);
j11eval[1]=IKsign(((((-1.1)*x1229))+(((1.1)*pp))));
j11eval[2]=((IKabs(((((-1.0)*px*x1233))+(((0.0495)*py))+((py*x1231))+(((-0.0495)*x1232))+(((0.00405)*x1230))+(((0.20845)*px))+((pp*px)))))+(IKabs(((((-1.0)*px*x1231))+(((0.0495)*x1230))+(((-0.0495)*px))+(((-1.0)*py*x1233))+(((0.00405)*x1232))+(((0.20845)*py))+((pp*py))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1234=pz*pz;
IkReal x1235=(px*sj14);
IkReal x1236=((0.027)*cj14);
IkReal x1237=((0.33)*cj14);
IkReal x1238=((0.0495)*py);
j11eval[0]=((((-1.0)*x1234))+pp);
j11eval[1]=IKsign(((((-0.09)*x1234))+(((0.09)*pp))));
j11eval[2]=((IKabs(((((0.0495)*px))+(((-1.0)*sj14*x1238))+(((-1.0)*py*x1237))+((px*x1236))+(((0.00405)*x1235))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((0.00405)*py*sj14))+x1238+(((-1.0)*pp*px))+(((0.0495)*x1235))+((py*x1236))+((px*x1237))+(((0.3925)*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1239=(px*sj14);
IkReal x1240=(cj14*px);
IkReal x1241=(cj14*py);
IkReal x1242=((0.0495)*py);
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal(((((0.00405)*py*sj14))+x1242+(((-1.0)*pp*px))+(((0.0495)*x1239))+(((0.33)*x1240))+(((0.027)*x1241))+(((0.3925)*px)))),IkReal(((((0.0495)*px))+(((-0.33)*x1241))+(((0.00405)*x1239))+(((0.027)*x1240))+(((-1.0)*sj14*x1242))+(((-0.3925)*py))+((pp*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x1244.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1243.value)+(((1.5707963267949)*(x1244.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1245=IKcos(j11);
IkReal x1246=IKsin(j11);
IkReal x1247=(py*x1246);
IkReal x1248=(px*x1245);
IkReal x1249=(px*x1246);
IkReal x1250=(py*x1245);
evalcond[0]=((-0.55)+x1247+x1248+(((-0.045)*sj14))+(((-0.3)*cj14)));
evalcond[1]=((-0.045)+x1250+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1249)));
evalcond[2]=((-0.2125)+(((1.1)*x1247))+(((1.1)*x1248))+(((-1.0)*pp))+(((0.09)*x1250))+(((-0.09)*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1251=((0.0495)*cj14);
IkReal x1252=((0.33)*sj14);
IkReal x1253=((0.00405)*cj14);
IkReal x1254=((0.027)*sj14);
CheckValue<IkReal> x1255 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1252))+(((-0.0495)*px))+(((-1.0)*py*x1254))+((px*x1251))+(((0.20845)*py))+((pp*py))+((py*x1253)))),IkReal(((((0.0495)*py))+(((-1.0)*px*x1254))+(((-1.0)*py*x1251))+((px*x1253))+(((0.20845)*px))+((pp*px))+((py*x1252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1255.valid){
continue;
}
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x1256.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1255.value)+(((1.5707963267949)*(x1256.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1257=IKcos(j11);
IkReal x1258=IKsin(j11);
IkReal x1259=(py*x1258);
IkReal x1260=(px*x1257);
IkReal x1261=(px*x1258);
IkReal x1262=(py*x1257);
evalcond[0]=((-0.55)+x1260+x1259+(((-0.045)*sj14))+(((-0.3)*cj14)));
evalcond[1]=((-0.045)+x1262+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1261)));
evalcond[2]=((-0.2125)+(((-0.09)*x1261))+(((-1.0)*pp))+(((1.1)*x1259))+(((0.09)*x1262))+(((1.1)*x1260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1263=(px*sj14);
IkReal x1264=(py*sj14);
IkReal x1265=((0.045)*py);
IkReal x1266=(cj14*px);
CheckValue<IkReal> x1267=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1267.valid){
continue;
}
CheckValue<IkReal> x1268 = IKatan2WithCheck(IkReal(((((-0.045)*px))+(((0.045)*x1266))+(((0.045)*x1264))+(((0.3)*cj14*py))+(((-0.3)*x1263))+(((0.55)*py)))),IkReal((x1265+(((-1.0)*cj14*x1265))+(((0.045)*x1263))+(((0.3)*x1264))+(((0.3)*x1266))+(((0.55)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1268.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1267.value)))+(x1268.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1269=IKcos(j11);
IkReal x1270=IKsin(j11);
IkReal x1271=(py*x1270);
IkReal x1272=(px*x1269);
IkReal x1273=(px*x1270);
IkReal x1274=(py*x1269);
evalcond[0]=((-0.55)+x1271+x1272+(((-0.045)*sj14))+(((-0.3)*cj14)));
evalcond[1]=((-0.045)+x1274+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1273)));
evalcond[2]=((-0.2125)+(((-0.09)*x1273))+(((0.09)*x1274))+(((-1.0)*pp))+(((1.1)*x1272))+(((1.1)*x1271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1275=((0.3)*sj14);
IkReal x1276=((0.045)*py);
IkReal x1277=((0.045)*px);
IkReal x1278=((0.55)*sj12);
IkReal x1279=((0.3)*cj14*sj12);
IkReal x1280=((0.045)*sj12*sj14);
CheckValue<IkReal> x1281 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1279))+(((-1.0)*py*x1278))+(((-1.0)*x1277))+((cj14*x1277))+(((-1.0)*sj12*sj14*x1276))+(((-1.0)*px*x1275)))),IkReal((x1276+((py*x1275))+(((-1.0)*cj14*x1276))+(((-1.0)*sj12*sj14*x1277))+(((-1.0)*px*x1278))+(((-1.0)*px*x1279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1281.valid){
continue;
}
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1282.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1281.value)+(((1.5707963267949)*(x1282.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1283=IKcos(j11);
IkReal x1284=IKsin(j11);
IkReal x1285=((1.1)*sj12);
IkReal x1286=((0.045)*sj14);
IkReal x1287=(cj12*pz);
IkReal x1288=((1.0)*sj12);
IkReal x1289=((0.3)*cj14);
IkReal x1290=(px*x1283);
IkReal x1291=(px*x1284);
IkReal x1292=(py*x1283);
IkReal x1293=(py*x1284);
evalcond[0]=(((pz*sj12))+((cj12*x1290))+((cj12*x1293)));
evalcond[1]=((-0.045)+x1292+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1291)));
evalcond[2]=(x1293+x1290+((sj12*x1286))+((sj12*x1289))+(((0.55)*sj12)));
evalcond[3]=((-0.55)+x1287+(((-1.0)*x1288*x1290))+(((-1.0)*x1288*x1293))+(((-1.0)*x1286))+(((-1.0)*x1289)));
evalcond[4]=((-0.2125)+(((1.1)*x1287))+(((-1.0)*pp))+(((-0.09)*x1291))+(((0.09)*x1292))+(((-1.0)*x1285*x1293))+(((-1.0)*x1285*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1294=(cj12*px);
IkReal x1295=((0.3)*sj14);
IkReal x1296=((1.0)*pz*sj12);
IkReal x1297=((0.045)*cj12*py);
CheckValue<IkReal> x1298=IKPowWithIntegerCheck(IKsign((((cj12*pp))+(((-1.0)*cj12*(pz*pz))))),-1);
if(!x1298.valid){
continue;
}
CheckValue<IkReal> x1299 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1296))+(((-0.045)*x1294))+(((-1.0)*x1294*x1295))+(((0.045)*cj14*x1294)))),IkReal((x1297+(((-1.0)*cj14*x1297))+((cj12*py*x1295))+(((-1.0)*px*x1296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1299.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1298.value)))+(x1299.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1300=IKcos(j11);
IkReal x1301=IKsin(j11);
IkReal x1302=((1.1)*sj12);
IkReal x1303=((0.045)*sj14);
IkReal x1304=(cj12*pz);
IkReal x1305=((1.0)*sj12);
IkReal x1306=((0.3)*cj14);
IkReal x1307=(px*x1300);
IkReal x1308=(px*x1301);
IkReal x1309=(py*x1300);
IkReal x1310=(py*x1301);
evalcond[0]=(((cj12*x1310))+((cj12*x1307))+((pz*sj12)));
evalcond[1]=((-0.045)+x1309+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1308)));
evalcond[2]=(x1307+x1310+((sj12*x1303))+((sj12*x1306))+(((0.55)*sj12)));
evalcond[3]=((-0.55)+x1304+(((-1.0)*x1303))+(((-1.0)*x1306))+(((-1.0)*x1305*x1310))+(((-1.0)*x1305*x1307)));
evalcond[4]=((-0.2125)+(((0.09)*x1309))+(((-1.0)*pp))+(((-0.09)*x1308))+(((-1.0)*x1302*x1310))+(((-1.0)*x1302*x1307))+(((1.1)*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1311=(py*pz);
IkReal x1312=((0.09)*cj12);
IkReal x1313=((0.2125)*cj12);
IkReal x1314=((0.09)*sj12);
IkReal x1315=(px*pz);
IkReal x1316=(cj12*pp);
CheckValue<IkReal> x1317=IKPowWithIntegerCheck(IKsign((((pp*x1312))+(((-1.0)*x1312*(pz*pz))))),-1);
if(!x1317.valid){
continue;
}
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(((((-1.0)*x1311*x1314))+(((1.1)*x1315))+(((-1.0)*px*x1313))+(((-1.0)*px*x1316)))),IkReal((((py*x1313))+((py*x1316))+(((-1.0)*x1314*x1315))+(((-1.1)*x1311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1317.value)))+(x1318.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1319=IKcos(j11);
IkReal x1320=IKsin(j11);
IkReal x1321=((1.1)*sj12);
IkReal x1322=((0.045)*sj14);
IkReal x1323=(cj12*pz);
IkReal x1324=((1.0)*sj12);
IkReal x1325=((0.3)*cj14);
IkReal x1326=(px*x1319);
IkReal x1327=(px*x1320);
IkReal x1328=(py*x1319);
IkReal x1329=(py*x1320);
evalcond[0]=(((pz*sj12))+((cj12*x1329))+((cj12*x1326)));
evalcond[1]=((-0.045)+x1328+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1327)));
evalcond[2]=(x1326+x1329+((sj12*x1325))+((sj12*x1322))+(((0.55)*sj12)));
evalcond[3]=((-0.55)+x1323+(((-1.0)*x1324*x1326))+(((-1.0)*x1324*x1329))+(((-1.0)*x1322))+(((-1.0)*x1325)));
evalcond[4]=((-0.2125)+(((0.09)*x1328))+(((-1.0)*pp))+(((-1.0)*x1321*x1329))+(((-1.0)*x1321*x1326))+(((-0.09)*x1327))+(((1.1)*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x1330=(py*sj13);
IkReal x1331=((0.3)*sj14);
IkReal x1332=(cj13*py);
IkReal x1333=(cj13*px);
IkReal x1334=(pp+(((-1.0)*(pz*pz))));
IkReal x1335=((0.045)*cj13*cj14);
IkReal x1336=((0.045)*px*sj13);
j11eval[0]=x1334;
j11eval[1]=((IKabs(((((-1.0)*x1330*x1331))+(((-0.045)*x1333))+(((-0.045)*x1330))+(((-1.0)*x1331*x1333))+(((0.045)*cj14*x1333))+(((0.045)*cj14*x1330)))))+(IKabs((x1336+(((-1.0)*cj14*x1336))+((px*sj13*x1331))+(((-0.045)*x1332))+(((-1.0)*x1331*x1332))+(((0.045)*cj14*x1332))))));
j11eval[2]=IKsign(x1334);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj12=0;
cj12=1.0;
j12=0;
IkReal x1337=(((cj13*(pz*pz)))+(((-1.0)*cj13*pp)));
j11eval[0]=x1337;
j11eval[1]=IKsign(x1337);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj12=0;
cj12=1.0;
j12=0;
IkReal x1338=((((-1.0)*pp*sj13))+((sj13*(pz*pz))));
j11eval[0]=x1338;
j11eval[1]=IKsign(x1338);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal x1339=((20.0)*sj14);
IkReal x1340=((3.0)*px);
IkReal x1341=((3.0)*py);
IkReal x1342=((((-1.0)*pp))+(pz*pz));
j11eval[0]=x1342;
j11eval[1]=((IKabs((x1341+((py*x1339))+(((-1.0)*cj14*x1341)))))+(IKabs((x1340+((px*x1339))+(((-1.0)*cj14*x1340))))));
j11eval[2]=IKsign(x1342);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal x1343=pz*pz;
IkReal x1344=((80.0)*pp);
IkReal x1345=((88.0)*pz);
j11eval[0]=(pp+(((-1.0)*x1343)));
j11eval[1]=IKsign(((((9.0)*pp))+(((-9.0)*x1343))));
j11eval[2]=((IKabs(((((-1.0)*py*x1344))+(((-17.0)*py))+((py*x1345)))))+(IKabs(((((-1.0)*px*x1344))+((px*x1345))+(((-17.0)*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=1.0;
j13=0;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=1.0;
j13=0;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1347 = IKatan2WithCheck(IkReal(((-0.09)*px)),IkReal(((-0.09)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1347.valid){
continue;
}
IkReal x1346=x1347.value;
j11array[0]=((-1.0)*x1346);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1346)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1348=IKcos(j11);
IkReal x1349=IKsin(j11);
evalcond[0]=(((px*x1348))+((py*x1349)));
evalcond[1]=((((-1.0)*px*x1349))+((py*x1348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1351.valid){
continue;
}
IkReal x1350=x1351.value;
j11array[0]=((-1.0)*x1350);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1350)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1352=IKsin(j11);
IkReal x1353=IKcos(j11);
evalcond[0]=((((-1.0)*px*x1352))+((py*x1353)));
evalcond[1]=((((-0.09)*py*x1352))+(((-0.09)*px*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1354=((110.0)*pz);
IkReal x1355=((100.0)*pp);
CheckValue<IkReal> x1356=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1356.valid){
continue;
}
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal(((((-21.25)*py))+((py*x1354))+(((-1.0)*py*x1355)))),IkReal(((((-1.0)*px*x1355))+((px*x1354))+(((-21.25)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1356.value)))+(x1357.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1358=IKsin(j11);
IkReal x1359=IKcos(j11);
IkReal x1360=(py*x1358);
IkReal x1361=(px*x1359);
evalcond[0]=((((-1.0)*px*x1358))+((py*x1359)));
evalcond[1]=((0.045)+x1360+x1361+(((0.3)*sj14))+(((-0.045)*cj14)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x1361))+(((-0.09)*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1362=((0.3)*sj14);
IkReal x1363=((0.045)*py);
IkReal x1364=((0.045)*px);
CheckValue<IkReal> x1365 = IKatan2WithCheck(IkReal((x1363+(((-1.0)*cj14*x1363))+((py*x1362)))),IkReal((x1364+(((-1.0)*cj14*x1364))+((px*x1362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1365.valid){
continue;
}
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1366.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1365.value)+(((1.5707963267949)*(x1366.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1367=IKsin(j11);
IkReal x1368=IKcos(j11);
IkReal x1369=(py*x1367);
IkReal x1370=(px*x1368);
evalcond[0]=((((-1.0)*px*x1367))+((py*x1368)));
evalcond[1]=((0.045)+x1369+x1370+(((0.3)*sj14))+(((-0.045)*cj14)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1370))+(((1.1)*pz))+(((-0.09)*x1369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1371=((20.0)*sj14);
IkReal x1372=((3.0)*px);
IkReal x1373=((3.0)*py);
IkReal x1374=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1374;
j11eval[1]=((IKabs((x1372+((px*x1371))+(((-1.0)*cj14*x1372)))))+(IKabs((x1373+(((-1.0)*cj14*x1373))+((py*x1371))))));
j11eval[2]=IKsign(x1374);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1375=pz*pz;
IkReal x1376=((80.0)*pp);
IkReal x1377=((88.0)*pz);
j11eval[0]=(x1375+(((-1.0)*pp)));
j11eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1375))));
j11eval[2]=((IKabs((((py*x1377))+(((-17.0)*py))+(((-1.0)*py*x1376)))))+(IKabs(((((-1.0)*px*x1376))+((px*x1377))+(((-17.0)*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal(((0.09)*px)),IkReal(((0.09)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
IkReal x1378=x1379.value;
j11array[0]=((-1.0)*x1378);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1378)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1380=IKsin(j11);
IkReal x1381=IKcos(j11);
IkReal x1382=((1.0)*px);
evalcond[0]=(((py*x1381))+(((-1.0)*x1380*x1382)));
evalcond[1]=((((-1.0)*py*x1380))+(((-1.0)*x1381*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1384 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1384.valid){
continue;
}
IkReal x1383=x1384.value;
j11array[0]=((-1.0)*x1383);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1383)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1385=IKsin(j11);
IkReal x1386=IKcos(j11);
IkReal x1387=(px*x1386);
IkReal x1388=(py*x1385);
evalcond[0]=((((-1.0)*x1387))+(((-1.0)*x1388)));
evalcond[1]=((((0.09)*x1388))+(((0.09)*x1387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1389=((110.0)*pz);
IkReal x1390=((100.0)*pp);
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal((((py*x1389))+(((-21.25)*py))+(((-1.0)*py*x1390)))),IkReal(((((-1.0)*px*x1390))+(((-21.25)*px))+((px*x1389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1392.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1391.value)+(((1.5707963267949)*(x1392.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1393=IKsin(j11);
IkReal x1394=IKcos(j11);
IkReal x1395=(px*x1394);
IkReal x1396=((1.0)*x1393);
evalcond[0]=(((py*x1394))+(((-1.0)*px*x1396)));
evalcond[1]=((0.045)+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1395))+(((-1.0)*py*x1396)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*x1393))+(((0.09)*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1397=((0.3)*sj14);
IkReal x1398=((0.045)*py);
IkReal x1399=((0.045)*px);
CheckValue<IkReal> x1400=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1400.valid){
continue;
}
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal((x1398+((py*x1397))+(((-1.0)*cj14*x1398)))),IkReal((x1399+((px*x1397))+(((-1.0)*cj14*x1399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1400.value)))+(x1401.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1402=IKsin(j11);
IkReal x1403=IKcos(j11);
IkReal x1404=(px*x1403);
IkReal x1405=((1.0)*x1402);
evalcond[0]=(((py*x1403))+(((-1.0)*px*x1405)));
evalcond[1]=((0.045)+(((-1.0)*x1404))+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*py*x1405)));
evalcond[2]=((-0.2125)+(((0.09)*x1404))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1406=((20.0)*sj14);
IkReal x1407=((3.0)*px);
IkReal x1408=((3.0)*py);
IkReal x1409=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1409;
j11eval[1]=((IKabs((((px*x1406))+(((-1.0)*cj14*x1407))+x1407)))+(IKabs(((((-1.0)*x1408))+((cj14*x1408))+(((-1.0)*py*x1406))))));
j11eval[2]=IKsign(x1409);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1410=pz*pz;
IkReal x1411=((80.0)*pp);
IkReal x1412=((88.0)*pz);
j11eval[0]=((((-1.0)*pp))+x1410);
j11eval[1]=IKsign(((((9.0)*x1410))+(((-9.0)*pp))));
j11eval[2]=((IKabs((((px*x1412))+(((-1.0)*px*x1411))+(((-17.0)*px)))))+(IKabs((((py*x1411))+(((17.0)*py))+(((-1.0)*py*x1412))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1414 = IKatan2WithCheck(IkReal(((-0.09)*py)),IkReal(((0.09)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1414.valid){
continue;
}
IkReal x1413=x1414.value;
j11array[0]=((-1.0)*x1413);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1413)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1415=IKsin(j11);
IkReal x1416=IKcos(j11);
IkReal x1417=((1.0)*px);
evalcond[0]=((((-1.0)*x1415*x1417))+((py*x1416)));
evalcond[1]=((((-1.0)*py*x1415))+(((-1.0)*x1416*x1417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
IkReal x1418=x1419.value;
j11array[0]=((-1.0)*x1418);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1418)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1420=IKsin(j11);
IkReal x1421=IKcos(j11);
evalcond[0]=((((-1.0)*px*x1421))+(((-1.0)*py*x1420)));
evalcond[1]=((((0.09)*px*x1420))+(((-0.09)*py*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1422=((110.0)*pz);
IkReal x1423=((100.0)*pp);
CheckValue<IkReal> x1424=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1424.valid){
continue;
}
CheckValue<IkReal> x1425 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1423))+(((-21.25)*px))+((px*x1422)))),IkReal(((((21.25)*py))+(((-1.0)*py*x1422))+((py*x1423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1425.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1424.value)))+(x1425.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1426=IKcos(j11);
IkReal x1427=IKsin(j11);
IkReal x1428=((1.0)*x1427);
IkReal x1429=(py*x1426);
evalcond[0]=((((-1.0)*py*x1428))+(((-1.0)*px*x1426)));
evalcond[1]=((0.045)+(((-1.0)*px*x1428))+(((0.3)*sj14))+(((-0.045)*cj14))+x1429);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*px*x1427))+(((-0.09)*x1429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1430=((0.3)*sj14);
IkReal x1431=((0.045)*py);
IkReal x1432=((0.045)*px);
CheckValue<IkReal> x1433=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1433.valid){
continue;
}
CheckValue<IkReal> x1434 = IKatan2WithCheck(IkReal((((px*x1430))+(((-1.0)*cj14*x1432))+x1432)),IkReal(((((-1.0)*x1431))+(((-1.0)*py*x1430))+((cj14*x1431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1434.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1433.value)))+(x1434.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1435=IKcos(j11);
IkReal x1436=IKsin(j11);
IkReal x1437=((1.0)*x1436);
IkReal x1438=(py*x1435);
evalcond[0]=((((-1.0)*px*x1435))+(((-1.0)*py*x1437)));
evalcond[1]=((0.045)+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*px*x1437))+x1438);
evalcond[2]=((-0.2125)+(((0.09)*px*x1436))+(((-0.09)*x1438))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1439=((20.0)*sj14);
IkReal x1440=((3.0)*px);
IkReal x1441=((3.0)*py);
IkReal x1442=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1442;
j11eval[1]=((IKabs((((py*x1439))+x1441+(((-1.0)*cj14*x1441)))))+(IKabs(((((-1.0)*px*x1439))+((cj14*x1440))+(((-1.0)*x1440))))));
j11eval[2]=IKsign(x1442);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1443=pz*pz;
IkReal x1444=((80.0)*pp);
IkReal x1445=((88.0)*pz);
j11eval[0]=((((-1.0)*x1443))+pp);
j11eval[1]=IKsign(((((-9.0)*x1443))+(((9.0)*pp))));
j11eval[2]=((IKabs(((((17.0)*py))+(((-1.0)*py*x1445))+((py*x1444)))))+(IKabs(((((-1.0)*px*x1444))+((px*x1445))+(((-17.0)*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1447 = IKatan2WithCheck(IkReal(((0.09)*py)),IkReal(((-0.09)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1447.valid){
continue;
}
IkReal x1446=x1447.value;
j11array[0]=((-1.0)*x1446);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1446)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1448=IKcos(j11);
IkReal x1449=IKsin(j11);
evalcond[0]=(((py*x1449))+((px*x1448)));
evalcond[1]=((((-1.0)*px*x1449))+((py*x1448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1451 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1451.valid){
continue;
}
IkReal x1450=x1451.value;
j11array[0]=((-1.0)*x1450);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1450)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1452=IKcos(j11);
IkReal x1453=IKsin(j11);
IkReal x1454=(px*x1453);
IkReal x1455=(py*x1452);
evalcond[0]=((((-1.0)*x1454))+x1455);
evalcond[1]=((((0.09)*x1455))+(((-0.09)*x1454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1456=((110.0)*pz);
IkReal x1457=((100.0)*pp);
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal((((px*x1456))+(((-1.0)*px*x1457))+(((-21.25)*px)))),IkReal(((((21.25)*py))+((py*x1457))+(((-1.0)*py*x1456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1459.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1458.value)+(((1.5707963267949)*(x1459.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1460=IKcos(j11);
IkReal x1461=IKsin(j11);
IkReal x1462=(px*x1461);
IkReal x1463=(py*x1460);
evalcond[0]=(((py*x1461))+((px*x1460)));
evalcond[1]=((-0.045)+(((0.045)*cj14))+(((-0.3)*sj14))+x1463+(((-1.0)*x1462)));
evalcond[2]=((-0.2125)+(((0.09)*x1463))+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1464=((0.3)*sj14);
IkReal x1465=((0.045)*py);
IkReal x1466=((0.045)*px);
CheckValue<IkReal> x1467=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal(((((-1.0)*x1466))+((cj14*x1466))+(((-1.0)*px*x1464)))),IkReal((((py*x1464))+(((-1.0)*cj14*x1465))+x1465)),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1467.value)))+(x1468.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1469=IKcos(j11);
IkReal x1470=IKsin(j11);
IkReal x1471=(px*x1470);
IkReal x1472=(py*x1469);
evalcond[0]=(((px*x1469))+((py*x1470)));
evalcond[1]=((-0.045)+(((0.045)*cj14))+(((-0.3)*sj14))+(((-1.0)*x1471))+x1472);
evalcond[2]=((-0.2125)+(((-0.09)*x1471))+(((-1.0)*pp))+(((0.09)*x1472))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs((((cj13*px))+((py*sj13)))))+(IKabs((((cj13*py))+(((-1.0)*px*sj13))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj14=0;
cj14=1.0;
j14=0;
IkReal x1473=((1.0)*px);
j11eval[0]=((IKabs(((((-1.0)*cj13*x1473))+(((-1.0)*py*sj13)))))+(IKabs((((cj13*py))+(((-1.0)*sj13*x1473))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[4], cj11array[4], sj11array[4];
bool j11valid[4]={false};
_nj11 = 4;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=1.5707963267949;
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
j11array[2]=3.14159265358979;
sj11array[2]=IKsin(j11array[2]);
cj11array[2]=IKcos(j11array[2]);
j11array[3]=-1.5707963267949;
sj11array[3]=IKsin(j11array[3]);
cj11array[3]=IKcos(j11array[3]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
if( j11array[2] > IKPI )
{
    j11array[2]-=IK2PI;
}
else if( j11array[2] < -IKPI )
{    j11array[2]+=IK2PI;
}
j11valid[2] = true;
if( j11array[3] > IKPI )
{
    j11array[3]-=IK2PI;
}
else if( j11array[3] < -IKPI )
{    j11array[3]+=IK2PI;
}
j11valid[3] = true;
for(int ij11 = 0; ij11 < 4; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 4; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
IkReal x1474=((1.0)*sj13);
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal((((cj13*py))+(((-1.0)*px*x1474)))),IkReal(((((-1.0)*py*x1474))+(((-1.0)*cj13*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
IkReal x1475=x1476.value;
j11array[0]=((-1.0)*x1475);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1475)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1477=IKcos(j11);
IkReal x1478=IKsin(j11);
IkReal x1479=((0.09)*sj13);
IkReal x1480=((0.09)*cj13);
IkReal x1481=(py*x1477);
IkReal x1482=(py*x1478);
IkReal x1483=(px*x1477);
IkReal x1484=(px*x1478);
evalcond[0]=(x1483+x1482);
evalcond[1]=((((-1.0)*x1484))+x1481);
evalcond[2]=((((-1.0)*sj13*x1484))+((cj13*x1482))+((cj13*x1483))+((sj13*x1481)));
evalcond[3]=((((-1.0)*x1479*x1481))+(((-1.0)*x1480*x1483))+(((-1.0)*x1480*x1482))+((x1479*x1484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal((((cj13*px))+((py*sj13)))),IkReal((((cj13*py))+(((-1.0)*px*sj13)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
IkReal x1485=x1486.value;
j11array[0]=((-1.0)*x1485);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1485)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1487=IKcos(j11);
IkReal x1488=IKsin(j11);
IkReal x1489=((0.09)*sj13);
IkReal x1490=((0.09)*cj13);
IkReal x1491=((1.0)*sj13);
IkReal x1492=(py*x1488);
IkReal x1493=(px*x1487);
IkReal x1494=(py*x1487);
IkReal x1495=((1.0)*px*x1488);
evalcond[0]=(x1492+x1493);
evalcond[1]=((((-1.0)*x1495))+x1494);
evalcond[2]=(((cj13*x1494))+(((-1.0)*x1491*x1493))+(((-1.0)*x1491*x1492))+(((-1.0)*cj13*x1495)));
evalcond[3]=(((px*x1488*x1489))+(((-1.0)*x1490*x1492))+(((-1.0)*x1490*x1493))+(((-1.0)*x1489*x1494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1497 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1497.valid){
continue;
}
IkReal x1496=x1497.value;
j11array[0]=((-1.0)*x1496);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1496)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1498=IKcos(j11);
IkReal x1499=IKsin(j11);
IkReal x1500=(py*sj13);
IkReal x1501=(px*sj13);
IkReal x1502=(cj13*px);
IkReal x1503=(cj13*py);
IkReal x1504=((1.0)*x1499);
IkReal x1505=(py*x1498);
IkReal x1506=((0.09)*x1498);
IkReal x1507=((0.09)*x1499);
evalcond[0]=((((-1.0)*px*x1504))+x1505);
evalcond[1]=(((x1499*x1503))+((x1498*x1502))+((x1498*x1500))+(((-1.0)*x1501*x1504)));
evalcond[2]=((((-1.0)*x1498*x1501))+((x1498*x1503))+(((-1.0)*x1500*x1504))+(((-1.0)*x1502*x1504)));
evalcond[3]=(((x1501*x1507))+(((-1.0)*x1500*x1506))+(((-1.0)*x1503*x1507))+(((-1.0)*x1502*x1506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1508=cj13*cj13;
IkReal x1509=((0.045)*cj14);
IkReal x1510=((0.3)*sj14);
IkReal x1511=((0.045)*py);
IkReal x1512=(cj13*sj13);
IkReal x1513=(px*x1512);
IkReal x1514=(py*x1508);
IkReal x1515=(px*x1508);
IkReal x1516=(x1510*x1512);
CheckValue<IkReal> x1517=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj13))+((sj13*(pz*pz))))),-1);
if(!x1517.valid){
continue;
}
CheckValue<IkReal> x1518 = IKatan2WithCheck(IkReal(((((-0.045)*px))+((x1510*x1515))+(((-1.0)*py*x1509*x1512))+(((-1.0)*px*x1510))+((py*x1516))+((px*x1509))+(((-1.0)*x1509*x1515))+((x1511*x1512))+(((0.045)*x1515)))),IkReal((((x1509*x1514))+((x1510*x1513))+(((-1.0)*x1510*x1514))+x1511+((py*x1510))+(((-1.0)*py*x1509))+(((-1.0)*x1509*x1513))+(((-1.0)*x1508*x1511))+(((0.045)*x1513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1518.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1517.value)))+(x1518.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1519=IKcos(j11);
IkReal x1520=IKsin(j11);
IkReal x1521=((0.3)*sj14);
IkReal x1522=((0.045)*cj14);
IkReal x1523=((0.09)*sj13);
IkReal x1524=((0.09)*cj13);
IkReal x1525=((1.0)*sj13);
IkReal x1526=(py*x1519);
IkReal x1527=(px*x1519);
IkReal x1528=(py*x1520);
IkReal x1529=((1.0)*px*x1520);
evalcond[0]=((((0.045)*cj13))+(((-1.0)*cj13*x1522))+x1527+x1528+((cj13*x1521)));
evalcond[1]=((((-1.0)*x1529))+(((-1.0)*sj13*x1522))+x1526+((sj13*x1521))+(((0.045)*sj13)));
evalcond[2]=((((-1.0)*x1525*x1528))+(((-1.0)*x1525*x1527))+(((-1.0)*cj13*x1529))+((cj13*x1526)));
evalcond[3]=((0.045)+(((-1.0)*px*x1520*x1525))+(((-1.0)*x1522))+x1521+((sj13*x1526))+((cj13*x1528))+((cj13*x1527)));
evalcond[4]=((-0.2125)+(((-1.0)*x1524*x1527))+(((-1.0)*x1524*x1528))+(((-1.0)*pp))+(((1.1)*pz))+(((-1.0)*x1523*x1526))+((px*x1520*x1523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1530=cj13*cj13;
IkReal x1531=(cj13*sj13);
IkReal x1532=((0.3)*sj14);
IkReal x1533=((0.045)*px);
IkReal x1534=((0.045)*py);
IkReal x1535=((0.045)*x1530);
CheckValue<IkReal> x1536 = IKatan2WithCheck(IkReal((((py*x1530*x1532))+(((-1.0)*px*x1531*x1532))+(((-1.0)*x1531*x1533))+((x1530*x1534))+((cj14*x1531*x1533))+(((-1.0)*cj14*x1530*x1534)))),IkReal((((py*x1531*x1532))+((px*x1530*x1532))+(((-1.0)*cj14*x1531*x1534))+((x1531*x1534))+((x1530*x1533))+(((-1.0)*cj14*x1530*x1533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1536.valid){
continue;
}
CheckValue<IkReal> x1537=IKPowWithIntegerCheck(IKsign((((cj13*(pz*pz)))+(((-1.0)*cj13*pp)))),-1);
if(!x1537.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1536.value)+(((1.5707963267949)*(x1537.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1538=IKcos(j11);
IkReal x1539=IKsin(j11);
IkReal x1540=((0.3)*sj14);
IkReal x1541=((0.045)*cj14);
IkReal x1542=((0.09)*sj13);
IkReal x1543=((0.09)*cj13);
IkReal x1544=((1.0)*sj13);
IkReal x1545=(py*x1538);
IkReal x1546=(px*x1538);
IkReal x1547=(py*x1539);
IkReal x1548=((1.0)*px*x1539);
evalcond[0]=((((0.045)*cj13))+(((-1.0)*cj13*x1541))+x1546+x1547+((cj13*x1540)));
evalcond[1]=((((-1.0)*sj13*x1541))+((sj13*x1540))+x1545+(((0.045)*sj13))+(((-1.0)*x1548)));
evalcond[2]=((((-1.0)*cj13*x1548))+((cj13*x1545))+(((-1.0)*x1544*x1546))+(((-1.0)*x1544*x1547)));
evalcond[3]=((0.045)+((sj13*x1545))+x1540+((cj13*x1547))+((cj13*x1546))+(((-1.0)*x1541))+(((-1.0)*px*x1539*x1544)));
evalcond[4]=((-0.2125)+(((-1.0)*x1543*x1547))+(((-1.0)*x1543*x1546))+(((-1.0)*pp))+(((1.1)*pz))+(((-1.0)*x1542*x1545))+((px*x1539*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1549=(py*sj13);
IkReal x1550=((0.3)*sj14);
IkReal x1551=(cj13*py);
IkReal x1552=(cj13*px);
IkReal x1553=((0.045)*cj13*cj14);
IkReal x1554=((0.045)*px*sj13);
CheckValue<IkReal> x1555=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1555.valid){
continue;
}
CheckValue<IkReal> x1556 = IKatan2WithCheck(IkReal((((px*sj13*x1550))+(((-1.0)*cj14*x1554))+(((-0.045)*x1551))+x1554+(((-1.0)*x1550*x1551))+(((0.045)*cj14*x1551)))),IkReal(((((-1.0)*x1549*x1550))+(((-0.045)*x1552))+(((-0.045)*x1549))+(((0.045)*cj14*x1549))+(((-1.0)*x1550*x1552))+(((0.045)*cj14*x1552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1556.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1555.value)))+(x1556.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1557=IKcos(j11);
IkReal x1558=IKsin(j11);
IkReal x1559=((0.3)*sj14);
IkReal x1560=((0.045)*cj14);
IkReal x1561=((0.09)*sj13);
IkReal x1562=((0.09)*cj13);
IkReal x1563=((1.0)*sj13);
IkReal x1564=(py*x1557);
IkReal x1565=(px*x1557);
IkReal x1566=(py*x1558);
IkReal x1567=((1.0)*px*x1558);
evalcond[0]=((((0.045)*cj13))+(((-1.0)*cj13*x1560))+x1565+x1566+((cj13*x1559)));
evalcond[1]=((((-1.0)*sj13*x1560))+((sj13*x1559))+x1564+(((0.045)*sj13))+(((-1.0)*x1567)));
evalcond[2]=((((-1.0)*cj13*x1567))+(((-1.0)*x1563*x1566))+(((-1.0)*x1563*x1565))+((cj13*x1564)));
evalcond[3]=((0.045)+((sj13*x1564))+x1559+((cj13*x1566))+((cj13*x1565))+(((-1.0)*x1560))+(((-1.0)*px*x1558*x1563)));
evalcond[4]=((-0.2125)+((px*x1558*x1561))+(((-1.0)*x1562*x1565))+(((-1.0)*x1562*x1566))+(((-1.0)*pp))+(((1.1)*pz))+(((-1.0)*x1561*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1568=(py*sj13);
IkReal x1569=((0.3)*sj14);
IkReal x1570=(cj13*py);
IkReal x1571=(cj13*px);
IkReal x1572=(pp+(((-1.0)*(pz*pz))));
IkReal x1573=((0.045)*cj13*cj14);
IkReal x1574=((0.045)*px*sj13);
j11eval[0]=x1572;
j11eval[1]=IKsign(x1572);
j11eval[2]=((IKabs((((x1569*x1571))+(((-0.045)*x1568))+(((-1.0)*x1568*x1569))+(((0.045)*cj14*x1568))+(((-0.045)*cj14*x1571))+(((0.045)*x1571)))))+(IKabs(((((-1.0)*cj14*x1574))+((x1569*x1570))+x1574+(((-0.045)*cj14*x1570))+(((0.045)*x1570))+((px*sj13*x1569))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1575=(((cj13*(pz*pz)))+(((-1.0)*cj13*pp)));
j11eval[0]=x1575;
j11eval[1]=IKsign(x1575);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1576=((((-1.0)*sj13*(pz*pz)))+((pp*sj13)));
j11eval[0]=x1576;
j11eval[1]=IKsign(x1576);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
IkReal x1577=((20.0)*sj14);
IkReal x1578=((3.0)*px);
IkReal x1579=((3.0)*py);
IkReal x1580=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1580;
j11eval[1]=((IKabs(((((-1.0)*cj14*x1578))+x1578+((px*x1577)))))+(IKabs(((((-1.0)*cj14*x1579))+x1579+((py*x1577))))));
j11eval[2]=IKsign(x1580);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
IkReal x1581=pz*pz;
IkReal x1582=((80.0)*pp);
IkReal x1583=((88.0)*pz);
j11eval[0]=((((-1.0)*pp))+x1581);
j11eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1581))));
j11eval[2]=((IKabs(((((-1.0)*py*x1583))+(((-1.0)*py*x1582))+(((-17.0)*py)))))+(IKabs(((((-1.0)*px*x1582))+(((-1.0)*px*x1583))+(((-17.0)*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1585 = IKatan2WithCheck(IkReal(((0.09)*px)),IkReal(((0.09)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1585.valid){
continue;
}
IkReal x1584=x1585.value;
j11array[0]=((-1.0)*x1584);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1584)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1586=IKsin(j11);
IkReal x1587=IKcos(j11);
IkReal x1588=((1.0)*px);
evalcond[0]=(((py*x1587))+(((-1.0)*x1586*x1588)));
evalcond[1]=((((-1.0)*py*x1586))+(((-1.0)*x1587*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1590 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1590.valid){
continue;
}
IkReal x1589=x1590.value;
j11array[0]=((-1.0)*x1589);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1589)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1591=IKsin(j11);
IkReal x1592=IKcos(j11);
IkReal x1593=(px*x1592);
IkReal x1594=(py*x1591);
evalcond[0]=((((-1.0)*x1593))+(((-1.0)*x1594)));
evalcond[1]=((((0.09)*x1593))+(((0.09)*x1594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1595=((110.0)*pz);
IkReal x1596=((100.0)*pp);
CheckValue<IkReal> x1597=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1597.valid){
continue;
}
CheckValue<IkReal> x1598 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1596))+(((-1.0)*py*x1595))+(((-21.25)*py)))),IkReal(((((-21.25)*px))+(((-1.0)*px*x1596))+(((-1.0)*px*x1595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1598.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1597.value)))+(x1598.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1599=IKsin(j11);
IkReal x1600=IKcos(j11);
IkReal x1601=(px*x1600);
IkReal x1602=((1.0)*x1599);
evalcond[0]=(((py*x1600))+(((-1.0)*px*x1602)));
evalcond[1]=((0.045)+(((-1.0)*x1601))+(((0.3)*sj14))+(((-1.0)*py*x1602))+(((-0.045)*cj14)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1601))+(((0.09)*py*x1599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1603=((0.3)*sj14);
IkReal x1604=((0.045)*py);
IkReal x1605=((0.045)*px);
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1606.valid){
continue;
}
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((((py*x1603))+x1604+(((-1.0)*cj14*x1604)))),IkReal((x1605+(((-1.0)*cj14*x1605))+((px*x1603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1606.value)))+(x1607.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1608=IKsin(j11);
IkReal x1609=IKcos(j11);
IkReal x1610=(px*x1609);
IkReal x1611=((1.0)*x1608);
evalcond[0]=(((py*x1609))+(((-1.0)*px*x1611)));
evalcond[1]=((0.045)+(((-1.0)*x1610))+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*py*x1611)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1608))+(((0.09)*x1610))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1612=((20.0)*sj14);
IkReal x1613=((3.0)*px);
IkReal x1614=((3.0)*py);
IkReal x1615=((((-1.0)*pp))+(pz*pz));
j11eval[0]=x1615;
j11eval[1]=((IKabs((x1613+(((-1.0)*cj14*x1613))+((px*x1612)))))+(IKabs((((py*x1612))+x1614+(((-1.0)*cj14*x1614))))));
j11eval[2]=IKsign(x1615);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1616=pz*pz;
IkReal x1617=((80.0)*pp);
IkReal x1618=((88.0)*pz);
j11eval[0]=((((-1.0)*x1616))+pp);
j11eval[1]=IKsign(((((-9.0)*x1616))+(((9.0)*pp))));
j11eval[2]=((IKabs(((((-1.0)*px*x1617))+(((-1.0)*px*x1618))+(((-17.0)*px)))))+(IKabs(((((-1.0)*py*x1618))+(((-1.0)*py*x1617))+(((-17.0)*py))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1620 = IKatan2WithCheck(IkReal(((-0.09)*px)),IkReal(((-0.09)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1620.valid){
continue;
}
IkReal x1619=x1620.value;
j11array[0]=((-1.0)*x1619);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1619)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1621=IKcos(j11);
IkReal x1622=IKsin(j11);
evalcond[0]=(((py*x1622))+((px*x1621)));
evalcond[1]=(((py*x1621))+(((-1.0)*px*x1622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
IkReal x1623=x1624.value;
j11array[0]=((-1.0)*x1623);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1623)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1625=IKsin(j11);
IkReal x1626=IKcos(j11);
evalcond[0]=(((py*x1626))+(((-1.0)*px*x1625)));
evalcond[1]=((((-0.09)*py*x1625))+(((-0.09)*px*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1627=((110.0)*pz);
IkReal x1628=((100.0)*pp);
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1628))+(((-1.0)*py*x1627))+(((-21.25)*py)))),IkReal(((((-21.25)*px))+(((-1.0)*px*x1628))+(((-1.0)*px*x1627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
CheckValue<IkReal> x1630=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1630.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1629.value)+(((1.5707963267949)*(x1630.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1631=IKsin(j11);
IkReal x1632=IKcos(j11);
IkReal x1633=(py*x1631);
IkReal x1634=(px*x1632);
evalcond[0]=(((py*x1632))+(((-1.0)*px*x1631)));
evalcond[1]=((0.045)+x1633+x1634+(((0.3)*sj14))+(((-0.045)*cj14)));
evalcond[2]=((-0.2125)+(((-0.09)*x1634))+(((-0.09)*x1633))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1635=((0.3)*sj14);
IkReal x1636=((0.045)*py);
IkReal x1637=((0.045)*px);
CheckValue<IkReal> x1638=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1638.valid){
continue;
}
CheckValue<IkReal> x1639 = IKatan2WithCheck(IkReal((((py*x1635))+x1636+(((-1.0)*cj14*x1636)))),IkReal((x1637+((px*x1635))+(((-1.0)*cj14*x1637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1639.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1638.value)))+(x1639.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1640=IKsin(j11);
IkReal x1641=IKcos(j11);
IkReal x1642=(py*x1640);
IkReal x1643=(px*x1641);
evalcond[0]=(((py*x1641))+(((-1.0)*px*x1640)));
evalcond[1]=((0.045)+x1643+x1642+(((0.3)*sj14))+(((-0.045)*cj14)));
evalcond[2]=((-0.2125)+(((-0.09)*x1642))+(((-0.09)*x1643))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1644=((20.0)*sj14);
IkReal x1645=((3.0)*px);
IkReal x1646=((3.0)*py);
IkReal x1647=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1647;
j11eval[1]=((IKabs(((((-1.0)*py*x1644))+(((-1.0)*x1646))+((cj14*x1646)))))+(IKabs((x1645+((px*x1644))+(((-1.0)*cj14*x1645))))));
j11eval[2]=IKsign(x1647);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1648=pz*pz;
IkReal x1649=((80.0)*pp);
IkReal x1650=((88.0)*pz);
j11eval[0]=(x1648+(((-1.0)*pp)));
j11eval[1]=IKsign(((((9.0)*x1648))+(((-9.0)*pp))));
j11eval[2]=((IKabs((((py*x1649))+((py*x1650))+(((17.0)*py)))))+(IKabs(((((-1.0)*px*x1649))+(((-1.0)*px*x1650))+(((-17.0)*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1652 = IKatan2WithCheck(IkReal(((-0.09)*py)),IkReal(((0.09)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1652.valid){
continue;
}
IkReal x1651=x1652.value;
j11array[0]=((-1.0)*x1651);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1651)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1653=IKcos(j11);
IkReal x1654=IKsin(j11);
evalcond[0]=(((px*x1653))+((py*x1654)));
evalcond[1]=((((-1.0)*px*x1654))+((py*x1653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1656 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1656.valid){
continue;
}
IkReal x1655=x1656.value;
j11array[0]=((-1.0)*x1655);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1655)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1657=IKsin(j11);
IkReal x1658=IKcos(j11);
IkReal x1659=(px*x1657);
IkReal x1660=(py*x1658);
evalcond[0]=(x1660+(((-1.0)*x1659)));
evalcond[1]=((((-0.09)*x1660))+(((0.09)*x1659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1661=((110.0)*pz);
IkReal x1662=((100.0)*pp);
CheckValue<IkReal> x1663=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1663.valid){
continue;
}
CheckValue<IkReal> x1664 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1661))+(((-1.0)*px*x1662))+(((-21.25)*px)))),IkReal(((((21.25)*py))+((py*x1661))+((py*x1662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1664.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1663.value)))+(x1664.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1665=IKcos(j11);
IkReal x1666=IKsin(j11);
IkReal x1667=(px*x1666);
IkReal x1668=(py*x1665);
evalcond[0]=(((px*x1665))+((py*x1666)));
evalcond[1]=((0.045)+x1668+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1667)));
evalcond[2]=((-0.2125)+(((-0.09)*x1668))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1669=((0.3)*sj14);
IkReal x1670=((0.045)*py);
IkReal x1671=((0.045)*px);
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal((x1671+((px*x1669))+(((-1.0)*cj14*x1671)))),IkReal(((((-1.0)*py*x1669))+((cj14*x1670))+(((-1.0)*x1670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1672.value)))+(x1673.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1674=IKcos(j11);
IkReal x1675=IKsin(j11);
IkReal x1676=(px*x1675);
IkReal x1677=(py*x1674);
evalcond[0]=(((py*x1675))+((px*x1674)));
evalcond[1]=((0.045)+x1677+(((0.3)*sj14))+(((-0.045)*cj14))+(((-1.0)*x1676)));
evalcond[2]=((-0.2125)+(((0.09)*x1676))+(((-0.09)*x1677))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1678=((20.0)*sj14);
IkReal x1679=((3.0)*px);
IkReal x1680=((3.0)*py);
IkReal x1681=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1681;
j11eval[1]=((IKabs(((((-1.0)*cj14*x1680))+x1680+((py*x1678)))))+(IKabs(((((-1.0)*px*x1678))+((cj14*x1679))+(((-1.0)*x1679))))));
j11eval[2]=IKsign(x1681);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1682=pz*pz;
IkReal x1683=((80.0)*pp);
IkReal x1684=((88.0)*pz);
j11eval[0]=((((-1.0)*x1682))+pp);
j11eval[1]=((IKabs(((((-17.0)*px))+(((-1.0)*px*x1684))+(((-1.0)*px*x1683)))))+(IKabs(((((17.0)*py))+((py*x1684))+((py*x1683))))));
j11eval[2]=IKsign(((((-9.0)*x1682))+(((9.0)*pp))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal(((0.09)*py)),IkReal(((-0.09)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
IkReal x1685=x1686.value;
j11array[0]=((-1.0)*x1685);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1685)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1687=IKsin(j11);
IkReal x1688=IKcos(j11);
IkReal x1689=((1.0)*px);
evalcond[0]=((((-1.0)*x1687*x1689))+((py*x1688)));
evalcond[1]=((((-1.0)*py*x1687))+(((-1.0)*x1688*x1689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1691 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1691.valid){
continue;
}
IkReal x1690=x1691.value;
j11array[0]=((-1.0)*x1690);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1690)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1692=IKcos(j11);
IkReal x1693=IKsin(j11);
evalcond[0]=((((-1.0)*px*x1692))+(((-1.0)*py*x1693)));
evalcond[1]=((((-0.09)*px*x1693))+(((0.09)*py*x1692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1694=((110.0)*pz);
IkReal x1695=((100.0)*pp);
CheckValue<IkReal> x1696 = IKatan2WithCheck(IkReal(((((-21.25)*px))+(((-1.0)*px*x1695))+(((-1.0)*px*x1694)))),IkReal(((((21.25)*py))+((py*x1695))+((py*x1694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1696.valid){
continue;
}
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1697.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1696.value)+(((1.5707963267949)*(x1697.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1698=IKcos(j11);
IkReal x1699=IKsin(j11);
IkReal x1700=((1.0)*x1699);
IkReal x1701=(py*x1698);
evalcond[0]=((((-1.0)*py*x1700))+(((-1.0)*px*x1698)));
evalcond[1]=((-0.045)+(((0.045)*cj14))+(((-0.3)*sj14))+x1701+(((-1.0)*px*x1700)));
evalcond[2]=((-0.2125)+(((-0.09)*px*x1699))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1702=((0.3)*sj14);
IkReal x1703=((0.045)*py);
IkReal x1704=((0.045)*px);
CheckValue<IkReal> x1705=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1702))+((cj14*x1704))+(((-1.0)*x1704)))),IkReal((x1703+(((-1.0)*cj14*x1703))+((py*x1702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1706.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1705.value)))+(x1706.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1707=IKcos(j11);
IkReal x1708=IKsin(j11);
IkReal x1709=((1.0)*x1708);
IkReal x1710=(py*x1707);
evalcond[0]=((((-1.0)*py*x1709))+(((-1.0)*px*x1707)));
evalcond[1]=((-0.045)+(((0.045)*cj14))+(((-0.3)*sj14))+x1710+(((-1.0)*px*x1709)));
evalcond[2]=((-0.2125)+(((-0.09)*px*x1708))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj14=0;
cj14=1.0;
j14=0;
j11eval[0]=((IKabs((((cj13*py))+((px*sj13)))))+(IKabs((((py*sj13))+(((-1.0)*cj13*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj14=0;
cj14=1.0;
j14=0;
IkReal x1711=((1.0)*px);
j11eval[0]=((IKabs((((py*sj13))+(((-1.0)*cj13*x1711)))))+(IKabs(((((-1.0)*sj13*x1711))+(((-1.0)*cj13*py))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[4], cj11array[4], sj11array[4];
bool j11valid[4]={false};
_nj11 = 4;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=1.5707963267949;
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
j11array[2]=3.14159265358979;
sj11array[2]=IKsin(j11array[2]);
cj11array[2]=IKcos(j11array[2]);
j11array[3]=-1.5707963267949;
sj11array[3]=IKsin(j11array[3]);
cj11array[3]=IKcos(j11array[3]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
if( j11array[2] > IKPI )
{
    j11array[2]-=IK2PI;
}
else if( j11array[2] < -IKPI )
{    j11array[2]+=IK2PI;
}
j11valid[2] = true;
if( j11array[3] > IKPI )
{
    j11array[3]-=IK2PI;
}
else if( j11array[3] < -IKPI )
{    j11array[3]+=IK2PI;
}
j11valid[3] = true;
for(int ij11 = 0; ij11 < 4; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 4; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
IkReal x1712=((1.0)*px);
CheckValue<IkReal> x1714 = IKatan2WithCheck(IkReal((((py*sj13))+(((-1.0)*cj13*x1712)))),IkReal(((((-1.0)*sj13*x1712))+(((-1.0)*cj13*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1714.valid){
continue;
}
IkReal x1713=x1714.value;
j11array[0]=((-1.0)*x1713);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1713)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1715=IKcos(j11);
IkReal x1716=IKsin(j11);
IkReal x1717=((0.09)*sj13);
IkReal x1718=((0.09)*cj13);
IkReal x1719=(px*x1715);
IkReal x1720=(py*x1716);
IkReal x1721=(py*x1715);
IkReal x1722=((1.0)*px*x1716);
evalcond[0]=(x1720+x1719);
evalcond[1]=(x1721+(((-1.0)*x1722)));
evalcond[2]=(((sj13*x1719))+(((-1.0)*cj13*x1722))+((cj13*x1721))+((sj13*x1720)));
evalcond[3]=(((x1718*x1720))+((px*x1716*x1717))+(((-1.0)*x1717*x1721))+((x1718*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1724 = IKatan2WithCheck(IkReal((((cj13*py))+((px*sj13)))),IkReal((((py*sj13))+(((-1.0)*cj13*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1724.valid){
continue;
}
IkReal x1723=x1724.value;
j11array[0]=((-1.0)*x1723);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1723)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1725=IKcos(j11);
IkReal x1726=IKsin(j11);
IkReal x1727=((1.0)*cj13);
IkReal x1728=((0.09)*sj13);
IkReal x1729=((0.09)*cj13);
IkReal x1730=(py*x1726);
IkReal x1731=(py*x1725);
IkReal x1732=(px*x1725);
IkReal x1733=(px*x1726);
evalcond[0]=(x1730+x1732);
evalcond[1]=(x1731+(((-1.0)*x1733)));
evalcond[2]=((((-1.0)*sj13*x1733))+((sj13*x1731))+(((-1.0)*x1727*x1730))+(((-1.0)*x1727*x1732)));
evalcond[3]=(((x1728*x1733))+(((-1.0)*x1728*x1731))+((x1729*x1732))+((x1729*x1730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
IkReal x1734=x1735.value;
j11array[0]=((-1.0)*x1734);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x1734)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1736=IKcos(j11);
IkReal x1737=IKsin(j11);
IkReal x1738=(cj13*py);
IkReal x1739=((0.09)*px);
IkReal x1740=(sj13*x1736);
IkReal x1741=((1.0)*x1737);
IkReal x1742=(cj13*x1736);
IkReal x1743=(sj13*x1737);
evalcond[0]=(((py*x1736))+(((-1.0)*px*x1741)));
evalcond[1]=(((py*x1743))+((px*x1740))+((x1736*x1738))+(((-1.0)*cj13*px*x1741)));
evalcond[2]=(((py*x1740))+(((-1.0)*x1738*x1741))+(((-1.0)*px*sj13*x1741))+(((-1.0)*px*x1742)));
evalcond[3]=(((x1739*x1743))+((x1739*x1742))+(((-0.09)*py*x1740))+(((0.09)*x1737*x1738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1744=cj13*cj13;
IkReal x1745=((0.045)*py);
IkReal x1746=(cj13*sj13);
IkReal x1747=((0.045)*px);
IkReal x1748=((0.3)*px*sj14);
IkReal x1749=((0.3)*py*sj14);
IkReal x1750=(cj14*x1747);
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal(((((-1.0)*cj14*x1745*x1746))+x1748+x1747+((x1744*x1750))+((x1745*x1746))+((x1746*x1749))+(((-1.0)*x1750))+(((-1.0)*x1744*x1747))+(((-1.0)*x1744*x1748)))),IkReal((((cj14*x1745))+((x1744*x1745))+((x1744*x1749))+((x1746*x1748))+((x1746*x1747))+(((-1.0)*x1746*x1750))+(((-1.0)*x1745))+(((-1.0)*x1749))+(((-1.0)*cj14*x1744*x1745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj13*(pz*pz)))+((pp*sj13)))),-1);
if(!x1752.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1751.value)+(((1.5707963267949)*(x1752.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1753=IKcos(j11);
IkReal x1754=IKsin(j11);
IkReal x1755=(py*sj13);
IkReal x1756=(cj13*py);
IkReal x1757=((0.3)*sj14);
IkReal x1758=((0.045)*cj14);
IkReal x1759=(px*sj13);
IkReal x1760=((1.0)*x1754);
IkReal x1761=(px*x1753);
IkReal x1762=((0.09)*x1754);
evalcond[0]=(x1761+(((-1.0)*cj13*x1757))+(((-0.045)*cj13))+((cj13*x1758))+((py*x1754)));
evalcond[1]=((((-1.0)*px*x1760))+((sj13*x1757))+(((0.045)*sj13))+((py*x1753))+(((-1.0)*sj13*x1758)));
evalcond[2]=((((-1.0)*cj13*px*x1760))+((x1754*x1755))+((x1753*x1759))+((x1753*x1756)));
evalcond[3]=((0.045)+((x1753*x1755))+x1757+(((-1.0)*x1759*x1760))+(((-1.0)*x1756*x1760))+(((-1.0)*cj13*x1761))+(((-1.0)*x1758)));
evalcond[4]=((-0.2125)+((x1759*x1762))+(((-0.09)*x1753*x1755))+((x1756*x1762))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*cj13*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1763=cj13*cj13;
IkReal x1764=(cj13*sj13);
IkReal x1765=((0.3)*sj14);
IkReal x1766=((0.045)*px);
IkReal x1767=((0.045)*py);
IkReal x1768=((0.045)*x1763);
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1764*x1765))+(((-1.0)*py*x1763*x1765))+(((-1.0)*x1763*x1767))+((cj14*x1764*x1766))+((cj14*x1763*x1767))+(((-1.0)*x1764*x1766)))),IkReal(((((-1.0)*cj14*x1764*x1767))+(((-1.0)*px*x1763*x1765))+((x1764*x1767))+(((-1.0)*x1763*x1766))+((py*x1764*x1765))+((cj14*x1763*x1766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(IKsign((((cj13*(pz*pz)))+(((-1.0)*cj13*pp)))),-1);
if(!x1770.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1769.value)+(((1.5707963267949)*(x1770.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1771=IKcos(j11);
IkReal x1772=IKsin(j11);
IkReal x1773=(py*sj13);
IkReal x1774=(cj13*py);
IkReal x1775=((0.3)*sj14);
IkReal x1776=((0.045)*cj14);
IkReal x1777=(px*sj13);
IkReal x1778=((1.0)*x1772);
IkReal x1779=(px*x1771);
IkReal x1780=((0.09)*x1772);
evalcond[0]=(x1779+(((-0.045)*cj13))+(((-1.0)*cj13*x1775))+((py*x1772))+((cj13*x1776)));
evalcond[1]=((((-1.0)*sj13*x1776))+(((-1.0)*px*x1778))+((sj13*x1775))+(((0.045)*sj13))+((py*x1771)));
evalcond[2]=(((x1771*x1777))+((x1771*x1774))+(((-1.0)*cj13*px*x1778))+((x1772*x1773)));
evalcond[3]=((0.045)+x1775+((x1771*x1773))+(((-1.0)*x1776))+(((-1.0)*x1774*x1778))+(((-1.0)*cj13*x1779))+(((-1.0)*x1777*x1778)));
evalcond[4]=((-0.2125)+((x1774*x1780))+((x1777*x1780))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*cj13*x1779))+(((-0.09)*x1771*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1781=(py*sj13);
IkReal x1782=((0.3)*sj14);
IkReal x1783=(cj13*py);
IkReal x1784=(cj13*px);
IkReal x1785=((0.045)*cj13*cj14);
IkReal x1786=((0.045)*px*sj13);
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal((((x1782*x1783))+(((0.045)*x1783))+x1786+(((-0.045)*cj14*x1783))+((px*sj13*x1782))+(((-1.0)*cj14*x1786)))),IkReal((((x1782*x1784))+(((0.045)*x1784))+(((-0.045)*cj14*x1784))+(((0.045)*cj14*x1781))+(((-1.0)*x1781*x1782))+(((-0.045)*x1781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1787.value)))+(x1788.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x1789=IKcos(j11);
IkReal x1790=IKsin(j11);
IkReal x1791=(py*sj13);
IkReal x1792=(cj13*py);
IkReal x1793=((0.3)*sj14);
IkReal x1794=((0.045)*cj14);
IkReal x1795=(px*sj13);
IkReal x1796=((1.0)*x1790);
IkReal x1797=(px*x1789);
IkReal x1798=((0.09)*x1790);
evalcond[0]=(x1797+((py*x1790))+(((-0.045)*cj13))+((cj13*x1794))+(((-1.0)*cj13*x1793)));
evalcond[1]=(((sj13*x1793))+((py*x1789))+(((-1.0)*sj13*x1794))+(((0.045)*sj13))+(((-1.0)*px*x1796)));
evalcond[2]=((((-1.0)*cj13*px*x1796))+((x1789*x1795))+((x1789*x1792))+((x1790*x1791)));
evalcond[3]=((0.045)+(((-1.0)*x1792*x1796))+(((-1.0)*x1794))+(((-1.0)*x1795*x1796))+x1793+(((-1.0)*cj13*x1797))+((x1789*x1791)));
evalcond[4]=((-0.2125)+(((-0.09)*x1789*x1791))+(((0.09)*cj13*x1797))+(((-1.0)*pp))+(((-1.1)*pz))+((x1792*x1798))+((x1795*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1799=((0.3)*sj14);
IkReal x1800=(py*sj13);
IkReal x1801=(cj12*cj13);
IkReal x1802=((0.045)*cj14);
IkReal x1803=((0.045)*py);
IkReal x1804=((0.045)*px);
IkReal x1805=(sj12*sj14);
IkReal x1806=(px*sj13);
IkReal x1807=((0.55)*sj12);
IkReal x1808=((0.3)*cj14*sj12);
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1809.valid){
continue;
}
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal((((x1799*x1806))+(((-1.0)*py*x1799*x1801))+((py*x1801*x1802))+(((-1.0)*x1802*x1806))+(((-1.0)*x1801*x1803))+(((-1.0)*py*x1807))+(((-1.0)*py*x1808))+(((-1.0)*x1803*x1805))+((sj13*x1804)))),IkReal(((((-0.045)*x1800))+((x1800*x1802))+(((-1.0)*x1799*x1800))+(((-1.0)*x1804*x1805))+(((-1.0)*x1801*x1804))+(((-1.0)*px*x1808))+(((-1.0)*px*x1807))+((px*x1801*x1802))+(((-1.0)*px*x1799*x1801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1809.value)))+(x1810.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1811=IKcos(j11);
IkReal x1812=IKsin(j11);
IkReal x1813=(pz*sj12);
IkReal x1814=(cj12*cj13);
IkReal x1815=((0.045)*sj14);
IkReal x1816=(cj12*pz);
IkReal x1817=((1.0)*sj13);
IkReal x1818=((1.0)*sj12);
IkReal x1819=((0.3)*sj14);
IkReal x1820=((0.045)*sj13);
IkReal x1821=((0.045)*cj14);
IkReal x1822=((1.1)*sj12);
IkReal x1823=((0.3)*cj14);
IkReal x1824=(py*x1811);
IkReal x1825=(px*x1811);
IkReal x1826=((0.09)*x1812);
IkReal x1827=(py*x1812);
IkReal x1828=((1.0)*px*x1812);
evalcond[0]=((((-1.0)*x1828))+(((-1.0)*cj14*x1820))+x1824+x1820+((sj13*x1819)));
evalcond[1]=((-0.55)+(((-1.0)*x1815))+(((-1.0)*x1823))+(((-1.0)*x1818*x1827))+(((-1.0)*x1818*x1825))+x1816);
evalcond[2]=((((-1.0)*x1813*x1817))+((cj13*x1824))+(((-1.0)*cj12*x1817*x1825))+(((-1.0)*cj12*x1817*x1827))+(((-1.0)*cj13*x1828)));
evalcond[3]=((((0.045)*x1814))+((sj12*x1823))+((sj12*x1815))+((x1814*x1819))+x1825+x1827+(((-1.0)*x1814*x1821))+(((0.55)*sj12)));
evalcond[4]=((0.045)+(((-1.0)*x1821))+(((-1.0)*px*x1812*x1817))+((sj13*x1824))+((cj13*x1813))+x1819+((x1814*x1825))+((x1814*x1827)));
evalcond[5]=((-0.2125)+(((1.1)*x1816))+(((-0.09)*sj13*x1824))+(((-1.0)*pp))+((px*sj13*x1826))+(((-0.09)*cj13*x1813))+(((-1.0)*x1822*x1825))+(((-1.0)*x1822*x1827))+(((-1.0)*py*x1814*x1826))+(((-0.09)*x1814*x1825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1829=(py*pz);
IkReal x1830=(cj13*px);
IkReal x1831=(px*sj13);
IkReal x1832=(cj13*sj12);
IkReal x1833=((0.3)*cj14);
IkReal x1834=((0.55)*py);
IkReal x1835=(cj12*sj13);
IkReal x1836=((0.045)*sj14);
IkReal x1837=(cj13*py);
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal((((cj12*x1831*x1836))+((cj12*x1831*x1833))+(((0.55)*cj12*x1831))+(((-1.0)*x1833*x1837))+(((-1.0)*x1836*x1837))+((cj12*cj13*x1829))+(((-1.0)*cj13*x1834))+(((-1.0)*pz*x1831)))),IkReal(((((-0.55)*x1830))+(((-1.0)*x1834*x1835))+((sj13*x1829))+((cj12*pz*x1830))+(((-1.0)*py*x1835*x1836))+(((-1.0)*py*x1833*x1835))+(((-1.0)*x1830*x1833))+(((-1.0)*x1830*x1836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1832*(pz*pz)))+((pp*x1832)))),-1);
if(!x1839.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1838.value)+(((1.5707963267949)*(x1839.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1840=IKcos(j11);
IkReal x1841=IKsin(j11);
IkReal x1842=(pz*sj12);
IkReal x1843=(cj12*cj13);
IkReal x1844=((0.045)*sj14);
IkReal x1845=(cj12*pz);
IkReal x1846=((1.0)*sj13);
IkReal x1847=((1.0)*sj12);
IkReal x1848=((0.3)*sj14);
IkReal x1849=((0.045)*sj13);
IkReal x1850=((0.045)*cj14);
IkReal x1851=((1.1)*sj12);
IkReal x1852=((0.3)*cj14);
IkReal x1853=(py*x1840);
IkReal x1854=(px*x1840);
IkReal x1855=((0.09)*x1841);
IkReal x1856=(py*x1841);
IkReal x1857=((1.0)*px*x1841);
evalcond[0]=((((-1.0)*cj14*x1849))+x1853+x1849+((sj13*x1848))+(((-1.0)*x1857)));
evalcond[1]=((-0.55)+(((-1.0)*x1844))+x1845+(((-1.0)*x1847*x1854))+(((-1.0)*x1847*x1856))+(((-1.0)*x1852)));
evalcond[2]=((((-1.0)*x1842*x1846))+((cj13*x1853))+(((-1.0)*cj13*x1857))+(((-1.0)*cj12*x1846*x1856))+(((-1.0)*cj12*x1846*x1854)));
evalcond[3]=(((sj12*x1852))+(((-1.0)*x1843*x1850))+x1854+x1856+((x1843*x1848))+((sj12*x1844))+(((0.045)*x1843))+(((0.55)*sj12)));
evalcond[4]=((0.045)+((x1843*x1854))+((x1843*x1856))+((cj13*x1842))+((sj13*x1853))+(((-1.0)*px*x1841*x1846))+x1848+(((-1.0)*x1850)));
evalcond[5]=((-0.2125)+(((1.1)*x1845))+(((-0.09)*sj13*x1853))+(((-1.0)*x1851*x1854))+(((-1.0)*x1851*x1856))+((px*sj13*x1855))+(((-1.0)*pp))+(((-0.09)*x1843*x1854))+(((-0.09)*cj13*x1842))+(((-1.0)*py*x1843*x1855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1858=(px*sj14);
IkReal x1859=(sj12*sj13);
IkReal x1860=((0.045)*cj14);
IkReal x1861=(cj12*pz);
IkReal x1862=(py*sj14);
IkReal x1863=((0.3)*cj14);
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(((((-0.55)*py))+((py*x1861))+(((-0.045)*x1862))+(((0.3)*x1858*x1859))+(((-1.0)*px*x1859*x1860))+(((0.045)*px*x1859))+(((-1.0)*py*x1863)))),IkReal(((((-0.55)*px))+(((-0.3)*x1859*x1862))+(((-1.0)*px*x1863))+(((-0.045)*py*x1859))+(((-0.045)*x1858))+((px*x1861))+((py*x1859*x1860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
CheckValue<IkReal> x1865=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj12*(pz*pz)))+((pp*sj12)))),-1);
if(!x1865.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1864.value)+(((1.5707963267949)*(x1865.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1866=IKcos(j11);
IkReal x1867=IKsin(j11);
IkReal x1868=(pz*sj12);
IkReal x1869=(cj12*cj13);
IkReal x1870=((0.045)*sj14);
IkReal x1871=(cj12*pz);
IkReal x1872=((1.0)*sj13);
IkReal x1873=((1.0)*sj12);
IkReal x1874=((0.3)*sj14);
IkReal x1875=((0.045)*sj13);
IkReal x1876=((0.045)*cj14);
IkReal x1877=((1.1)*sj12);
IkReal x1878=((0.3)*cj14);
IkReal x1879=(py*x1866);
IkReal x1880=(px*x1866);
IkReal x1881=((0.09)*x1867);
IkReal x1882=(py*x1867);
IkReal x1883=((1.0)*px*x1867);
evalcond[0]=((((-1.0)*cj14*x1875))+x1875+x1879+((sj13*x1874))+(((-1.0)*x1883)));
evalcond[1]=((-0.55)+(((-1.0)*x1873*x1880))+(((-1.0)*x1873*x1882))+(((-1.0)*x1870))+(((-1.0)*x1878))+x1871);
evalcond[2]=((((-1.0)*x1868*x1872))+((cj13*x1879))+(((-1.0)*cj12*x1872*x1882))+(((-1.0)*cj12*x1872*x1880))+(((-1.0)*cj13*x1883)));
evalcond[3]=((((0.045)*x1869))+(((-1.0)*x1869*x1876))+x1882+x1880+((sj12*x1878))+((sj12*x1870))+((x1869*x1874))+(((0.55)*sj12)));
evalcond[4]=((0.045)+((x1869*x1882))+((x1869*x1880))+(((-1.0)*x1876))+x1874+((cj13*x1868))+((sj13*x1879))+(((-1.0)*px*x1867*x1872)));
evalcond[5]=((-0.2125)+((px*sj13*x1881))+(((-0.09)*x1869*x1880))+(((1.1)*x1871))+(((-1.0)*pp))+(((-0.09)*sj13*x1879))+(((-0.09)*cj13*x1868))+(((-1.0)*py*x1869*x1881))+(((-1.0)*x1877*x1882))+(((-1.0)*x1877*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
IkReal x1884=((0.045)*sj13);
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
IkReal x1885=((1.0)*(x1887.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1888.valid){
continue;
}
if( (((x1888.value)*(((((-1.0)*cj14*x1884))+(((0.3)*sj13*sj14))+x1884)))) < -1-IKFAST_SINCOS_THRESH || (((x1888.value)*(((((-1.0)*cj14*x1884))+(((0.3)*sj13*sj14))+x1884)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1886=IKasin(((x1888.value)*(((((-1.0)*cj14*x1884))+(((0.3)*sj13*sj14))+x1884))));
j11array[0]=((((-1.0)*x1886))+(((-1.0)*x1885)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+x1886+(((-1.0)*x1885)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
IkReal j12eval[2];
IkReal x1889=(cj13*pz);
IkReal x1890=(cj11*px);
IkReal x1891=(py*sj11);
IkReal x1892=((0.3)*cj14);
IkReal x1893=((6.66666666666667)*cj14);
IkReal x1894=((0.045)*sj14);
j12eval[0]=(((sj14*x1891))+((sj14*x1890))+(((12.2222222222222)*x1890))+(((12.2222222222222)*x1891))+((cj14*x1889))+((x1891*x1893))+(((-6.66666666666667)*sj14*x1889))+(((-1.0)*x1889))+((x1890*x1893)));
j12eval[1]=IKsign(((((0.55)*x1891))+(((0.55)*x1890))+(((-0.045)*x1889))+((x1891*x1892))+((x1891*x1894))+(((-0.3)*sj14*x1889))+(((0.045)*cj14*x1889))+((x1890*x1894))+((x1890*x1892))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x1895=cj11*cj11;
IkReal x1896=py*py;
IkReal x1897=(sj13*x1896);
IkReal x1898=(((sj13*x1895*(px*px)))+(((2.0)*cj11*px*py*sj11*sj13))+(((-1.0)*x1895*x1897))+x1897+((sj13*(pz*pz))));
j12eval[0]=x1898;
j12eval[1]=IKsign(x1898);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x1899=((0.045)*cj14);
IkReal x1900=(pz*sj13);
IkReal x1901=((0.3)*sj14);
IkReal x1902=((6.66666666666667)*sj14);
IkReal x1903=(cj11*cj13*px*sj13);
IkReal x1904=(cj13*py*sj11*sj13);
j12eval[0]=((((-1.0)*x1902*x1903))+(((-1.0)*x1902*x1904))+(((-6.66666666666667)*cj14*x1900))+(((-12.2222222222222)*x1900))+((cj14*x1904))+((cj14*x1903))+(((-1.0)*x1903))+(((-1.0)*x1904))+(((-1.0)*sj14*x1900)));
j12eval[1]=IKsign(((((-0.3)*cj14*x1900))+(((-1.0)*x1901*x1904))+(((-1.0)*x1901*x1903))+(((-0.045)*x1903))+(((-0.045)*x1904))+((x1899*x1903))+((x1899*x1904))+(((-0.55)*x1900))+(((-0.045)*sj14*x1900))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x1905=cj14*cj14;
IkReal x1906=(cj14*sj14);
IkReal x1907=((6.66666666666667)*cj14);
IkReal x1908=(cj11*px);
IkReal x1909=(py*sj11);
IkReal x1910=((0.045)*sj14);
IkReal x1911=((0.3)*cj14);
IkReal x1912=((0.045)*pz);
IkReal x1913=(pz*sj14);
j12eval[0]=(((sj14*x1908))+((sj14*x1909))+(((12.2222222222222)*x1909))+(((12.2222222222222)*x1908))+(((-1.0)*pz))+((cj14*pz))+(((-6.66666666666667)*x1913))+((x1907*x1908))+((x1907*x1909)));
j12eval[1]=IKsign(((((-0.3)*x1913))+(((0.55)*x1908))+(((0.55)*x1909))+((cj14*x1912))+((x1908*x1911))+((x1908*x1910))+((x1909*x1910))+((x1909*x1911))+(((-1.0)*x1912))));
j12eval[2]=((IKabs(((-0.304525)+(((-0.087975)*x1905))+(((-0.0495)*sj14))+(pz*pz)+(((-0.027)*x1906))+(((-0.33)*cj14)))))+(IKabs(((-0.03825)+(((-0.087975)*x1906))+(((-0.167025)*sj14))+((pz*x1909))+((pz*x1908))+(((0.01125)*cj14))+(((0.027)*x1905))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x1914=cj14*cj14;
IkReal x1915=(cj14*sj14);
IkReal x1916=(cj14*pz);
IkReal x1917=(cj11*px);
IkReal x1918=(py*sj11);
IkReal x1919=((1.0)*cj14);
IkReal x1920=((0.3)*sj14);
IkReal x1921=((0.045)*cj14);
IkReal x1922=(pz*sj14);
IkReal x1923=((6.66666666666667)*sj14);
IkReal x1924=((1.0)*pz);
j12eval[0]=((((-1.0)*x1917*x1919))+(((12.2222222222222)*pz))+((x1918*x1923))+x1922+x1918+x1917+((x1917*x1923))+(((-1.0)*x1918*x1919))+(((6.66666666666667)*x1916)));
j12eval[1]=((IKabs(((-0.092025)+(((-0.027)*sj14))+(((0.087975)*x1914))+(pz*pz)+(((0.027)*x1915))+(((0.00405)*cj14)))))+(IKabs(((-0.03825)+(((-0.087975)*x1915))+(((-1.0)*x1918*x1924))+(((-1.0)*x1917*x1924))+(((-0.167025)*sj14))+(((0.01125)*cj14))+(((0.027)*x1914))))));
j12eval[2]=IKsign(((((-1.0)*x1918*x1921))+(((0.045)*x1918))+(((0.045)*x1917))+((x1918*x1920))+(((-1.0)*x1917*x1921))+(((0.045)*x1922))+(((0.3)*x1916))+((x1917*x1920))+(((0.55)*pz))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=0;
cj13=1.0;
j13=0;
IkReal x1925=(cj14*pz);
IkReal x1926=(py*sj11);
IkReal x1927=((0.045)*sj14);
IkReal x1928=(cj11*px);
IkReal x1929=((0.3)*cj14);
IkReal x1930=(pz*sj14);
IkReal x1931=((6.66666666666667)*cj14);
j12eval[0]=(((sj14*x1928))+((sj14*x1926))+(((-1.0)*pz))+((x1926*x1931))+x1925+(((-6.66666666666667)*x1930))+((x1928*x1931))+(((12.2222222222222)*x1926))+(((12.2222222222222)*x1928)));
j12eval[1]=IKsign(((((-0.045)*pz))+((x1928*x1929))+((x1927*x1928))+(((-0.3)*x1930))+(((0.55)*x1926))+(((0.55)*x1928))+(((0.045)*x1925))+((x1926*x1927))+((x1926*x1929))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x1932=((-1.0)*py);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1932);
rxp0_1=(px*r20);
rxp1_0=(r21*x1932);
rxp1_1=(px*r21);
rxp2_0=(r22*x1932);
rxp2_1=(px*r22);
j12eval[0]=((((-1.0)*py*sj11))+(((-1.0)*cj11*px)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
evalcond[1]=py;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x1933=((-1.0)*py);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1933);
rxp0_1=0;
rxp1_0=(r21*x1933);
rxp1_1=0;
rxp2_0=(r22*x1933);
rxp2_1=0;
px=0;
j11=0;
sj11=0;
cj11=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x1934=((-1.0)*py);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x1934);
rxp0_1=0;
rxp1_0=(r21*x1934);
rxp1_1=0;
rxp2_0=(r22*x1934);
rxp2_1=0;
px=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x1935=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
rxp0_2=(r10*x1935);
rxp1_2=(r11*x1935);
rxp2_2=(r12*x1935);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x1936=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
rxp0_2=(r10*x1936);
rxp1_2=(r11*x1936);
rxp2_2=(r12*x1936);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1937=py*py;
IkReal x1938=cj11*cj11;
IkReal x1939=(cj11*px);
IkReal x1940=(py*sj11);
IkReal x1941=((4400.0)*x1938);
CheckValue<IkReal> x1942=IKPowWithIntegerCheck(((((-306.0)*x1940))+(((-306.0)*x1939))),-1);
if(!x1942.valid){
continue;
}
if( IKabs(((((-1.17647058823529)*x1940))+(((-1.17647058823529)*x1939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1942.value)*(((3179.0)+((x1937*x1941))+(((-1.0)*x1941*(px*px)))+(((-8800.0)*x1939*x1940))+(((-4400.0)*x1937)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.17647058823529)*x1940))+(((-1.17647058823529)*x1939))))+IKsqr(((x1942.value)*(((3179.0)+((x1937*x1941))+(((-1.0)*x1941*(px*px)))+(((-8800.0)*x1939*x1940))+(((-4400.0)*x1937))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.17647058823529)*x1940))+(((-1.17647058823529)*x1939))), ((x1942.value)*(((3179.0)+((x1937*x1941))+(((-1.0)*x1941*(px*px)))+(((-8800.0)*x1939*x1940))+(((-4400.0)*x1937))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x1943=IKcos(j12);
IkReal x1944=IKsin(j12);
IkReal x1945=(py*sj11);
IkReal x1946=(cj11*px);
IkReal x1947=((1.0)*x1944);
IkReal x1948=((0.09)*x1943);
IkReal x1949=((1.1)*x1944);
evalcond[0]=((-0.85)*x1943);
evalcond[1]=((((0.85)*x1944))+x1946+x1945);
evalcond[2]=(((x1943*x1946))+((x1943*x1945)));
evalcond[3]=((-0.85)+(((-1.0)*x1945*x1947))+(((-1.0)*x1946*x1947)));
evalcond[4]=((-0.935)+(((-1.0)*x1945*x1948))+(((-1.0)*x1945*x1949))+(((-1.0)*x1946*x1948))+(((-1.0)*x1946*x1949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1950=cj11*cj11;
IkReal x1951=py*py;
IkReal x1952=cj14*cj14;
IkReal x1953=(cj14*sj14);
IkReal x1954=(py*sj11);
IkReal x1955=((0.3)*cj14);
IkReal x1956=(cj11*px);
IkReal x1957=((0.045)*pz);
IkReal x1958=((0.045)*sj14);
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal(((0.092025)+(((-0.027)*x1953))+((x1950*x1951))+(((-2.0)*x1954*x1956))+(((-1.0)*x1951))+(((0.027)*sj14))+(((-0.087975)*x1952))+(((-0.00405)*cj14))+(((-1.0)*x1950*(px*px))))),IkReal(((-0.03825)+((pz*x1956))+((pz*x1954))+(((-0.167025)*sj14))+(((0.01125)*cj14))+(((0.027)*x1952))+(((-0.087975)*x1953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
CheckValue<IkReal> x1960=IKPowWithIntegerCheck(IKsign(((((0.55)*x1956))+(((0.55)*x1954))+(((-1.0)*x1957))+((x1955*x1956))+((cj14*x1957))+((x1954*x1955))+((x1954*x1958))+(((-0.3)*pz*sj14))+((x1956*x1958)))),-1);
if(!x1960.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1959.value)+(((1.5707963267949)*(x1960.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x1961=IKcos(j12);
IkReal x1962=IKsin(j12);
IkReal x1963=((0.045)*sj14);
IkReal x1964=(py*sj11);
IkReal x1965=(cj11*px);
IkReal x1966=((0.045)*cj14);
IkReal x1967=((0.3)*sj14);
IkReal x1968=((0.3)*cj14);
IkReal x1969=(pz*x1961);
IkReal x1970=((1.0)*x1962);
IkReal x1971=((0.09)*x1961);
IkReal x1972=(pz*x1962);
IkReal x1973=((1.1)*x1962);
evalcond[0]=((0.045)+(((-1.0)*x1966))+x1967+x1972+((x1961*x1965))+((x1961*x1964)));
evalcond[1]=((-0.55)+(((-1.0)*x1964*x1970))+(((-1.0)*x1965*x1970))+(((-1.0)*x1968))+(((-1.0)*x1963))+x1969);
evalcond[2]=(pz+(((-1.0)*x1961*x1963))+(((-1.0)*x1961*x1968))+((x1962*x1967))+(((-0.55)*x1961))+(((-1.0)*x1962*x1966))+(((0.045)*x1962)));
evalcond[3]=(x1964+x1965+(((-1.0)*x1961*x1966))+((x1961*x1967))+((x1962*x1963))+((x1962*x1968))+(((0.55)*x1962))+(((0.045)*x1961)));
evalcond[4]=((-0.2125)+(((-1.0)*x1964*x1973))+(((-1.0)*x1964*x1971))+(((1.1)*x1969))+(((-1.0)*x1965*x1973))+(((-1.0)*x1965*x1971))+(((-1.0)*pp))+(((-0.09)*x1972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1974=cj14*cj14;
IkReal x1975=(cj14*sj14);
IkReal x1976=((0.3)*sj14);
IkReal x1977=(cj11*px);
IkReal x1978=(py*sj11);
IkReal x1979=((0.045)*cj14);
IkReal x1980=((1.0)*pz);
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal(((-0.03825)+(((-0.167025)*sj14))+(((0.01125)*cj14))+(((-1.0)*x1977*x1980))+(((-1.0)*x1978*x1980))+(((-0.087975)*x1975))+(((0.027)*x1974)))),IkReal(((-0.092025)+(((-0.027)*sj14))+(pz*pz)+(((0.087975)*x1974))+(((0.00405)*cj14))+(((0.027)*x1975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
CheckValue<IkReal> x1982=IKPowWithIntegerCheck(IKsign(((((0.045)*pz*sj14))+((x1976*x1978))+((x1976*x1977))+(((-1.0)*x1978*x1979))+(((-1.0)*x1977*x1979))+(((0.3)*cj14*pz))+(((0.55)*pz))+(((0.045)*x1977))+(((0.045)*x1978)))),-1);
if(!x1982.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1981.value)+(((1.5707963267949)*(x1982.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x1983=IKcos(j12);
IkReal x1984=IKsin(j12);
IkReal x1985=((0.045)*sj14);
IkReal x1986=(py*sj11);
IkReal x1987=(cj11*px);
IkReal x1988=((0.045)*cj14);
IkReal x1989=((0.3)*sj14);
IkReal x1990=((0.3)*cj14);
IkReal x1991=(pz*x1983);
IkReal x1992=((1.0)*x1984);
IkReal x1993=((0.09)*x1983);
IkReal x1994=(pz*x1984);
IkReal x1995=((1.1)*x1984);
evalcond[0]=((0.045)+(((-1.0)*x1988))+x1989+x1994+((x1983*x1986))+((x1983*x1987)));
evalcond[1]=((-0.55)+(((-1.0)*x1985))+(((-1.0)*x1986*x1992))+(((-1.0)*x1987*x1992))+x1991+(((-1.0)*x1990)));
evalcond[2]=((((-0.55)*x1983))+((x1984*x1989))+(((-1.0)*x1983*x1990))+(((-1.0)*x1983*x1985))+(((-1.0)*x1984*x1988))+pz+(((0.045)*x1984)));
evalcond[3]=(((x1984*x1985))+(((-1.0)*x1983*x1988))+x1986+x1987+((x1984*x1990))+(((0.55)*x1984))+((x1983*x1989))+(((0.045)*x1983)));
evalcond[4]=((-0.2125)+(((-1.0)*x1986*x1993))+(((-1.0)*x1986*x1995))+(((-0.09)*x1994))+(((-1.0)*pp))+(((-1.0)*x1987*x1995))+(((-1.0)*x1987*x1993))+(((1.1)*x1991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1996=cj14*cj14;
IkReal x1997=(cj14*sj14);
IkReal x1998=(py*sj11);
IkReal x1999=((0.045)*sj14);
IkReal x2000=((0.3)*cj14);
IkReal x2001=(cj11*px);
IkReal x2002=((0.045)*pz);
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign(((((0.55)*x2001))+((x1999*x2001))+((x2000*x2001))+((x1998*x1999))+((cj14*x2002))+(((-1.0)*x2002))+(((-0.3)*pz*sj14))+(((0.55)*x1998))+((x1998*x2000)))),-1);
if(!x2003.valid){
continue;
}
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.0495)*sj14))+(pz*pz)+(((-0.087975)*x1996))+(((-0.33)*cj14))+(((-0.027)*x1997)))),IkReal(((-0.03825)+(((0.027)*x1996))+(((-0.167025)*sj14))+(((0.01125)*cj14))+((pz*x2001))+(((-0.087975)*x1997))+((pz*x1998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2003.value)))+(x2004.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x2005=IKcos(j12);
IkReal x2006=IKsin(j12);
IkReal x2007=((0.045)*sj14);
IkReal x2008=(py*sj11);
IkReal x2009=(cj11*px);
IkReal x2010=((0.045)*cj14);
IkReal x2011=((0.3)*sj14);
IkReal x2012=((0.3)*cj14);
IkReal x2013=(pz*x2005);
IkReal x2014=((1.0)*x2006);
IkReal x2015=((0.09)*x2005);
IkReal x2016=(pz*x2006);
IkReal x2017=((1.1)*x2006);
evalcond[0]=((0.045)+(((-1.0)*x2010))+x2016+x2011+((x2005*x2008))+((x2005*x2009)));
evalcond[1]=((-0.55)+(((-1.0)*x2008*x2014))+(((-1.0)*x2012))+(((-1.0)*x2009*x2014))+x2013+(((-1.0)*x2007)));
evalcond[2]=((((-1.0)*x2005*x2007))+(((-1.0)*x2005*x2012))+(((-1.0)*x2006*x2010))+pz+(((-0.55)*x2005))+(((0.045)*x2006))+((x2006*x2011)));
evalcond[3]=((((0.55)*x2006))+x2008+x2009+(((-1.0)*x2005*x2010))+((x2005*x2011))+((x2006*x2007))+(((0.045)*x2005))+((x2006*x2012)));
evalcond[4]=((-0.2125)+(((-1.0)*x2008*x2017))+(((-1.0)*x2008*x2015))+(((1.1)*x2013))+(((-1.0)*x2009*x2015))+(((-1.0)*x2009*x2017))+(((-0.09)*x2016))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x2018=cj14*cj14;
IkReal x2019=(py*sj11);
IkReal x2020=((0.045)*sj14);
IkReal x2021=(cj14*sj14);
IkReal x2022=((0.045)*pz);
IkReal x2023=(cj11*px);
IkReal x2024=(pz*sj14);
IkReal x2025=(cj14*x2023);
j12eval[0]=(((sj14*x2019))+(((-1.0)*cj14*pz))+(((12.2222222222222)*x2023))+(((12.2222222222222)*x2019))+pz+((sj14*x2023))+(((6.66666666666667)*cj14*x2019))+(((6.66666666666667)*x2025))+(((6.66666666666667)*x2024)));
j12eval[1]=IKsign((((x2020*x2023))+(((0.55)*x2023))+((x2019*x2020))+x2022+(((0.55)*x2019))+(((-1.0)*cj14*x2022))+(((0.3)*cj14*x2019))+(((0.3)*x2025))+(((0.3)*x2024))));
j12eval[2]=((IKabs(((0.03825)+(((0.167025)*sj14))+((pz*x2023))+(((-0.01125)*cj14))+((pz*x2019))+(((0.087975)*x2021))+(((-0.027)*x2018)))))+(IKabs(((-0.304525)+(((-0.087975)*x2018))+(((-0.027)*x2021))+(((-0.0495)*sj14))+(pz*pz)+(((-0.33)*cj14))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x2026=cj14*cj14;
IkReal x2027=(cj14*sj14);
IkReal x2028=(cj14*pz);
IkReal x2029=(cj11*px);
IkReal x2030=(py*sj11);
IkReal x2031=((1.0)*cj14);
IkReal x2032=((0.3)*sj14);
IkReal x2033=(pz*sj14);
IkReal x2034=((0.045)*cj14);
IkReal x2035=((6.66666666666667)*sj14);
j12eval[0]=(((x2030*x2035))+x2029+x2030+(((-1.0)*x2029*x2031))+(((-1.0)*x2033))+(((-1.0)*x2030*x2031))+(((-12.2222222222222)*pz))+(((-6.66666666666667)*x2028))+((x2029*x2035)));
j12eval[1]=IKsign(((((-0.55)*pz))+((x2030*x2032))+(((-1.0)*x2029*x2034))+(((-0.3)*x2028))+(((-1.0)*x2030*x2034))+(((0.045)*x2029))+((x2029*x2032))+(((0.045)*x2030))+(((-0.045)*x2033))));
j12eval[2]=((IKabs(((0.092025)+(((-0.027)*x2027))+(((-0.087975)*x2026))+(((-1.0)*(pz*pz)))+(((0.027)*sj14))+(((-0.00405)*cj14)))))+(IKabs(((-0.03825)+(((-0.087975)*x2027))+(((-0.167025)*sj14))+(((0.027)*x2026))+(((0.01125)*cj14))+((pz*x2030))+((pz*x2029))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j12eval[0]=((-5.18366013071895)+(((-4.26078431372549)*cj14))+(((-1.0)*sj14)));
j12eval[1]=IKsign(((-0.39655)+(((-0.0765)*sj14))+(((-0.32595)*cj14))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x2036=((-1.0)*py);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2036);
rxp0_1=(px*r20);
rxp1_0=(r21*x2036);
rxp1_1=(px*r21);
rxp2_0=(r22*x2036);
rxp2_1=(px*r22);
j12eval[0]=(((py*sj11))+((cj11*px)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
evalcond[1]=py;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x2037=((-1.0)*py);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2037);
rxp0_1=0;
rxp1_0=(r21*x2037);
rxp1_1=0;
rxp2_0=(r22*x2037);
rxp2_1=0;
px=0;
j11=0;
sj11=0;
cj11=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=py;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x2038=((-1.0)*py);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2038);
rxp0_1=0;
rxp1_0=(r21*x2038);
rxp1_1=0;
rxp2_0=(r22*x2038);
rxp2_1=0;
px=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x2039=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
rxp0_2=(r10*x2039);
rxp1_2=(r11*x2039);
rxp2_2=(r12*x2039);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
evalcond[1]=px;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x2040=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
pz=0;
j14=0;
sj14=0;
cj14=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
rxp0_2=(r10*x2040);
rxp1_2=(r11*x2040);
rxp2_2=(r12*x2040);
j12eval[0]=1.0;
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2041=py*py;
IkReal x2042=cj11*cj11;
IkReal x2043=(cj11*px);
IkReal x2044=(py*sj11);
IkReal x2045=((4400.0)*x2042);
CheckValue<IkReal> x2046=IKPowWithIntegerCheck(((((306.0)*x2044))+(((306.0)*x2043))),-1);
if(!x2046.valid){
continue;
}
if( IKabs(((((-1.17647058823529)*x2043))+(((-1.17647058823529)*x2044)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2046.value)*(((3179.0)+((x2041*x2045))+(((-1.0)*x2045*(px*px)))+(((-4400.0)*x2041))+(((-8800.0)*x2043*x2044)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.17647058823529)*x2043))+(((-1.17647058823529)*x2044))))+IKsqr(((x2046.value)*(((3179.0)+((x2041*x2045))+(((-1.0)*x2045*(px*px)))+(((-4400.0)*x2041))+(((-8800.0)*x2043*x2044))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.17647058823529)*x2043))+(((-1.17647058823529)*x2044))), ((x2046.value)*(((3179.0)+((x2041*x2045))+(((-1.0)*x2045*(px*px)))+(((-4400.0)*x2041))+(((-8800.0)*x2043*x2044))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x2047=IKcos(j12);
IkReal x2048=IKsin(j12);
IkReal x2049=(py*sj11);
IkReal x2050=(cj11*px);
IkReal x2051=((1.1)*x2048);
IkReal x2052=((1.0)*x2048);
IkReal x2053=(x2047*x2050);
evalcond[0]=((-0.85)*x2047);
evalcond[1]=(x2049+x2050+(((0.85)*x2048)));
evalcond[2]=((((-1.0)*x2047*x2049))+(((-1.0)*x2053)));
evalcond[3]=((-0.85)+(((-1.0)*x2049*x2052))+(((-1.0)*x2050*x2052)));
evalcond[4]=((-0.935)+(((0.09)*x2047*x2049))+(((0.09)*x2053))+(((-1.0)*x2049*x2051))+(((-1.0)*x2050*x2051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2054=((0.3)*sj14);
IkReal x2055=(cj11*px);
IkReal x2056=(py*sj11);
IkReal x2057=((0.045)*pz);
IkReal x2058=((0.3)*cj14);
IkReal x2059=((0.045)*cj14);
IkReal x2060=((0.045)*sj14);
CheckValue<IkReal> x2061=IKPowWithIntegerCheck(IKsign(((-0.39655)+(((-0.0765)*sj14))+(((-0.32595)*cj14)))),-1);
if(!x2061.valid){
continue;
}
CheckValue<IkReal> x2062 = IKatan2WithCheck(IkReal((((x2055*x2060))+((x2055*x2058))+((x2056*x2060))+((cj14*x2057))+(((-1.0)*pz*x2054))+(((-1.0)*x2057))+((x2056*x2058))+(((0.55)*x2055))+(((0.55)*x2056)))),IkReal(((((-0.55)*pz))+(((-1.0)*x2054*x2056))+(((-1.0)*x2054*x2055))+(((-0.045)*x2056))+(((-0.045)*x2055))+((x2055*x2059))+(((-1.0)*pz*x2058))+(((-1.0)*sj14*x2057))+((x2056*x2059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2062.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2061.value)))+(x2062.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x2063=IKsin(j12);
IkReal x2064=IKcos(j12);
IkReal x2065=((0.045)*sj14);
IkReal x2066=(cj11*px);
IkReal x2067=(py*sj11);
IkReal x2068=((0.045)*cj14);
IkReal x2069=((0.3)*sj14);
IkReal x2070=((0.3)*cj14);
IkReal x2071=(pz*x2064);
IkReal x2072=((1.0)*x2063);
IkReal x2073=((1.0)*x2064);
IkReal x2074=((0.09)*x2064);
IkReal x2075=((1.1)*x2063);
evalcond[0]=((-0.55)+x2071+(((-1.0)*x2070))+(((-1.0)*x2065))+(((-1.0)*x2067*x2072))+(((-1.0)*x2066*x2072)));
evalcond[1]=((0.045)+x2069+(((-1.0)*x2068))+(((-1.0)*x2067*x2073))+(((-1.0)*x2066*x2073))+(((-1.0)*pz*x2072)));
evalcond[2]=((((-1.0)*x2063*x2069))+(((-1.0)*x2064*x2070))+(((-1.0)*x2064*x2065))+(((-0.55)*x2064))+pz+((x2063*x2068))+(((-0.045)*x2063)));
evalcond[3]=(x2066+x2067+(((-1.0)*x2064*x2069))+(((0.55)*x2063))+((x2063*x2070))+((x2063*x2065))+((x2064*x2068))+(((-0.045)*x2064)));
evalcond[4]=((-0.2125)+((x2066*x2074))+(((1.1)*x2071))+(((-1.0)*pp))+(((0.09)*pz*x2063))+(((-1.0)*x2067*x2075))+(((-1.0)*x2066*x2075))+((x2067*x2074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2076=cj14*cj14;
IkReal x2077=(cj14*sj14);
IkReal x2078=(py*sj11);
IkReal x2079=((0.3)*sj14);
IkReal x2080=(cj11*px);
IkReal x2081=((0.045)*cj14);
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((0.045)*x2080))+(((-1.0)*x2078*x2081))+(((-1.0)*x2080*x2081))+((x2079*x2080))+(((-0.3)*cj14*pz))+(((0.045)*x2078))+((x2078*x2079))+(((-0.045)*pz*sj14)))),-1);
if(!x2082.valid){
continue;
}
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal(((-0.03825)+(((0.027)*x2076))+((pz*x2080))+(((-0.167025)*sj14))+(((0.01125)*cj14))+((pz*x2078))+(((-0.087975)*x2077)))),IkReal(((0.092025)+(((-1.0)*(pz*pz)))+(((0.027)*sj14))+(((-0.027)*x2077))+(((-0.087975)*x2076))+(((-0.00405)*cj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2082.value)))+(x2083.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x2084=IKsin(j12);
IkReal x2085=IKcos(j12);
IkReal x2086=((0.045)*sj14);
IkReal x2087=(cj11*px);
IkReal x2088=(py*sj11);
IkReal x2089=((0.045)*cj14);
IkReal x2090=((0.3)*sj14);
IkReal x2091=((0.3)*cj14);
IkReal x2092=(pz*x2085);
IkReal x2093=((1.0)*x2084);
IkReal x2094=((1.0)*x2085);
IkReal x2095=((0.09)*x2085);
IkReal x2096=((1.1)*x2084);
evalcond[0]=((-0.55)+(((-1.0)*x2091))+x2092+(((-1.0)*x2086))+(((-1.0)*x2088*x2093))+(((-1.0)*x2087*x2093)));
evalcond[1]=((0.045)+(((-1.0)*pz*x2093))+x2090+(((-1.0)*x2089))+(((-1.0)*x2088*x2094))+(((-1.0)*x2087*x2094)));
evalcond[2]=((((-0.55)*x2085))+((x2084*x2089))+(((-1.0)*x2085*x2086))+pz+(((-1.0)*x2085*x2091))+(((-1.0)*x2084*x2090))+(((-0.045)*x2084)));
evalcond[3]=(((x2084*x2091))+((x2085*x2089))+((x2084*x2086))+x2088+x2087+(((-1.0)*x2085*x2090))+(((-0.045)*x2085))+(((0.55)*x2084)));
evalcond[4]=((-0.2125)+(((1.1)*x2092))+((x2087*x2095))+((x2088*x2095))+(((-1.0)*pp))+(((-1.0)*x2088*x2096))+(((-1.0)*x2087*x2096))+(((0.09)*pz*x2084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2097=cj14*cj14;
IkReal x2098=(cj14*sj14);
IkReal x2099=(py*sj11);
IkReal x2100=(cj11*px);
IkReal x2101=((0.3)*cj14);
IkReal x2102=((0.045)*pz);
IkReal x2103=((0.045)*sj14);
CheckValue<IkReal> x2104 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.027)*x2098))+(((-0.087975)*x2097))+(((-0.0495)*sj14))+(pz*pz)+(((-0.33)*cj14)))),IkReal(((0.03825)+(((0.167025)*sj14))+(((-0.027)*x2097))+(((0.087975)*x2098))+((pz*x2100))+(((-0.01125)*cj14))+((pz*x2099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2104.valid){
continue;
}
CheckValue<IkReal> x2105=IKPowWithIntegerCheck(IKsign((((x2099*x2101))+((x2099*x2103))+(((0.3)*pz*sj14))+(((-1.0)*cj14*x2102))+(((0.55)*x2099))+x2102+(((0.55)*x2100))+((x2100*x2101))+((x2100*x2103)))),-1);
if(!x2105.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x2104.value)+(((1.5707963267949)*(x2105.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x2106=IKsin(j12);
IkReal x2107=IKcos(j12);
IkReal x2108=((0.045)*sj14);
IkReal x2109=(cj11*px);
IkReal x2110=(py*sj11);
IkReal x2111=((0.045)*cj14);
IkReal x2112=((0.3)*sj14);
IkReal x2113=((0.3)*cj14);
IkReal x2114=(pz*x2107);
IkReal x2115=((1.0)*x2106);
IkReal x2116=((1.0)*x2107);
IkReal x2117=((0.09)*x2107);
IkReal x2118=((1.1)*x2106);
evalcond[0]=((-0.55)+(((-1.0)*x2108))+x2114+(((-1.0)*x2109*x2115))+(((-1.0)*x2110*x2115))+(((-1.0)*x2113)));
evalcond[1]=((0.045)+x2112+(((-1.0)*pz*x2115))+(((-1.0)*x2109*x2116))+(((-1.0)*x2110*x2116))+(((-1.0)*x2111)));
evalcond[2]=((((-1.0)*x2107*x2113))+(((-1.0)*x2107*x2108))+(((-0.045)*x2106))+((x2106*x2111))+pz+(((-0.55)*x2107))+(((-1.0)*x2106*x2112)));
evalcond[3]=((((-1.0)*x2107*x2112))+(((-0.045)*x2107))+x2110+x2109+((x2106*x2113))+(((0.55)*x2106))+((x2107*x2111))+((x2106*x2108)));
evalcond[4]=((-0.2125)+((x2109*x2117))+(((0.09)*pz*x2106))+(((1.1)*x2114))+(((-1.0)*pp))+((x2110*x2117))+(((-1.0)*x2109*x2118))+(((-1.0)*x2110*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2119=cj13*cj13;
IkReal x2120=(cj11*px);
IkReal x2121=(cj14*sj11);
IkReal x2122=(pz*sj13);
IkReal x2123=(py*sj11);
IkReal x2124=((0.55)*cj13);
IkReal x2125=(px*sj11);
IkReal x2126=(cj11*py);
IkReal x2127=((0.3)*cj13);
IkReal x2128=((0.045)*cj13*sj13);
IkReal x2129=((0.045)*x2119);
IkReal x2130=((0.045)*cj13*sj14);
IkReal x2131=(px*x2129);
IkReal x2132=(sj13*sj14*x2127);
IkReal x2133=((0.3)*sj14*x2119);
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal((((px*x2121*x2127))+((x2122*x2123))+((x2120*x2122))+(((-1.0)*cj14*x2126*x2127))+(((-1.0)*x2126*x2130))+((x2124*x2125))+((x2125*x2130))+(((-1.0)*x2124*x2126)))),IkReal((((x2125*x2129))+(((-1.0)*x2121*x2131))+(((-1.0)*x2126*x2133))+((x2125*x2133))+((cj14*x2126*x2129))+(((-1.0)*pz*x2122))+(((-1.0)*x2126*x2129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135=IKPowWithIntegerCheck(IKsign(((((-0.3)*cj14*x2122))+((cj14*x2120*x2128))+(((-0.045)*sj14*x2122))+(((-1.0)*x2120*x2128))+(((-0.55)*x2122))+((py*x2121*x2128))+(((-1.0)*x2123*x2132))+(((-1.0)*x2123*x2128))+(((-1.0)*x2120*x2132)))),-1);
if(!x2135.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x2134.value)+(((1.5707963267949)*(x2135.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2136=IKsin(j12);
IkReal x2137=IKcos(j12);
IkReal x2138=((0.09)*cj13);
IkReal x2139=(cj11*px);
IkReal x2140=((0.045)*sj14);
IkReal x2141=((0.3)*sj14);
IkReal x2142=((1.0)*sj13);
IkReal x2143=(py*sj11);
IkReal x2144=(px*sj11);
IkReal x2145=((0.045)*cj14);
IkReal x2146=((0.09)*sj13);
IkReal x2147=(cj11*py);
IkReal x2148=((0.3)*cj14);
IkReal x2149=(pz*x2137);
IkReal x2150=(pz*x2136);
IkReal x2151=(cj13*x2137);
IkReal x2152=((1.1)*x2136);
IkReal x2153=((1.0)*x2136);
IkReal x2154=(cj13*x2136);
evalcond[0]=((-0.55)+(((-1.0)*x2139*x2153))+(((-1.0)*x2143*x2153))+x2149+(((-1.0)*x2140))+(((-1.0)*x2148)));
evalcond[1]=((((-1.0)*x2142*x2150))+(((-1.0)*x2137*x2142*x2143))+((cj13*x2147))+(((-1.0)*cj13*x2144))+(((-1.0)*x2137*x2139*x2142)));
evalcond[2]=((0.045)+((x2139*x2151))+(((-1.0)*x2142*x2144))+((x2143*x2151))+x2141+(((-1.0)*x2145))+((cj13*x2150))+((sj13*x2147)));
evalcond[3]=(((x2141*x2154))+pz+(((-0.55)*x2137))+(((0.045)*x2154))+(((-1.0)*x2137*x2148))+(((-1.0)*x2137*x2140))+(((-1.0)*x2145*x2154)));
evalcond[4]=(x2139+x2143+(((0.55)*x2136))+((x2141*x2151))+((x2136*x2148))+((x2136*x2140))+(((0.045)*x2151))+(((-1.0)*x2145*x2151)));
evalcond[5]=((-0.2125)+(((-1.0)*x2139*x2152))+(((-1.0)*x2137*x2138*x2143))+(((-1.0)*x2143*x2152))+(((-1.0)*pp))+(((-1.0)*x2137*x2138*x2139))+((x2144*x2146))+(((1.1)*x2149))+(((-1.0)*x2146*x2147))+(((-1.0)*x2138*x2150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2155=cj11*cj11;
IkReal x2156=py*py;
IkReal x2157=px*px;
IkReal x2158=((0.045)*sj14);
IkReal x2159=((2.0)*px);
IkReal x2160=(pz*sj13);
IkReal x2161=((0.3)*cj14);
IkReal x2162=(cj13*py);
IkReal x2163=(py*sj11*sj13);
IkReal x2164=(cj11*px*sj13);
IkReal x2165=((1.0)*cj13*sj11);
IkReal x2166=(sj13*x2156);
CheckValue<IkReal> x2167 = IKatan2WithCheck(IkReal((((cj11*pz*x2162))+(((-1.0)*px*pz*x2165))+(((-1.0)*x2161*x2163))+(((-1.0)*x2161*x2164))+(((-1.0)*x2158*x2164))+(((-1.0)*x2158*x2163))+(((-0.55)*x2164))+(((-0.55)*x2163)))),IkReal(((((0.55)*x2160))+((x2155*x2159*x2162))+(((-1.0)*cj11*x2157*x2165))+((x2160*x2161))+((x2158*x2160))+((cj11*cj13*sj11*x2156))+(((-1.0)*px*x2162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2167.valid){
continue;
}
CheckValue<IkReal> x2168=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2155*x2166))+((sj13*x2155*x2157))+x2166+((cj11*x2159*x2163))+((pz*x2160)))),-1);
if(!x2168.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x2167.value)+(((1.5707963267949)*(x2168.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2169=IKsin(j12);
IkReal x2170=IKcos(j12);
IkReal x2171=((0.09)*cj13);
IkReal x2172=(cj11*px);
IkReal x2173=((0.045)*sj14);
IkReal x2174=((0.3)*sj14);
IkReal x2175=((1.0)*sj13);
IkReal x2176=(py*sj11);
IkReal x2177=(px*sj11);
IkReal x2178=((0.045)*cj14);
IkReal x2179=((0.09)*sj13);
IkReal x2180=(cj11*py);
IkReal x2181=((0.3)*cj14);
IkReal x2182=(pz*x2170);
IkReal x2183=(pz*x2169);
IkReal x2184=(cj13*x2170);
IkReal x2185=((1.1)*x2169);
IkReal x2186=((1.0)*x2169);
IkReal x2187=(cj13*x2169);
evalcond[0]=((-0.55)+x2182+(((-1.0)*x2172*x2186))+(((-1.0)*x2181))+(((-1.0)*x2176*x2186))+(((-1.0)*x2173)));
evalcond[1]=((((-1.0)*x2175*x2183))+(((-1.0)*x2170*x2175*x2176))+(((-1.0)*cj13*x2177))+((cj13*x2180))+(((-1.0)*x2170*x2172*x2175)));
evalcond[2]=((0.045)+((sj13*x2180))+((x2172*x2184))+x2174+((x2176*x2184))+(((-1.0)*x2175*x2177))+((cj13*x2183))+(((-1.0)*x2178)));
evalcond[3]=((((-1.0)*x2170*x2173))+(((-1.0)*x2170*x2181))+((x2174*x2187))+pz+(((-0.55)*x2170))+(((-1.0)*x2178*x2187))+(((0.045)*x2187)));
evalcond[4]=((((0.55)*x2169))+x2172+x2176+((x2169*x2181))+((x2174*x2184))+(((-1.0)*x2178*x2184))+(((0.045)*x2184))+((x2169*x2173)));
evalcond[5]=((-0.2125)+(((-1.0)*x2171*x2183))+((x2177*x2179))+(((-1.0)*x2172*x2185))+(((-1.0)*x2170*x2171*x2172))+(((-1.0)*x2170*x2171*x2176))+(((-1.0)*pp))+(((1.1)*x2182))+(((-1.0)*x2176*x2185))+(((-1.0)*x2179*x2180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2188=cj14*cj14;
IkReal x2189=(cj11*px);
IkReal x2190=(py*sj11);
IkReal x2191=((0.045)*sj14);
IkReal x2192=(cj13*cj14);
IkReal x2193=(cj13*sj14);
IkReal x2194=((0.3)*cj14);
IkReal x2195=((0.045)*pz);
CheckValue<IkReal> x2196=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*x2195))+((x2192*x2195))+((x2190*x2194))+((x2190*x2191))+((x2189*x2191))+((x2189*x2194))+(((-0.3)*pz*x2193))+(((0.55)*x2190))+(((0.55)*x2189)))),-1);
if(!x2196.valid){
continue;
}
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.027)*cj14*sj14))+(((-0.0495)*sj14))+(pz*pz)+(((-0.087975)*x2188))+(((-0.33)*cj14)))),IkReal((((pz*x2189))+(((-0.03825)*cj13))+(((0.027)*cj13*x2188))+(((-0.087975)*sj14*x2192))+(((0.01125)*x2192))+((pz*x2190))+(((-0.167025)*x2193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2196.value)))+(x2197.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x2198=IKsin(j12);
IkReal x2199=IKcos(j12);
IkReal x2200=((0.09)*cj13);
IkReal x2201=(cj11*px);
IkReal x2202=((0.045)*sj14);
IkReal x2203=((0.3)*sj14);
IkReal x2204=((1.0)*sj13);
IkReal x2205=(py*sj11);
IkReal x2206=(px*sj11);
IkReal x2207=((0.045)*cj14);
IkReal x2208=((0.09)*sj13);
IkReal x2209=(cj11*py);
IkReal x2210=((0.3)*cj14);
IkReal x2211=(pz*x2199);
IkReal x2212=(pz*x2198);
IkReal x2213=(cj13*x2199);
IkReal x2214=((1.1)*x2198);
IkReal x2215=((1.0)*x2198);
IkReal x2216=(cj13*x2198);
evalcond[0]=((-0.55)+(((-1.0)*x2205*x2215))+x2211+(((-1.0)*x2210))+(((-1.0)*x2202))+(((-1.0)*x2201*x2215)));
evalcond[1]=((((-1.0)*x2204*x2212))+((cj13*x2209))+(((-1.0)*x2199*x2204*x2205))+(((-1.0)*cj13*x2206))+(((-1.0)*x2199*x2201*x2204)));
evalcond[2]=((0.045)+(((-1.0)*x2204*x2206))+x2203+(((-1.0)*x2207))+((cj13*x2212))+((x2205*x2213))+((x2201*x2213))+((sj13*x2209)));
evalcond[3]=((((-1.0)*x2207*x2216))+(((-0.55)*x2199))+(((0.045)*x2216))+((x2203*x2216))+(((-1.0)*x2199*x2210))+pz+(((-1.0)*x2199*x2202)));
evalcond[4]=(((x2198*x2210))+((x2198*x2202))+x2201+x2205+(((-1.0)*x2207*x2213))+(((0.045)*x2213))+((x2203*x2213))+(((0.55)*x2198)));
evalcond[5]=((-0.2125)+(((-1.0)*x2205*x2214))+(((-1.0)*x2208*x2209))+((x2206*x2208))+(((-1.0)*pp))+(((-1.0)*x2200*x2212))+(((-1.0)*x2199*x2200*x2205))+(((-1.0)*x2199*x2200*x2201))+(((1.1)*x2211))+(((-1.0)*x2201*x2214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x147=(cj12*cj14);
IkReal x148=(cj14*sj13);
IkReal x149=((1.0)*cj13);
IkReal x150=(sj12*sj13);
IkReal x151=(cj14*sj12);
IkReal x152=((1.0)*cj11);
IkReal x153=(sj12*sj14);
IkReal x154=(sj11*sj13);
IkReal x155=(sj13*sj14);
IkReal x156=((1.0)*cj12*sj14);
IkReal x157=((-1.0)*cj11);
IkReal x158=(x153+(((-1.0)*x147*x149)));
IkReal x159=(((cj11*cj12*sj13))+((cj13*sj11)));
IkReal x160=((((-1.0)*cj11*x149))+((cj12*x154)));
IkReal x161=(x147+(((-1.0)*x149*x153)));
IkReal x162=(sj11*x158);
IkReal x163=((((-1.0)*x156))+(((-1.0)*x149*x151)));
IkReal x164=((((-1.0)*cj12*sj14*x149))+(((-1.0)*x151)));
IkReal x165=(sj11*x164);
IkReal x166=(((cj11*x158))+((sj11*x148)));
IkReal x167=(x162+(((-1.0)*x148*x152)));
IkReal x168=(x165+(((-1.0)*x152*x155)));
IkReal x169=(((cj11*x164))+((sj14*x154)));
new_r00=(((r00*x166))+((r20*x163))+((r10*((x162+((x148*x157)))))));
new_r01=(((r01*x166))+((r21*x163))+((r11*x167)));
new_r02=(((r22*x163))+((r12*x167))+((r02*x166)));
new_r10=(((r20*x150))+((r00*x159))+((r10*x160)));
new_r11=(((r01*x159))+((r21*x150))+((r11*x160)));
new_r12=(((r12*x160))+((r22*x150))+((r02*x159)));
new_r20=(((r00*x169))+((r20*x161))+((r10*x168)));
new_r21=(((r01*x169))+((r21*x161))+((r11*x168)));
new_r22=(((r22*x161))+((r12*((x165+((x155*x157))))))+((r02*x169)));
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=new_r22;
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IkReal j15eval[3];
j15eval[0]=sj16;
j15eval[1]=IKsign(sj16);
j15eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=new_r12;
j15eval[1]=sj16;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j17mul = 1;
j17=0;
j15mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].fmul = j15mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].fmul = j17mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j17mul = 1;
j17=0;
j15mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].fmul = j15mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].fmul = j17mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x170=new_r22*new_r22;
IkReal x171=((16.0)*new_r10);
IkReal x172=((16.0)*new_r01);
IkReal x173=((16.0)*new_r22);
IkReal x174=((8.0)*new_r11);
IkReal x175=((8.0)*new_r00);
IkReal x176=(x170*x171);
IkReal x177=(x170*x172);
j15eval[0]=((IKabs(((((-1.0)*new_r22*x175))+((x170*x174)))))+(IKabs(((((32.0)*new_r11))+(((-1.0)*new_r00*x173))+(((-16.0)*new_r11*x170)))))+(IKabs(((((-1.0)*x175))+((new_r22*x174)))))+(IKabs(((((-1.0)*x171))+x176)))+(IKabs((((new_r11*x173))+(((-32.0)*new_r00*x170))+(((16.0)*new_r00)))))+(IKabs(((((-1.0)*x177))+x172)))+(IKabs(((((-1.0)*x176))+x171)))+(IKabs(((((-1.0)*x172))+x177))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j15, j17]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j15evalpoly[1];
IkReal x178=new_r22*new_r22;
IkReal x179=((16.0)*new_r10);
IkReal x180=(new_r11*new_r22);
IkReal x181=(x178*x179);
IkReal x182=((((8.0)*x180))+(((-8.0)*new_r00)));
op[0]=x182;
op[1]=((((-1.0)*x181))+x179);
op[2]=((((-32.0)*new_r00*x178))+(((16.0)*x180))+(((16.0)*new_r00)));
op[3]=((((-1.0)*x179))+x181);
op[4]=x182;
polyroots4(op,zeror,numroots);
IkReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[4]={true,true,true,true};
_nj15 = 4;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

IkReal x183=new_r22*new_r22;
IkReal x184=((16.0)*new_r01);
IkReal x185=(new_r00*new_r22);
IkReal x186=((8.0)*x185);
IkReal x187=(new_r11*x183);
IkReal x188=(x183*x184);
IkReal x189=((8.0)*x187);
j15evalpoly[0]=((((htj15*htj15*htj15*htj15)*(((((-1.0)*x186))+x189))))+(((-1.0)*x186))+x189+(((htj15*htj15*htj15)*(((((-1.0)*x184))+x188))))+((htj15*(((((-1.0)*x188))+x184))))+(((htj15*htj15)*(((((32.0)*new_r11))+(((-16.0)*x187))+(((-16.0)*x185)))))));
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j17eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x190=cj15*cj15;
IkReal x191=(cj15*new_r22);
IkReal x192=((-1.0)+(((-1.0)*x190*(new_r22*new_r22)))+x190);
j17eval[0]=x192;
j17eval[1]=IKsign(x192);
j17eval[2]=((IKabs(((((-1.0)*new_r00*x191))+((new_r01*sj15)))))+(IKabs((((new_r01*x191))+((new_r00*sj15))))));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j17eval[0]=new_r22;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x193=new_r22*new_r22;
j17eval[0]=((((-1.0)*cj15))+((cj15*x193)));
j17eval[1]=(((sj15*x193))+(((-1.0)*sj15)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x194=IKsin(j17);
IkReal x195=IKcos(j17);
evalcond[0]=x194;
evalcond[1]=((-1.0)*x195);
evalcond[2]=((((-1.0)*x194))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x195))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x196=IKsin(j17);
IkReal x197=IKcos(j17);
evalcond[0]=x196;
evalcond[1]=((-1.0)*x197);
evalcond[2]=((((-1.0)*x196))+new_r00);
evalcond[3]=((((-1.0)*x197))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r10, new_r11);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x198=IKsin(j17);
IkReal x199=IKcos(j17);
evalcond[0]=x198;
evalcond[1]=((-1.0)*x199);
evalcond[2]=((((-1.0)*x198))+new_r10);
evalcond[3]=((((-1.0)*x199))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x200=IKsin(j17);
IkReal x201=IKcos(j17);
evalcond[0]=x200;
evalcond[1]=((-1.0)*x201);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x200)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x202=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x202.valid){
continue;
}
if((x202.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x202.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst0))+cj15)))+(IKabs(((-1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
sj15=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
cj15=gconst0;
if( (gconst0) < -1-IKFAST_SINCOS_THRESH || (gconst0) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=IKacos(gconst0);
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x203.valid){
continue;
}
if((x203.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x203.value)));
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
CheckValue<IkReal> x204=IKPowWithIntegerCheck(gconst0,-1);
if(!x204.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x204.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))))+IKsqr((new_r11*(x204.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))), (new_r11*(x204.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x205=IKcos(j17);
IkReal x206=IKsin(j17);
IkReal x207=((1.0)*gconst0);
if((((1.0)+(((-1.0)*gconst0*x207)))) < -0.00001)
continue;
IkReal x208=IKsqrt(((1.0)+(((-1.0)*gconst0*x207))));
IkReal x209=((1.0)*x208);
evalcond[0]=x206;
evalcond[1]=((-1.0)*x205);
evalcond[2]=((((-1.0)*x205*x207))+new_r11);
evalcond[3]=((((-1.0)*x206*x207))+new_r10);
evalcond[4]=(((x205*x208))+new_r01);
evalcond[5]=(new_r00+((x206*x208)));
evalcond[6]=((((-1.0)*new_r00*x209))+((gconst0*new_r10))+(((-1.0)*x206)));
evalcond[7]=(((gconst0*new_r11))+(((-1.0)*x205))+(((-1.0)*new_r01*x209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x210=IKPowWithIntegerCheck(IKsign(gconst0),-1);
if(!x210.valid){
continue;
}
CheckValue<IkReal> x211 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x211.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x210.value)))+(x211.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x212=IKcos(j17);
IkReal x213=IKsin(j17);
IkReal x214=((1.0)*gconst0);
if((((1.0)+(((-1.0)*gconst0*x214)))) < -0.00001)
continue;
IkReal x215=IKsqrt(((1.0)+(((-1.0)*gconst0*x214))));
IkReal x216=((1.0)*x215);
evalcond[0]=x213;
evalcond[1]=((-1.0)*x212);
evalcond[2]=(new_r11+(((-1.0)*x212*x214)));
evalcond[3]=((((-1.0)*x213*x214))+new_r10);
evalcond[4]=(((x212*x215))+new_r01);
evalcond[5]=(((x213*x215))+new_r00);
evalcond[6]=((((-1.0)*x213))+((gconst0*new_r10))+(((-1.0)*new_r00*x216)));
evalcond[7]=((((-1.0)*x212))+(((-1.0)*new_r01*x216))+((gconst0*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x217=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x217.valid){
continue;
}
if((x217.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x217.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst0))+cj15)))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
sj15=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))))));
cj15=gconst0;
if( (gconst0) < -1-IKFAST_SINCOS_THRESH || (gconst0) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=((-1.0)*(IKacos(gconst0)));
CheckValue<IkReal> x218=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x218.valid){
continue;
}
if((x218.value) < -0.00001)
continue;
IkReal gconst0=((-1.0)*(IKsqrt(x218.value)));
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
CheckValue<IkReal> x219=IKPowWithIntegerCheck(gconst0,-1);
if(!x219.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x219.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))))+IKsqr((new_r11*(x219.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0))))))))+((gconst0*new_r10))), (new_r11*(x219.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x220=IKcos(j17);
IkReal x221=IKsin(j17);
IkReal x222=((1.0)*x220);
IkReal x223=((1.0)*x221);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x224=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
evalcond[0]=x221;
evalcond[1]=((-1.0)*x220);
evalcond[2]=((((-1.0)*gconst0*x222))+new_r11);
evalcond[3]=((((-1.0)*gconst0*x223))+new_r10);
evalcond[4]=((((-1.0)*x222*x224))+new_r01);
evalcond[5]=((((-1.0)*x223*x224))+new_r00);
evalcond[6]=(((new_r00*x224))+((gconst0*new_r10))+(((-1.0)*x223)));
evalcond[7]=(((new_r01*x224))+((gconst0*new_r11))+(((-1.0)*x222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x225=IKPowWithIntegerCheck(IKsign(gconst0),-1);
if(!x225.valid){
continue;
}
CheckValue<IkReal> x226 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x226.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x225.value)))+(x226.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x227=IKcos(j17);
IkReal x228=IKsin(j17);
IkReal x229=((1.0)*x227);
IkReal x230=((1.0)*x228);
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
IkReal x231=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
evalcond[0]=x228;
evalcond[1]=((-1.0)*x227);
evalcond[2]=((((-1.0)*gconst0*x229))+new_r11);
evalcond[3]=((((-1.0)*gconst0*x230))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x229*x231)));
evalcond[5]=((((-1.0)*x230*x231))+new_r00);
evalcond[6]=(((new_r00*x231))+(((-1.0)*x230))+((gconst0*new_r10)));
evalcond[7]=(((new_r01*x231))+((gconst0*new_r11))+(((-1.0)*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x232=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x232.valid){
continue;
}
if((x232.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x232.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst1))+cj15)))+(IKabs(((-1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
sj15=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
cj15=gconst1;
if( (gconst1) < -1-IKFAST_SINCOS_THRESH || (gconst1) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=IKacos(gconst1);
CheckValue<IkReal> x233=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x233.valid){
continue;
}
if((x233.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x233.value);
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
CheckValue<IkReal> x234=IKPowWithIntegerCheck(gconst1,-1);
if(!x234.valid){
continue;
}
if( IKabs((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x234.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))))+IKsqr((new_r11*(x234.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))), (new_r11*(x234.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x235=IKcos(j17);
IkReal x236=IKsin(j17);
IkReal x237=((1.0)*gconst1);
if((((1.0)+(((-1.0)*gconst1*x237)))) < -0.00001)
continue;
IkReal x238=IKsqrt(((1.0)+(((-1.0)*gconst1*x237))));
IkReal x239=((1.0)*x238);
evalcond[0]=x236;
evalcond[1]=((-1.0)*x235);
evalcond[2]=((((-1.0)*x235*x237))+new_r11);
evalcond[3]=((((-1.0)*x236*x237))+new_r10);
evalcond[4]=(((x235*x238))+new_r01);
evalcond[5]=(new_r00+((x236*x238)));
evalcond[6]=(((gconst1*new_r10))+(((-1.0)*x236))+(((-1.0)*new_r00*x239)));
evalcond[7]=(((gconst1*new_r11))+(((-1.0)*new_r01*x239))+(((-1.0)*x235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x240=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x240.valid){
continue;
}
CheckValue<IkReal> x241 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x241.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x240.value)))+(x241.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x242=IKcos(j17);
IkReal x243=IKsin(j17);
IkReal x244=((1.0)*gconst1);
if((((1.0)+(((-1.0)*gconst1*x244)))) < -0.00001)
continue;
IkReal x245=IKsqrt(((1.0)+(((-1.0)*gconst1*x244))));
IkReal x246=((1.0)*x245);
evalcond[0]=x243;
evalcond[1]=((-1.0)*x242);
evalcond[2]=((((-1.0)*x242*x244))+new_r11);
evalcond[3]=((((-1.0)*x243*x244))+new_r10);
evalcond[4]=(((x242*x245))+new_r01);
evalcond[5]=(new_r00+((x243*x245)));
evalcond[6]=((((-1.0)*x243))+((gconst1*new_r10))+(((-1.0)*new_r00*x246)));
evalcond[7]=((((-1.0)*new_r01*x246))+(((-1.0)*x242))+((gconst1*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x247=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x247.valid){
continue;
}
if((x247.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x247.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst1))+cj15)))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
sj15=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))));
cj15=gconst1;
if( (gconst1) < -1-IKFAST_SINCOS_THRESH || (gconst1) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=((-1.0)*(IKacos(gconst1)));
CheckValue<IkReal> x248=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x248.valid){
continue;
}
if((x248.value) < -0.00001)
continue;
IkReal gconst1=IKsqrt(x248.value);
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
CheckValue<IkReal> x249=IKPowWithIntegerCheck(gconst1,-1);
if(!x249.valid){
continue;
}
if( IKabs((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x249.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))))+IKsqr((new_r11*(x249.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))), (new_r11*(x249.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x250=IKcos(j17);
IkReal x251=IKsin(j17);
IkReal x252=((1.0)*x251);
IkReal x253=((1.0)*x250);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x254=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
evalcond[0]=x251;
evalcond[1]=((-1.0)*x250);
evalcond[2]=(new_r11+(((-1.0)*gconst1*x253)));
evalcond[3]=(new_r10+(((-1.0)*gconst1*x252)));
evalcond[4]=(new_r01+(((-1.0)*x253*x254)));
evalcond[5]=((((-1.0)*x252*x254))+new_r00);
evalcond[6]=(((new_r00*x254))+((gconst1*new_r10))+(((-1.0)*x252)));
evalcond[7]=(((new_r01*x254))+((gconst1*new_r11))+(((-1.0)*x253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x255=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x255.valid){
continue;
}
CheckValue<IkReal> x256 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x256.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x255.value)))+(x256.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x257=IKcos(j17);
IkReal x258=IKsin(j17);
IkReal x259=((1.0)*x258);
IkReal x260=((1.0)*x257);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x261=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
evalcond[0]=x258;
evalcond[1]=((-1.0)*x257);
evalcond[2]=((((-1.0)*gconst1*x260))+new_r11);
evalcond[3]=(new_r10+(((-1.0)*gconst1*x259)));
evalcond[4]=(new_r01+(((-1.0)*x260*x261)));
evalcond[5]=((((-1.0)*x259*x261))+new_r00);
evalcond[6]=(((gconst1*new_r10))+((new_r00*x261))+(((-1.0)*x259)));
evalcond[7]=(((gconst1*new_r11))+((new_r01*x261))+(((-1.0)*x260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x262=new_r22*new_r22;
CheckValue<IkReal> x263=IKPowWithIntegerCheck((((cj15*x262))+(((-1.0)*cj15))),-1);
if(!x263.valid){
continue;
}
CheckValue<IkReal> x264=IKPowWithIntegerCheck((((sj15*x262))+(((-1.0)*sj15))),-1);
if(!x264.valid){
continue;
}
if( IKabs(((x263.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x264.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x263.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x264.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((x263.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x264.value)*((((new_r10*new_r22))+new_r01))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x265=IKsin(j17);
IkReal x266=IKcos(j17);
IkReal x267=((1.0)*sj15);
IkReal x268=(new_r22*sj15);
IkReal x269=(cj15*new_r22);
IkReal x270=((1.0)*x266);
IkReal x271=((1.0)*x265);
evalcond[0]=(((new_r22*x265))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[1]=(x265+((new_r01*x269))+((new_r11*x268)));
evalcond[2]=((((-1.0)*new_r00*x267))+((cj15*new_r10))+(((-1.0)*x271)));
evalcond[3]=((((-1.0)*new_r01*x267))+((cj15*new_r11))+(((-1.0)*x270)));
evalcond[4]=(((sj15*x266))+new_r01+((x265*x269)));
evalcond[5]=((((-1.0)*new_r22*x270))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[6]=(((sj15*x265))+(((-1.0)*x269*x270))+new_r00);
evalcond[7]=((((-1.0)*cj15*x270))+new_r11+((x265*x268)));
evalcond[8]=(((new_r00*x269))+(((-1.0)*x270))+((new_r10*x268)));
evalcond[9]=((((-1.0)*new_r22*x266*x267))+(((-1.0)*cj15*x271))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x272=((1.0)*new_r01);
CheckValue<IkReal> x273=IKPowWithIntegerCheck(new_r22,-1);
if(!x273.valid){
continue;
}
if( IKabs(((x273.value)*(((((-1.0)*new_r11*sj15))+(((-1.0)*cj15*x272)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*new_r11))+(((-1.0)*sj15*x272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x273.value)*(((((-1.0)*new_r11*sj15))+(((-1.0)*cj15*x272))))))+IKsqr((((cj15*new_r11))+(((-1.0)*sj15*x272))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((x273.value)*(((((-1.0)*new_r11*sj15))+(((-1.0)*cj15*x272))))), (((cj15*new_r11))+(((-1.0)*sj15*x272))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x274=IKsin(j17);
IkReal x275=IKcos(j17);
IkReal x276=((1.0)*sj15);
IkReal x277=(new_r22*sj15);
IkReal x278=(cj15*new_r22);
IkReal x279=((1.0)*x275);
IkReal x280=((1.0)*x274);
evalcond[0]=(((new_r22*x274))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[1]=(x274+((new_r01*x278))+((new_r11*x277)));
evalcond[2]=((((-1.0)*new_r00*x276))+((cj15*new_r10))+(((-1.0)*x280)));
evalcond[3]=((((-1.0)*new_r01*x276))+((cj15*new_r11))+(((-1.0)*x279)));
evalcond[4]=(((sj15*x275))+((x274*x278))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x279))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[6]=(((sj15*x274))+(((-1.0)*x278*x279))+new_r00);
evalcond[7]=(((x274*x277))+(((-1.0)*cj15*x279))+new_r11);
evalcond[8]=(((new_r00*x278))+(((-1.0)*x279))+((new_r10*x277)));
evalcond[9]=((((-1.0)*cj15*x280))+(((-1.0)*new_r22*x275*x276))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x281=cj15*cj15;
IkReal x282=(cj15*new_r22);
CheckValue<IkReal> x283=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x281*(new_r22*new_r22)))+x281)),-1);
if(!x283.valid){
continue;
}
CheckValue<IkReal> x284 = IKatan2WithCheck(IkReal((((new_r00*sj15))+((new_r01*x282)))),IkReal(((((-1.0)*new_r00*x282))+((new_r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x284.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(((1.5707963267949)*(x283.value)))+(x284.value));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x285=IKsin(j17);
IkReal x286=IKcos(j17);
IkReal x287=((1.0)*sj15);
IkReal x288=(new_r22*sj15);
IkReal x289=(cj15*new_r22);
IkReal x290=((1.0)*x286);
IkReal x291=((1.0)*x285);
evalcond[0]=(((cj15*new_r01))+((new_r22*x285))+((new_r11*sj15)));
evalcond[1]=(x285+((new_r11*x288))+((new_r01*x289)));
evalcond[2]=((((-1.0)*x291))+((cj15*new_r10))+(((-1.0)*new_r00*x287)));
evalcond[3]=((((-1.0)*x290))+((cj15*new_r11))+(((-1.0)*new_r01*x287)));
evalcond[4]=(((x285*x289))+((sj15*x286))+new_r01);
evalcond[5]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*new_r22*x290)));
evalcond[6]=(((sj15*x285))+(((-1.0)*x289*x290))+new_r00);
evalcond[7]=(((x285*x288))+new_r11+(((-1.0)*cj15*x290)));
evalcond[8]=((((-1.0)*x290))+((new_r00*x289))+((new_r10*x288)));
evalcond[9]=((((-1.0)*new_r22*x286*x287))+new_r10+(((-1.0)*cj15*x291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15, j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x293=IKPowWithIntegerCheck(sj16,-1);
if(!x293.valid){
continue;
}
IkReal x292=x293.value;
CheckValue<IkReal> x294=IKPowWithIntegerCheck(new_r12,-1);
if(!x294.valid){
continue;
}
if( IKabs((x292*(x294.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj16*cj16))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x292)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x292*(x294.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj16*cj16)))))))+IKsqr((new_r02*x292))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x292*(x294.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj16*cj16)))))), (new_r02*x292));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x295=IKcos(j15);
IkReal x296=IKsin(j15);
IkReal x297=((1.0)*sj16);
IkReal x298=((1.0)*cj16);
IkReal x299=(new_r12*x296);
IkReal x300=(new_r02*x295);
evalcond[0]=((((-1.0)*x295*x297))+new_r02);
evalcond[1]=((((-1.0)*x296*x297))+new_r12);
evalcond[2]=(((new_r12*x295))+(((-1.0)*new_r02*x296)));
evalcond[3]=((((-1.0)*x297))+x300+x299);
evalcond[4]=(((cj16*x300))+((cj16*x299))+(((-1.0)*new_r22*x297)));
evalcond[5]=((((-1.0)*new_r20*x298))+(((-1.0)*new_r10*x296*x297))+(((-1.0)*new_r00*x295*x297)));
evalcond[6]=((((-1.0)*new_r21*x298))+(((-1.0)*new_r11*x296*x297))+(((-1.0)*new_r01*x295*x297)));
evalcond[7]=((1.0)+(((-1.0)*x297*x299))+(((-1.0)*x297*x300))+(((-1.0)*new_r22*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
j17eval[0]=sj15;
j17eval[1]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal j17eval[3];
j17eval[0]=cj15;
j17eval[1]=cj16;
j17eval[2]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=cj16;
j17eval[1]=IKsign(cj16);
j17eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=new_r12;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=sj16;
j17eval[1]=new_r12;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x301=IKsin(j17);
IkReal x302=((1.0)*(IKcos(j17)));
evalcond[0]=(x301+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x302)));
evalcond[2]=((((-1.0)*x301))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x303=IKcos(j17);
IkReal x304=((1.0)*(IKsin(j17)));
evalcond[0]=(x303+new_r10);
evalcond[1]=(new_r11+(((-1.0)*x304)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x304)));
evalcond[3]=((((-1.0)*x303))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x305=IKcos(j17);
IkReal x306=((1.0)*(IKsin(j17)));
evalcond[0]=(x305+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x306)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x306)));
evalcond[3]=((((-1.0)*x305))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x307=IKsin(j17);
IkReal x308=((1.0)*(IKcos(j17)));
evalcond[0]=(x307+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x308)));
evalcond[2]=((((-1.0)*x307))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[5];
IkReal x309=IKsin(j17);
IkReal x310=IKcos(j17);
evalcond[0]=x309;
evalcond[1]=((-1.0)*x310);
evalcond[2]=((-1.0)*new_r12*x309);
evalcond[3]=((((-1.0)*x309))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x310))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x311=IKPowWithIntegerCheck(sj16,-1);
if(!x311.valid){
continue;
}
CheckValue<IkReal> x312=IKPowWithIntegerCheck(new_r12,-1);
if(!x312.valid){
continue;
}
if( IKabs((new_r21*(x311.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x312.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*(x311.value)))+IKsqr(((-1.0)*new_r20*(x312.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((new_r21*(x311.value)), ((-1.0)*new_r20*(x312.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x313=IKsin(j17);
IkReal x314=IKcos(j17);
IkReal x315=((1.0)*sj16);
IkReal x316=((1.0)*x314);
evalcond[0]=(((new_r12*x314))+new_r20);
evalcond[1]=(((cj16*x313))+new_r11);
evalcond[2]=((((-1.0)*x313*x315))+new_r21);
evalcond[3]=((((-1.0)*cj16*x316))+new_r10);
evalcond[4]=((((-1.0)*x313))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x316))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x315))+x313+((cj16*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x315))+(((-1.0)*x316))+((cj16*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x317=IKPowWithIntegerCheck(new_r12,-1);
if(!x317.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x317.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x317.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x317.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x318=IKsin(j17);
IkReal x319=IKcos(j17);
IkReal x320=((1.0)*sj16);
IkReal x321=((1.0)*x319);
evalcond[0]=(((new_r12*x319))+new_r20);
evalcond[1]=(((cj16*x318))+new_r11);
evalcond[2]=((((-1.0)*x318*x320))+new_r21);
evalcond[3]=((((-1.0)*cj16*x321))+new_r10);
evalcond[4]=((((-1.0)*x318))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x321))+(((-1.0)*new_r01)));
evalcond[6]=(x318+(((-1.0)*new_r21*x320))+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x321))+((cj16*new_r10))+(((-1.0)*new_r20*x320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x322 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x322.valid){
continue;
}
CheckValue<IkReal> x323=IKPowWithIntegerCheck(IKsign(cj16),-1);
if(!x323.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x322.value)+(((1.5707963267949)*(x323.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x324=IKsin(j17);
IkReal x325=IKcos(j17);
IkReal x326=((1.0)*sj16);
IkReal x327=((1.0)*x325);
evalcond[0]=(((new_r12*x325))+new_r20);
evalcond[1]=(((cj16*x324))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x324*x326)));
evalcond[3]=((((-1.0)*cj16*x327))+new_r10);
evalcond[4]=((((-1.0)*x324))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x327))+(((-1.0)*new_r01)));
evalcond[6]=(x324+(((-1.0)*new_r21*x326))+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x327))+((cj16*new_r10))+(((-1.0)*new_r20*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x328=IKcos(j17);
IkReal x329=IKsin(j17);
IkReal x330=((1.0)*new_r11);
IkReal x331=((1.0)*sj16);
IkReal x332=((1.0)*x328);
evalcond[0]=((((-1.0)*x329))+new_r00);
evalcond[1]=((((-1.0)*x332))+new_r01);
evalcond[2]=((((-1.0)*new_r12*x332))+new_r20);
evalcond[3]=((((-1.0)*x329*x331))+new_r21);
evalcond[4]=((((-1.0)*x330))+((cj16*x329)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*cj16*x332)));
evalcond[6]=((((-1.0)*new_r21*x331))+x329+(((-1.0)*cj16*x330)));
CheckValue<IkReal> x333=IKPowWithIntegerCheck(new_r12,-1);
if(!x333.valid){
continue;
}
evalcond[7]=(((new_r12*new_r20))+((new_r20*(x333.value)*(new_r22*new_r22)))+(((-1.0)*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x334=IKcos(j17);
IkReal x335=IKsin(j17);
IkReal x336=((1.0)*sj15);
IkReal x337=((1.0)*x335);
IkReal x338=((1.0)*x334);
evalcond[0]=(x334+new_r20);
evalcond[1]=((((-1.0)*x337))+new_r21);
evalcond[2]=(((sj15*x334))+new_r01);
evalcond[3]=(((sj15*x335))+new_r00);
evalcond[4]=((((-1.0)*cj15*x338))+new_r11);
evalcond[5]=((((-1.0)*cj15*x337))+new_r10);
evalcond[6]=(((cj15*new_r10))+(((-1.0)*new_r00*x336))+(((-1.0)*x337)));
evalcond[7]=(((cj15*new_r11))+(((-1.0)*x338))+(((-1.0)*new_r01*x336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x339=IKcos(j17);
IkReal x340=IKsin(j17);
IkReal x341=((1.0)*sj15);
IkReal x342=((1.0)*x339);
IkReal x343=((1.0)*x340);
evalcond[0]=(x340+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x342)));
evalcond[2]=(((sj15*x339))+new_r01);
evalcond[3]=(((sj15*x340))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj15*x342)));
evalcond[5]=(new_r10+(((-1.0)*cj15*x343)));
evalcond[6]=(((cj15*new_r10))+(((-1.0)*new_r00*x341))+(((-1.0)*x343)));
evalcond[7]=(((cj15*new_r11))+(((-1.0)*new_r01*x341))+(((-1.0)*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x344=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj15))+(((-1.0)*cj15*x344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*new_r00))+(((-1.0)*sj15*x344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj15))+(((-1.0)*cj15*x344))))+IKsqr((((cj15*new_r00))+(((-1.0)*sj15*x344))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*new_r00*sj15))+(((-1.0)*cj15*x344))), (((cj15*new_r00))+(((-1.0)*sj15*x344))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x345=IKsin(j17);
IkReal x346=IKcos(j17);
IkReal x347=((1.0)*sj15);
IkReal x348=((1.0)*cj15);
IkReal x349=((1.0)*x346);
IkReal x350=(sj15*x345);
IkReal x351=(x346*x348);
evalcond[0]=(x345+((cj15*new_r01))+((new_r11*sj15)));
evalcond[1]=(((sj15*x346))+new_r01+((cj15*x345)));
evalcond[2]=(((cj15*new_r00))+(((-1.0)*x349))+((new_r10*sj15)));
evalcond[3]=(((cj15*new_r10))+(((-1.0)*new_r00*x347))+(((-1.0)*x345)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*new_r01*x347))+(((-1.0)*x349)));
evalcond[5]=((((-1.0)*x351))+x350+new_r00);
evalcond[6]=((((-1.0)*x351))+x350+new_r11);
evalcond[7]=((((-1.0)*x345*x348))+(((-1.0)*x346*x347))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x352=((1.0)*sj15);
if( IKabs((((cj15*new_r01))+(((-1.0)*new_r00*x352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*new_r01))+(((-1.0)*new_r00*x352))))+IKsqr(((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x352))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((((cj15*new_r01))+(((-1.0)*new_r00*x352))), ((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x352))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x353=IKcos(j17);
IkReal x354=IKsin(j17);
IkReal x355=((1.0)*sj15);
IkReal x356=((1.0)*x354);
IkReal x357=(sj15*x353);
IkReal x358=((1.0)*x353);
IkReal x359=(cj15*x356);
evalcond[0]=(x353+((cj15*new_r00))+((new_r10*sj15)));
evalcond[1]=((((-1.0)*x356))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[2]=(new_r00+((cj15*x353))+((sj15*x354)));
evalcond[3]=((((-1.0)*x356))+((cj15*new_r10))+(((-1.0)*new_r00*x355)));
evalcond[4]=((((-1.0)*x358))+((cj15*new_r11))+(((-1.0)*new_r01*x355)));
evalcond[5]=((((-1.0)*x359))+x357+new_r01);
evalcond[6]=((((-1.0)*x359))+x357+new_r10);
evalcond[7]=((((-1.0)*cj15*x358))+new_r11+(((-1.0)*x354*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r10, new_r11);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x360=IKcos(j17);
IkReal x361=IKsin(j17);
IkReal x362=((1.0)*sj16);
IkReal x363=((1.0)*x360);
IkReal x364=((1.0)*x361);
evalcond[0]=(new_r20+((new_r02*x360)));
evalcond[1]=((((-1.0)*x364))+new_r10);
evalcond[2]=((((-1.0)*x363))+new_r11);
evalcond[3]=(((cj16*x361))+new_r01);
evalcond[4]=(new_r21+(((-1.0)*new_r02*x364)));
evalcond[5]=(new_r00+(((-1.0)*cj16*x363)));
evalcond[6]=(x361+((cj16*new_r01))+(((-1.0)*new_r21*x362)));
evalcond[7]=((((-1.0)*new_r20*x362))+(((-1.0)*x363))+((cj16*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
j17eval[1]=IKsign(new_r02);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
j17eval[1]=cj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x365=IKcos(j17);
IkReal x366=((1.0)*(IKsin(j17)));
evalcond[0]=(x365+new_r20);
evalcond[1]=((((-1.0)*x366))+new_r21);
evalcond[2]=((((-1.0)*x366))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x365))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x367=IKsin(j17);
IkReal x368=((1.0)*(IKcos(j17)));
evalcond[0]=(x367+new_r21);
evalcond[1]=((((-1.0)*x368))+new_r20);
evalcond[2]=((((-1.0)*x367))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x368))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[6];
IkReal x369=IKsin(j17);
IkReal x370=IKcos(j17);
IkReal x371=((-1.0)*x370);
evalcond[0]=x369;
evalcond[1]=(new_r22*x369);
evalcond[2]=x371;
evalcond[3]=(new_r22*x371);
evalcond[4]=((((-1.0)*x369))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x370))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x372=IKPowWithIntegerCheck(new_r02,-1);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373=IKPowWithIntegerCheck(cj16,-1);
if(!x373.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x372.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x373.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x372.value)))+IKsqr(((-1.0)*new_r00*(x373.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21*(x372.value)), ((-1.0)*new_r00*(x373.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x374=IKsin(j17);
IkReal x375=IKcos(j17);
CheckValue<IkReal> x380=IKPowWithIntegerCheck(new_r02,-1);
if(!x380.valid){
continue;
}
IkReal x376=x380.value;
IkReal x377=new_r22*new_r22;
IkReal x378=((1.0)*x375);
IkReal x379=(x376*x377);
evalcond[0]=(new_r21+((new_r02*x374)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x378)));
evalcond[2]=((((-1.0)*x374))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x378))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x374))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj16*x378)));
evalcond[6]=(x374+((new_r21*x379))+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x379))+(((-1.0)*x378))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x381=IKPowWithIntegerCheck(new_r02,-1);
if(!x381.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x381.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x381.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x381.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x382=IKsin(j17);
IkReal x383=IKcos(j17);
CheckValue<IkReal> x388=IKPowWithIntegerCheck(new_r02,-1);
if(!x388.valid){
continue;
}
IkReal x384=x388.value;
IkReal x385=new_r22*new_r22;
IkReal x386=((1.0)*x383);
IkReal x387=(x384*x385);
evalcond[0]=(((new_r02*x382))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x386))+new_r20);
evalcond[2]=((((-1.0)*x382))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x386))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((cj16*x382)));
evalcond[5]=((((-1.0)*cj16*x386))+(((-1.0)*new_r00)));
evalcond[6]=(x382+((new_r02*new_r21))+((new_r21*x387)));
evalcond[7]=((((-1.0)*x386))+((new_r02*new_r20))+((new_r20*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x389 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x389.valid){
continue;
}
CheckValue<IkReal> x390=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x390.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x389.value)+(((1.5707963267949)*(x390.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x391=IKsin(j17);
IkReal x392=IKcos(j17);
CheckValue<IkReal> x397=IKPowWithIntegerCheck(new_r02,-1);
if(!x397.valid){
continue;
}
IkReal x393=x397.value;
IkReal x394=new_r22*new_r22;
IkReal x395=((1.0)*x392);
IkReal x396=(x393*x394);
evalcond[0]=(new_r21+((new_r02*x391)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x395)));
evalcond[2]=((((-1.0)*x391))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x395))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x391))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj16*x395)));
evalcond[6]=(x391+((new_r21*x396))+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x395))+((new_r20*x396))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j17eval[0]=1.0;
if( IKabs(j17eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j17]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j17array[2], cj17array[2], sj17array[2], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[2]={true,true};
_nj17 = 2;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x399=IKPowWithIntegerCheck(sj16,-1);
if(!x399.valid){
continue;
}
IkReal x398=x399.value;
CheckValue<IkReal> x400=IKPowWithIntegerCheck(cj15,-1);
if(!x400.valid){
continue;
}
CheckValue<IkReal> x401=IKPowWithIntegerCheck(cj16,-1);
if(!x401.valid){
continue;
}
if( IKabs((x398*(x400.value)*(x401.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x398)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x398*(x400.value)*(x401.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15))))))+IKsqr(((-1.0)*new_r20*x398))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x398*(x400.value)*(x401.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15))))), ((-1.0)*new_r20*x398));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x402=IKsin(j17);
IkReal x403=IKcos(j17);
IkReal x404=((1.0)*sj15);
IkReal x405=(cj15*cj16);
IkReal x406=(cj16*sj15);
IkReal x407=((1.0)*sj16);
IkReal x408=((1.0)*x403);
IkReal x409=((1.0)*x402);
evalcond[0]=(new_r20+((sj16*x403)));
evalcond[1]=((((-1.0)*x402*x407))+new_r21);
evalcond[2]=(((cj15*new_r01))+((cj16*x402))+((new_r11*sj15)));
evalcond[3]=(((cj15*new_r10))+(((-1.0)*new_r00*x404))+(((-1.0)*x409)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*new_r01*x404))+(((-1.0)*x408)));
evalcond[5]=(((sj15*x403))+new_r01+((x402*x405)));
evalcond[6]=((((-1.0)*cj16*x408))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[7]=(((sj15*x402))+new_r00+(((-1.0)*x405*x408)));
evalcond[8]=(new_r11+((x402*x406))+(((-1.0)*cj15*x408)));
evalcond[9]=((((-1.0)*cj16*x403*x404))+new_r10+(((-1.0)*cj15*x409)));
evalcond[10]=(x402+(((-1.0)*new_r21*x407))+((new_r11*x406))+((new_r01*x405)));
evalcond[11]=((((-1.0)*new_r20*x407))+((new_r10*x406))+(((-1.0)*x408))+((new_r00*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x411=IKPowWithIntegerCheck(sj16,-1);
if(!x411.valid){
continue;
}
IkReal x410=x411.value;
CheckValue<IkReal> x412=IKPowWithIntegerCheck(sj15,-1);
if(!x412.valid){
continue;
}
if( IKabs((x410*(x412.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x410)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x410*(x412.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16))))))+IKsqr(((-1.0)*new_r20*x410))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x410*(x412.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16))))), ((-1.0)*new_r20*x410));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x413=IKsin(j17);
IkReal x414=IKcos(j17);
IkReal x415=((1.0)*sj15);
IkReal x416=(cj15*cj16);
IkReal x417=(cj16*sj15);
IkReal x418=((1.0)*sj16);
IkReal x419=((1.0)*x414);
IkReal x420=((1.0)*x413);
evalcond[0]=(new_r20+((sj16*x414)));
evalcond[1]=((((-1.0)*x413*x418))+new_r21);
evalcond[2]=(((cj16*x413))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=((((-1.0)*x420))+((cj15*new_r10))+(((-1.0)*new_r00*x415)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*x419))+(((-1.0)*new_r01*x415)));
evalcond[5]=(((x413*x416))+((sj15*x414))+new_r01);
evalcond[6]=((((-1.0)*cj16*x419))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[7]=(((sj15*x413))+(((-1.0)*x416*x419))+new_r00);
evalcond[8]=(((x413*x417))+new_r11+(((-1.0)*cj15*x419)));
evalcond[9]=((((-1.0)*cj16*x414*x415))+new_r10+(((-1.0)*cj15*x420)));
evalcond[10]=(x413+(((-1.0)*new_r21*x418))+((new_r11*x417))+((new_r01*x416)));
evalcond[11]=((((-1.0)*new_r20*x418))+((new_r10*x417))+(((-1.0)*x419))+((new_r00*x416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x421 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x421.valid){
continue;
}
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x422.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x421.value)+(((1.5707963267949)*(x422.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x423=IKsin(j17);
IkReal x424=IKcos(j17);
IkReal x425=((1.0)*sj15);
IkReal x426=(cj15*cj16);
IkReal x427=(cj16*sj15);
IkReal x428=((1.0)*sj16);
IkReal x429=((1.0)*x424);
IkReal x430=((1.0)*x423);
evalcond[0]=(((sj16*x424))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x423*x428)));
evalcond[2]=(((cj16*x423))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=((((-1.0)*x430))+(((-1.0)*new_r00*x425))+((cj15*new_r10)));
evalcond[4]=((((-1.0)*x429))+((cj15*new_r11))+(((-1.0)*new_r01*x425)));
evalcond[5]=(((sj15*x424))+((x423*x426))+new_r01);
evalcond[6]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*cj16*x429)));
evalcond[7]=(((sj15*x423))+(((-1.0)*x426*x429))+new_r00);
evalcond[8]=(((x423*x427))+new_r11+(((-1.0)*cj15*x429)));
evalcond[9]=((((-1.0)*cj16*x424*x425))+(((-1.0)*cj15*x430))+new_r10);
evalcond[10]=(((new_r11*x427))+x423+(((-1.0)*new_r21*x428))+((new_r01*x426)));
evalcond[11]=((((-1.0)*x429))+((new_r10*x427))+(((-1.0)*new_r20*x428))+((new_r00*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x431 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x431.valid){
continue;
}
CheckValue<IkReal> x432=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x432.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x431.value)+(((1.5707963267949)*(x432.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[2];
evalcond[0]=(((sj16*(IKcos(j17))))+new_r20);
evalcond[1]=((((-1.0)*sj16*(IKsin(j17))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[3];
j15eval[0]=sj16;
j15eval[1]=IKsign(sj16);
j15eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=cj17;
j15eval[1]=sj16;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x433=IKsin(j15);
IkReal x434=IKcos(j15);
IkReal x435=((1.0)*new_r02);
IkReal x436=((1.0)*sj16);
IkReal x437=(new_r22*x434);
IkReal x438=(new_r12*x433);
IkReal x439=(new_r00*x434);
IkReal x440=(sj16*x434);
IkReal x441=(new_r22*x433);
IkReal x442=(new_r11*x433);
IkReal x443=((1.0)*x433);
IkReal x444=(new_r10*x433);
evalcond[0]=(x433+new_r00);
evalcond[1]=(x437+new_r01);
evalcond[2]=(x441+new_r11);
evalcond[3]=((((-1.0)*x434))+new_r10);
evalcond[4]=((((-1.0)*x434*x436))+new_r02);
evalcond[5]=((((-1.0)*x433*x436))+new_r12);
evalcond[6]=(x439+x444);
evalcond[7]=((((-1.0)*x433*x435))+((new_r12*x434)));
evalcond[8]=((((-1.0)*new_r01*x443))+((new_r11*x434)));
evalcond[9]=(((new_r01*x434))+x442+new_r22);
evalcond[10]=((-1.0)+(((-1.0)*new_r00*x443))+((new_r10*x434)));
evalcond[11]=(((new_r00*x437))+((new_r10*x441)));
evalcond[12]=((((-1.0)*x436))+x438+((new_r02*x434)));
evalcond[13]=((((-1.0)*x436*x439))+(((-1.0)*x436*x444)));
evalcond[14]=(((new_r02*x437))+((new_r22*x438))+(((-1.0)*new_r22*x436)));
evalcond[15]=((((-1.0)*new_r01*x434*x436))+(((-1.0)*x436*x442))+(((-1.0)*cj16*new_r21)));
evalcond[16]=((1.0)+((new_r01*x437))+((new_r11*x441))+(((-1.0)*sj16*x436)));
evalcond[17]=((1.0)+(((-1.0)*x435*x440))+(((-1.0)*x436*x438))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x445=IKcos(j15);
IkReal x446=IKsin(j15);
IkReal x447=((1.0)*new_r02);
IkReal x448=((1.0)*new_r22);
IkReal x449=((1.0)*sj16);
IkReal x450=(new_r12*x446);
IkReal x451=(new_r00*x445);
IkReal x452=(sj16*x445);
IkReal x453=(new_r10*x446);
IkReal x454=(new_r22*x445);
IkReal x455=(new_r11*x446);
IkReal x456=((1.0)*x446);
evalcond[0]=(x445+new_r10);
evalcond[1]=((((-1.0)*x456))+new_r00);
evalcond[2]=((((-1.0)*x445*x449))+new_r02);
evalcond[3]=(new_r12+(((-1.0)*x446*x449)));
evalcond[4]=((((-1.0)*x445*x448))+new_r01);
evalcond[5]=(new_r11+(((-1.0)*x446*x448)));
evalcond[6]=(x453+x451);
evalcond[7]=(((new_r12*x445))+(((-1.0)*x446*x447)));
evalcond[8]=((((-1.0)*new_r01*x456))+((new_r11*x445)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x456))+((new_r10*x445)));
evalcond[10]=(((new_r22*x453))+((new_r22*x451)));
evalcond[11]=((((-1.0)*x449))+x450+((new_r02*x445)));
evalcond[12]=((((-1.0)*x448))+((new_r01*x445))+x455);
evalcond[13]=((((-1.0)*x449*x453))+(((-1.0)*x449*x451)));
evalcond[14]=(((new_r02*x454))+((new_r22*x450))+(((-1.0)*sj16*x448)));
evalcond[15]=((-1.0)+((new_r01*x454))+(sj16*sj16)+((new_r22*x455)));
evalcond[16]=(((new_r22*sj16))+(((-1.0)*new_r01*x445*x449))+(((-1.0)*x449*x455)));
evalcond[17]=((1.0)+(((-1.0)*x447*x452))+(((-1.0)*x449*x450))+(((-1.0)*new_r22*x448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x457=((1.0)*sj17);
if( IKabs(((((-1.0)*new_r00*x457))+(((-1.0)*cj17*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x457))+((cj17*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x457))+(((-1.0)*cj17*new_r01))))+IKsqr(((((-1.0)*new_r01*x457))+((cj17*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*new_r00*x457))+(((-1.0)*cj17*new_r01))), ((((-1.0)*new_r01*x457))+((cj17*new_r00))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x458=IKcos(j15);
IkReal x459=IKsin(j15);
IkReal x460=((1.0)*cj17);
IkReal x461=(sj17*x459);
IkReal x462=(sj17*x458);
IkReal x463=((1.0)*x459);
IkReal x464=(x458*x460);
evalcond[0]=(((new_r11*x459))+((new_r01*x458))+sj17);
evalcond[1]=(x462+new_r01+((cj17*x459)));
evalcond[2]=((((-1.0)*x464))+x461+new_r00);
evalcond[3]=((((-1.0)*x464))+x461+new_r11);
evalcond[4]=(((new_r10*x459))+((new_r00*x458))+(((-1.0)*x460)));
evalcond[5]=((((-1.0)*x462))+(((-1.0)*x459*x460))+new_r10);
evalcond[6]=(((new_r10*x458))+(((-1.0)*new_r00*x463))+(((-1.0)*sj17)));
evalcond[7]=(((new_r11*x458))+(((-1.0)*new_r01*x463))+(((-1.0)*x460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x465=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj17*x465))+(((-1.0)*cj17*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj17))+(((-1.0)*cj17*x465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj17*x465))+(((-1.0)*cj17*new_r01))))+IKsqr((((new_r01*sj17))+(((-1.0)*cj17*x465))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((((-1.0)*sj17*x465))+(((-1.0)*cj17*new_r01))), (((new_r01*sj17))+(((-1.0)*cj17*x465))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x466=IKsin(j15);
IkReal x467=IKcos(j15);
IkReal x468=((1.0)*sj17);
IkReal x469=((1.0)*cj17);
IkReal x470=(cj17*x466);
IkReal x471=((1.0)*x466);
IkReal x472=(x467*x468);
evalcond[0]=(((new_r10*x466))+((new_r00*x467))+cj17);
evalcond[1]=(((cj17*x467))+((sj17*x466))+new_r00);
evalcond[2]=((((-1.0)*x472))+x470+new_r01);
evalcond[3]=((((-1.0)*x472))+x470+new_r10);
evalcond[4]=(((new_r11*x466))+((new_r01*x467))+(((-1.0)*x468)));
evalcond[5]=((((-1.0)*x466*x468))+new_r11+(((-1.0)*x467*x469)));
evalcond[6]=(((new_r10*x467))+(((-1.0)*new_r00*x471))+(((-1.0)*x468)));
evalcond[7]=(((new_r11*x467))+(((-1.0)*x469))+(((-1.0)*new_r01*x471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
IkReal x473=x474.value;
j15array[0]=((-1.0)*x473);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x473)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x475=IKcos(j15);
IkReal x476=IKsin(j15);
IkReal x477=(new_r00*x475);
IkReal x478=(new_r10*x476);
IkReal x479=((1.0)*x476);
evalcond[0]=(((new_r01*x475))+((new_r11*x476)));
evalcond[1]=(x477+x478);
evalcond[2]=(((new_r10*x475))+(((-1.0)*new_r00*x479)));
evalcond[3]=(((new_r11*x475))+(((-1.0)*new_r01*x479)));
evalcond[4]=(((new_r22*x478))+((new_r22*x477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x481 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x481.valid){
continue;
}
IkReal x480=x481.value;
j15array[0]=((-1.0)*x480);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x480)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x482=IKcos(j15);
IkReal x483=IKsin(j15);
IkReal x484=(new_r22*x482);
IkReal x485=(new_r22*x483);
IkReal x486=((1.0)*x483);
evalcond[0]=(((new_r11*x483))+((new_r01*x482)));
evalcond[1]=((((-1.0)*new_r00*x486))+((new_r10*x482)));
evalcond[2]=((((-1.0)*new_r01*x486))+((new_r11*x482)));
evalcond[3]=(((new_r11*x485))+((new_r01*x484)));
evalcond[4]=(((new_r10*x485))+((new_r00*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
IkReal x487=x488.value;
j15array[0]=((-1.0)*x487);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x487)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x489=IKcos(j15);
IkReal x490=IKsin(j15);
IkReal x491=(new_r00*x489);
IkReal x492=(new_r10*x490);
IkReal x493=((1.0)*x490);
evalcond[0]=(x492+x491);
evalcond[1]=((((-1.0)*new_r00*x493))+((new_r10*x489)));
evalcond[2]=((((-1.0)*new_r01*x493))+((new_r11*x489)));
evalcond[3]=(((new_r01*new_r22*x489))+((new_r11*new_r22*x490)));
evalcond[4]=(((new_r22*x492))+((new_r22*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x495=IKPowWithIntegerCheck(sj16,-1);
if(!x495.valid){
continue;
}
IkReal x494=x495.value;
CheckValue<IkReal> x496=IKPowWithIntegerCheck(cj17,-1);
if(!x496.valid){
continue;
}
if( IKabs((x494*(x496.value)*(((((-1.0)*cj16*new_r02*sj17))+(((-1.0)*new_r01*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x494)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x494*(x496.value)*(((((-1.0)*cj16*new_r02*sj17))+(((-1.0)*new_r01*sj16))))))+IKsqr((new_r02*x494))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x494*(x496.value)*(((((-1.0)*cj16*new_r02*sj17))+(((-1.0)*new_r01*sj16))))), (new_r02*x494));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x497=IKcos(j15);
IkReal x498=IKsin(j15);
IkReal x499=((1.0)*cj17);
IkReal x500=((1.0)*new_r02);
IkReal x501=((1.0)*cj16);
IkReal x502=((1.0)*sj17);
IkReal x503=((1.0)*sj16);
IkReal x504=(new_r00*x497);
IkReal x505=(cj17*x498);
IkReal x506=(sj16*x497);
IkReal x507=(cj16*x497);
IkReal x508=(new_r12*x498);
IkReal x509=(sj17*x498);
IkReal x510=(new_r10*x498);
IkReal x511=(new_r11*x498);
IkReal x512=((1.0)*x498);
evalcond[0]=((((-1.0)*x497*x503))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x498*x503)));
evalcond[2]=(((new_r12*x497))+(((-1.0)*x498*x500)));
evalcond[3]=(x505+new_r01+((sj17*x507)));
evalcond[4]=(((new_r02*x497))+(((-1.0)*x503))+x508);
evalcond[5]=(x511+((cj16*sj17))+((new_r01*x497)));
evalcond[6]=((((-1.0)*x499*x507))+x509+new_r00);
evalcond[7]=(((cj16*x509))+(((-1.0)*x497*x499))+new_r11);
evalcond[8]=((((-1.0)*x502))+((new_r10*x497))+(((-1.0)*new_r00*x512)));
evalcond[9]=((((-1.0)*x499))+((new_r11*x497))+(((-1.0)*new_r01*x512)));
evalcond[10]=((((-1.0)*cj16*x499))+x504+x510);
evalcond[11]=((((-1.0)*x497*x502))+(((-1.0)*cj16*x498*x499))+new_r10);
evalcond[12]=(((cj16*x508))+((new_r02*x507))+(((-1.0)*new_r22*x503)));
evalcond[13]=((((-1.0)*new_r21*x503))+sj17+((new_r01*x507))+((cj16*x511)));
evalcond[14]=((((-1.0)*x503*x510))+(((-1.0)*new_r20*x501))+(((-1.0)*x503*x504)));
evalcond[15]=((((-1.0)*new_r21*x501))+(((-1.0)*x503*x511))+(((-1.0)*new_r01*x497*x503)));
evalcond[16]=((1.0)+(((-1.0)*x503*x508))+(((-1.0)*new_r22*x501))+(((-1.0)*x500*x506)));
evalcond[17]=((((-1.0)*x499))+((cj16*x504))+(((-1.0)*new_r20*x503))+((cj16*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x513 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x513.valid){
continue;
}
CheckValue<IkReal> x514=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x514.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x513.value)+(((1.5707963267949)*(x514.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x515=IKcos(j15);
IkReal x516=IKsin(j15);
IkReal x517=((1.0)*cj17);
IkReal x518=((1.0)*new_r02);
IkReal x519=((1.0)*cj16);
IkReal x520=((1.0)*sj17);
IkReal x521=((1.0)*sj16);
IkReal x522=(new_r00*x515);
IkReal x523=(cj17*x516);
IkReal x524=(sj16*x515);
IkReal x525=(cj16*x515);
IkReal x526=(new_r12*x516);
IkReal x527=(sj17*x516);
IkReal x528=(new_r10*x516);
IkReal x529=(new_r11*x516);
IkReal x530=((1.0)*x516);
evalcond[0]=((((-1.0)*x515*x521))+new_r02);
evalcond[1]=((((-1.0)*x516*x521))+new_r12);
evalcond[2]=(((new_r12*x515))+(((-1.0)*x516*x518)));
evalcond[3]=(x523+((sj17*x525))+new_r01);
evalcond[4]=(((new_r02*x515))+(((-1.0)*x521))+x526);
evalcond[5]=(((new_r01*x515))+x529+((cj16*sj17)));
evalcond[6]=((((-1.0)*x517*x525))+x527+new_r00);
evalcond[7]=((((-1.0)*x515*x517))+new_r11+((cj16*x527)));
evalcond[8]=(((new_r10*x515))+(((-1.0)*new_r00*x530))+(((-1.0)*x520)));
evalcond[9]=(((new_r11*x515))+(((-1.0)*new_r01*x530))+(((-1.0)*x517)));
evalcond[10]=((((-1.0)*cj16*x517))+x522+x528);
evalcond[11]=((((-1.0)*x515*x520))+new_r10+(((-1.0)*cj16*x516*x517)));
evalcond[12]=(((new_r02*x525))+(((-1.0)*new_r22*x521))+((cj16*x526)));
evalcond[13]=(((new_r01*x525))+(((-1.0)*new_r21*x521))+sj17+((cj16*x529)));
evalcond[14]=((((-1.0)*x521*x528))+(((-1.0)*x521*x522))+(((-1.0)*new_r20*x519)));
evalcond[15]=((((-1.0)*x521*x529))+(((-1.0)*new_r21*x519))+(((-1.0)*new_r01*x515*x521)));
evalcond[16]=((1.0)+(((-1.0)*x521*x526))+(((-1.0)*new_r22*x519))+(((-1.0)*x518*x524)));
evalcond[17]=((((-1.0)*new_r20*x521))+(((-1.0)*x517))+((cj16*x528))+((cj16*x522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x531 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x531.valid){
continue;
}
CheckValue<IkReal> x532=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x532.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x531.value)+(((1.5707963267949)*(x532.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x533=IKcos(j15);
IkReal x534=IKsin(j15);
IkReal x535=((1.0)*sj16);
IkReal x536=((1.0)*cj16);
IkReal x537=(new_r12*x534);
IkReal x538=(new_r02*x533);
evalcond[0]=((((-1.0)*x533*x535))+new_r02);
evalcond[1]=((((-1.0)*x534*x535))+new_r12);
evalcond[2]=(((new_r12*x533))+(((-1.0)*new_r02*x534)));
evalcond[3]=((((-1.0)*x535))+x537+x538);
evalcond[4]=(((cj16*x538))+((cj16*x537))+(((-1.0)*new_r22*x535)));
evalcond[5]=((((-1.0)*new_r00*x533*x535))+(((-1.0)*new_r10*x534*x535))+(((-1.0)*new_r20*x536)));
evalcond[6]=((((-1.0)*new_r01*x533*x535))+(((-1.0)*new_r21*x536))+(((-1.0)*new_r11*x534*x535)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x536))+(((-1.0)*x535*x538))+(((-1.0)*x535*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
j17eval[0]=sj15;
j17eval[1]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal j17eval[3];
j17eval[0]=cj15;
j17eval[1]=cj16;
j17eval[2]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=cj16;
j17eval[1]=IKsign(cj16);
j17eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=new_r12;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=sj16;
j17eval[1]=new_r12;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x539=IKsin(j17);
IkReal x540=((1.0)*(IKcos(j17)));
evalcond[0]=(x539+new_r11);
evalcond[1]=((((-1.0)*x540))+new_r10);
evalcond[2]=((((-1.0)*x539))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x540))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r12;
evalcond[2]=new_r21;
evalcond[3]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x541=IKcos(j17);
IkReal x542=((1.0)*(IKsin(j17)));
evalcond[0]=(x541+new_r10);
evalcond[1]=((((-1.0)*x542))+new_r11);
evalcond[2]=((((-1.0)*x542))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x541))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x543=IKcos(j17);
IkReal x544=((1.0)*(IKsin(j17)));
evalcond[0]=(x543+new_r20);
evalcond[1]=((((-1.0)*x544))+new_r21);
evalcond[2]=((((-1.0)*x544))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x543))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x545=IKsin(j17);
IkReal x546=((1.0)*(IKcos(j17)));
evalcond[0]=(x545+new_r21);
evalcond[1]=((((-1.0)*x546))+new_r20);
evalcond[2]=((((-1.0)*x545))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x546))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[5];
IkReal x547=IKsin(j17);
IkReal x548=IKcos(j17);
evalcond[0]=x547;
evalcond[1]=((-1.0)*x548);
evalcond[2]=((-1.0)*new_r12*x547);
evalcond[3]=((((-1.0)*x547))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x548))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x549=IKPowWithIntegerCheck(sj16,-1);
if(!x549.valid){
continue;
}
CheckValue<IkReal> x550=IKPowWithIntegerCheck(new_r12,-1);
if(!x550.valid){
continue;
}
if( IKabs((new_r21*(x549.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x550.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r21*(x549.value)))+IKsqr(((-1.0)*new_r20*(x550.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((new_r21*(x549.value)), ((-1.0)*new_r20*(x550.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x551=IKsin(j17);
IkReal x552=IKcos(j17);
IkReal x553=((1.0)*sj16);
IkReal x554=((1.0)*x552);
evalcond[0]=(((new_r12*x552))+new_r20);
evalcond[1]=(new_r11+((cj16*x551)));
evalcond[2]=((((-1.0)*x551*x553))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*cj16*x554)));
evalcond[4]=((((-1.0)*x551))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x554))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x553))+x551+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x554))+(((-1.0)*new_r20*x553))+((cj16*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x555=IKPowWithIntegerCheck(new_r12,-1);
if(!x555.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x555.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x555.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x555.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x556=IKsin(j17);
IkReal x557=IKcos(j17);
IkReal x558=((1.0)*sj16);
IkReal x559=((1.0)*x557);
evalcond[0]=(((new_r12*x557))+new_r20);
evalcond[1]=(new_r11+((cj16*x556)));
evalcond[2]=((((-1.0)*x556*x558))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*cj16*x559)));
evalcond[4]=((((-1.0)*x556))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x559))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x558))+x556+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x559))+(((-1.0)*new_r20*x558))+((cj16*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x560 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x560.valid){
continue;
}
CheckValue<IkReal> x561=IKPowWithIntegerCheck(IKsign(cj16),-1);
if(!x561.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x560.value)+(((1.5707963267949)*(x561.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x562=IKsin(j17);
IkReal x563=IKcos(j17);
IkReal x564=((1.0)*sj16);
IkReal x565=((1.0)*x563);
evalcond[0]=(new_r20+((new_r12*x563)));
evalcond[1]=(((cj16*x562))+new_r11);
evalcond[2]=((((-1.0)*x562*x564))+new_r21);
evalcond[3]=((((-1.0)*cj16*x565))+new_r10);
evalcond[4]=((((-1.0)*x562))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x565)));
evalcond[6]=(x562+((cj16*new_r11))+(((-1.0)*new_r21*x564)));
evalcond[7]=((((-1.0)*new_r20*x564))+((cj16*new_r10))+(((-1.0)*x565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x566=IKcos(j17);
IkReal x567=IKsin(j17);
IkReal x568=((1.0)*new_r11);
IkReal x569=((1.0)*sj16);
IkReal x570=((1.0)*x566);
evalcond[0]=((((-1.0)*x567))+new_r00);
evalcond[1]=((((-1.0)*x570))+new_r01);
evalcond[2]=((((-1.0)*new_r12*x570))+new_r20);
evalcond[3]=((((-1.0)*x567*x569))+new_r21);
evalcond[4]=(((cj16*x567))+(((-1.0)*x568)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*cj16*x570)));
evalcond[6]=((((-1.0)*cj16*x568))+x567+(((-1.0)*new_r21*x569)));
CheckValue<IkReal> x571=IKPowWithIntegerCheck(new_r12,-1);
if(!x571.valid){
continue;
}
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*x570))+((new_r20*(x571.value)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x572=IKcos(j17);
IkReal x573=IKsin(j17);
IkReal x574=((1.0)*sj15);
IkReal x575=((1.0)*x573);
IkReal x576=((1.0)*x572);
evalcond[0]=(x572+new_r20);
evalcond[1]=((((-1.0)*x575))+new_r21);
evalcond[2]=(((sj15*x572))+new_r01);
evalcond[3]=(((sj15*x573))+new_r00);
evalcond[4]=((((-1.0)*cj15*x576))+new_r11);
evalcond[5]=((((-1.0)*cj15*x575))+new_r10);
evalcond[6]=(((cj15*new_r10))+(((-1.0)*x575))+(((-1.0)*new_r00*x574)));
evalcond[7]=(((cj15*new_r11))+(((-1.0)*x576))+(((-1.0)*new_r01*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x577=IKcos(j17);
IkReal x578=IKsin(j17);
IkReal x579=((1.0)*sj15);
IkReal x580=((1.0)*x577);
IkReal x581=((1.0)*x578);
evalcond[0]=(x578+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x580)));
evalcond[2]=(((sj15*x577))+new_r01);
evalcond[3]=(((sj15*x578))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj15*x580)));
evalcond[5]=(new_r10+(((-1.0)*cj15*x581)));
evalcond[6]=(((cj15*new_r10))+(((-1.0)*new_r00*x579))+(((-1.0)*x581)));
evalcond[7]=(((cj15*new_r11))+(((-1.0)*new_r01*x579))+(((-1.0)*x580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x582=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj15))+(((-1.0)*cj15*x582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*new_r00))+(((-1.0)*sj15*x582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj15))+(((-1.0)*cj15*x582))))+IKsqr((((cj15*new_r00))+(((-1.0)*sj15*x582))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*new_r00*sj15))+(((-1.0)*cj15*x582))), (((cj15*new_r00))+(((-1.0)*sj15*x582))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x583=IKsin(j17);
IkReal x584=IKcos(j17);
IkReal x585=((1.0)*sj15);
IkReal x586=((1.0)*cj15);
IkReal x587=((1.0)*x584);
IkReal x588=(sj15*x583);
IkReal x589=(x584*x586);
evalcond[0]=(((cj15*new_r01))+x583+((new_r11*sj15)));
evalcond[1]=(((cj15*x583))+((sj15*x584))+new_r01);
evalcond[2]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*x587)));
evalcond[3]=((((-1.0)*x583))+((cj15*new_r10))+(((-1.0)*new_r00*x585)));
evalcond[4]=((((-1.0)*new_r01*x585))+((cj15*new_r11))+(((-1.0)*x587)));
evalcond[5]=(x588+new_r00+(((-1.0)*x589)));
evalcond[6]=(x588+new_r11+(((-1.0)*x589)));
evalcond[7]=((((-1.0)*x584*x585))+(((-1.0)*x583*x586))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x590=((1.0)*sj15);
if( IKabs(((((-1.0)*new_r00*x590))+((cj15*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x590)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x590))+((cj15*new_r01))))+IKsqr(((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x590))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*new_r00*x590))+((cj15*new_r01))), ((((-1.0)*cj15*new_r00))+(((-1.0)*new_r01*x590))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x591=IKcos(j17);
IkReal x592=IKsin(j17);
IkReal x593=((1.0)*sj15);
IkReal x594=((1.0)*x592);
IkReal x595=(sj15*x591);
IkReal x596=((1.0)*x591);
IkReal x597=(cj15*x594);
evalcond[0]=(((cj15*new_r00))+x591+((new_r10*sj15)));
evalcond[1]=((((-1.0)*x594))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[2]=(((sj15*x592))+((cj15*x591))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x593))+((cj15*new_r10))+(((-1.0)*x594)));
evalcond[4]=((((-1.0)*new_r01*x593))+((cj15*new_r11))+(((-1.0)*x596)));
evalcond[5]=((((-1.0)*x597))+x595+new_r01);
evalcond[6]=((((-1.0)*x597))+x595+new_r10);
evalcond[7]=((((-1.0)*x592*x593))+(((-1.0)*cj15*x596))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r10, new_r11);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x598=IKcos(j17);
IkReal x599=IKsin(j17);
IkReal x600=((1.0)*sj16);
IkReal x601=((1.0)*x598);
IkReal x602=((1.0)*x599);
evalcond[0]=(((new_r02*x598))+new_r20);
evalcond[1]=((((-1.0)*x602))+new_r10);
evalcond[2]=((((-1.0)*x601))+new_r11);
evalcond[3]=(((cj16*x599))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x602))+new_r21);
evalcond[5]=((((-1.0)*cj16*x601))+new_r00);
evalcond[6]=(x599+((cj16*new_r01))+(((-1.0)*new_r21*x600)));
evalcond[7]=((((-1.0)*new_r20*x600))+(((-1.0)*x601))+((cj16*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
j17eval[1]=IKsign(new_r02);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=new_r02;
j17eval[1]=cj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x603=IKcos(j17);
IkReal x604=((1.0)*(IKsin(j17)));
evalcond[0]=(x603+new_r20);
evalcond[1]=((((-1.0)*x604))+new_r21);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x604)));
evalcond[3]=((((-1.0)*x603))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j16)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x605=IKsin(j17);
IkReal x606=((1.0)*(IKcos(j17)));
evalcond[0]=(x605+new_r21);
evalcond[1]=((((-1.0)*x606))+new_r20);
evalcond[2]=((((-1.0)*x605))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[6];
IkReal x607=IKsin(j17);
IkReal x608=IKcos(j17);
IkReal x609=((-1.0)*x608);
evalcond[0]=x607;
evalcond[1]=(new_r22*x607);
evalcond[2]=x609;
evalcond[3]=(new_r22*x609);
evalcond[4]=((((-1.0)*x607))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x608))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x610=IKPowWithIntegerCheck(new_r02,-1);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611=IKPowWithIntegerCheck(cj16,-1);
if(!x611.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x610.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x611.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x610.value)))+IKsqr(((-1.0)*new_r00*(x611.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r21*(x610.value)), ((-1.0)*new_r00*(x611.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x612=IKsin(j17);
IkReal x613=IKcos(j17);
CheckValue<IkReal> x618=IKPowWithIntegerCheck(new_r02,-1);
if(!x618.valid){
continue;
}
IkReal x614=x618.value;
IkReal x615=new_r22*new_r22;
IkReal x616=((1.0)*x613);
IkReal x617=(x614*x615);
evalcond[0]=(((new_r02*x612))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x616))+new_r20);
evalcond[2]=((((-1.0)*x612))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x616))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x612))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj16*x616)));
evalcond[6]=(((new_r21*x617))+x612+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x617))+(((-1.0)*x616))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x619=IKPowWithIntegerCheck(new_r02,-1);
if(!x619.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x619.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x619.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x619.value)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x620=IKsin(j17);
IkReal x621=IKcos(j17);
CheckValue<IkReal> x626=IKPowWithIntegerCheck(new_r02,-1);
if(!x626.valid){
continue;
}
IkReal x622=x626.value;
IkReal x623=new_r22*new_r22;
IkReal x624=((1.0)*x621);
IkReal x625=(x622*x623);
evalcond[0]=(((new_r02*x620))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x624))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x620)));
evalcond[3]=((((-1.0)*x624))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x620))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj16*x624))+(((-1.0)*new_r00)));
evalcond[6]=(x620+((new_r21*x625))+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x624))+((new_r20*x625))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x627 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x628.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x627.value)+(((1.5707963267949)*(x628.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x629=IKsin(j17);
IkReal x630=IKcos(j17);
CheckValue<IkReal> x635=IKPowWithIntegerCheck(new_r02,-1);
if(!x635.valid){
continue;
}
IkReal x631=x635.value;
IkReal x632=new_r22*new_r22;
IkReal x633=((1.0)*x630);
IkReal x634=(x631*x632);
evalcond[0]=(((new_r02*x629))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x633))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x629)));
evalcond[3]=((((-1.0)*x633))+(((-1.0)*new_r11)));
evalcond[4]=(((cj16*x629))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj16*x633))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x634))+x629+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x633))+((new_r02*new_r20))+((new_r20*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j17eval[0]=1.0;
if( IKabs(j17eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j17]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j17array[2], cj17array[2], sj17array[2], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[2]={true,true};
_nj17 = 2;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x637=IKPowWithIntegerCheck(sj16,-1);
if(!x637.valid){
continue;
}
IkReal x636=x637.value;
CheckValue<IkReal> x638=IKPowWithIntegerCheck(cj15,-1);
if(!x638.valid){
continue;
}
CheckValue<IkReal> x639=IKPowWithIntegerCheck(cj16,-1);
if(!x639.valid){
continue;
}
if( IKabs((x636*(x638.value)*(x639.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x636)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x636*(x638.value)*(x639.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15))))))+IKsqr(((-1.0)*new_r20*x636))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x636*(x638.value)*(x639.value)*(((((-1.0)*new_r01*sj16))+((new_r20*sj15))))), ((-1.0)*new_r20*x636));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x640=IKsin(j17);
IkReal x641=IKcos(j17);
IkReal x642=((1.0)*sj15);
IkReal x643=(cj15*cj16);
IkReal x644=(cj16*sj15);
IkReal x645=((1.0)*sj16);
IkReal x646=((1.0)*x641);
IkReal x647=((1.0)*x640);
evalcond[0]=(new_r20+((sj16*x641)));
evalcond[1]=((((-1.0)*x640*x645))+new_r21);
evalcond[2]=(((cj16*x640))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=(((cj15*new_r10))+(((-1.0)*x647))+(((-1.0)*new_r00*x642)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*x646))+(((-1.0)*new_r01*x642)));
evalcond[5]=(((x640*x643))+((sj15*x641))+new_r01);
evalcond[6]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*cj16*x646)));
evalcond[7]=(((sj15*x640))+(((-1.0)*x643*x646))+new_r00);
evalcond[8]=(((x640*x644))+new_r11+(((-1.0)*cj15*x646)));
evalcond[9]=(new_r10+(((-1.0)*cj16*x641*x642))+(((-1.0)*cj15*x647)));
evalcond[10]=(((new_r11*x644))+(((-1.0)*new_r21*x645))+((new_r01*x643))+x640);
evalcond[11]=((((-1.0)*x646))+((new_r10*x644))+((new_r00*x643))+(((-1.0)*new_r20*x645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x649=IKPowWithIntegerCheck(sj16,-1);
if(!x649.valid){
continue;
}
IkReal x648=x649.value;
CheckValue<IkReal> x650=IKPowWithIntegerCheck(sj15,-1);
if(!x650.valid){
continue;
}
if( IKabs((x648*(x650.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x648)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x648*(x650.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16))))))+IKsqr(((-1.0)*new_r20*x648))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x648*(x650.value)*(((((-1.0)*cj15*cj16*new_r20))+(((-1.0)*new_r00*sj16))))), ((-1.0)*new_r20*x648));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x651=IKsin(j17);
IkReal x652=IKcos(j17);
IkReal x653=((1.0)*sj15);
IkReal x654=(cj15*cj16);
IkReal x655=(cj16*sj15);
IkReal x656=((1.0)*sj16);
IkReal x657=((1.0)*x652);
IkReal x658=((1.0)*x651);
evalcond[0]=(((sj16*x652))+new_r20);
evalcond[1]=((((-1.0)*x651*x656))+new_r21);
evalcond[2]=(((cj16*x651))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=((((-1.0)*new_r00*x653))+((cj15*new_r10))+(((-1.0)*x658)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*x657))+(((-1.0)*new_r01*x653)));
evalcond[5]=(((x651*x654))+((sj15*x652))+new_r01);
evalcond[6]=((((-1.0)*cj16*x657))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[7]=(((sj15*x651))+new_r00+(((-1.0)*x654*x657)));
evalcond[8]=(((x651*x655))+(((-1.0)*cj15*x657))+new_r11);
evalcond[9]=((((-1.0)*cj16*x652*x653))+(((-1.0)*cj15*x658))+new_r10);
evalcond[10]=(((new_r01*x654))+x651+((new_r11*x655))+(((-1.0)*new_r21*x656)));
evalcond[11]=((((-1.0)*x657))+(((-1.0)*new_r20*x656))+((new_r10*x655))+((new_r00*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x660.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x659.value)+(((1.5707963267949)*(x660.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x661=IKsin(j17);
IkReal x662=IKcos(j17);
IkReal x663=((1.0)*sj15);
IkReal x664=(cj15*cj16);
IkReal x665=(cj16*sj15);
IkReal x666=((1.0)*sj16);
IkReal x667=((1.0)*x662);
IkReal x668=((1.0)*x661);
evalcond[0]=(((sj16*x662))+new_r20);
evalcond[1]=((((-1.0)*x661*x666))+new_r21);
evalcond[2]=(((cj16*x661))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[3]=(((cj15*new_r10))+(((-1.0)*x668))+(((-1.0)*new_r00*x663)));
evalcond[4]=(((cj15*new_r11))+(((-1.0)*x667))+(((-1.0)*new_r01*x663)));
evalcond[5]=(((x661*x664))+((sj15*x662))+new_r01);
evalcond[6]=(((cj15*new_r00))+((new_r10*sj15))+(((-1.0)*cj16*x667)));
evalcond[7]=(((sj15*x661))+new_r00+(((-1.0)*x664*x667)));
evalcond[8]=((((-1.0)*cj15*x667))+((x661*x665))+new_r11);
evalcond[9]=((((-1.0)*cj16*x662*x663))+(((-1.0)*cj15*x668))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x666))+((new_r11*x665))+x661+((new_r01*x664)));
evalcond[11]=(((new_r10*x665))+(((-1.0)*x667))+((new_r00*x664))+(((-1.0)*new_r20*x666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j11;
vinfos[0].indices[0] = _ij11[0];
vinfos[0].indices[1] = _ij11[1];
vinfos[0].maxsolutions = _nj11;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j12;
vinfos[1].indices[0] = _ij12[0];
vinfos[1].indices[1] = _ij12[1];
vinfos[1].maxsolutions = _nj12;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j13;
vinfos[2].indices[0] = _ij13[0];
vinfos[2].indices[1] = _ij13[1];
vinfos[2].maxsolutions = _nj13;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j14;
vinfos[3].indices[0] = _ij14[0];
vinfos[3].indices[1] = _ij14[1];
vinfos[3].maxsolutions = _nj14;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j15;
vinfos[4].indices[0] = _ij15[0];
vinfos[4].indices[1] = _ij15[1];
vinfos[4].maxsolutions = _nj15;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j16;
vinfos[5].indices[0] = _ij16[0];
vinfos[5].indices[1] = _ij16[1];
vinfos[5].maxsolutions = _nj16;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j17;
vinfos[6].indices[0] = _ij17[0];
vinfos[6].indices[1] = _ij17[1];
vinfos[6].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "783d9d53851319ddb82ac5e4905c0ab1"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
